import {IStatementsVisitor, StatementPosition} from '../../shared';
import {getStatementEndIndex} from '../../shared/extract-statement-positions-from-query';
import {CommandsContext} from './generated/MongoParser';
import {MongoParserVisitor} from './generated/MongoParserVisitor';

export class MongoStatementsVisitor
    extends MongoParserVisitor<unknown>
    implements IStatementsVisitor
{
    statementPositions: StatementPosition[] = [];
    lastTokenIndex = 0;

    visitCommands = (context: CommandsContext): void => {
        if (!context.start || !context.stop) {
            return;
        }

        // Linter doesn't like uppercase function names, but this name is generated by ANTLR
        // eslint-disable-next-line new-cap
        const semi = context.SEMICOLON();

        this.statementPositions.push({
            startIndex: context.start.start,
            endIndex: getStatementEndIndex(context.stop, semi),
        });

        const otherStatements = context.commands();
        if (otherStatements) {
            this.visitCommands(otherStatements);
        } else {
            this.lastTokenIndex = semi ? semi.symbol.tokenIndex : context.stop.tokenIndex;
        }
    };
}
