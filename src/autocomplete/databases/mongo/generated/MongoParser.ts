////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/mongo/grammar/MongoParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { MongoParserVisitor } from "./MongoParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class MongoParser extends antlr.Parser {
    public static readonly DB = 1;
    public static readonly FIND = 2;
    public static readonly FIND_ONE = 3;
    public static readonly FIND_ONE_AND_DELETE = 4;
    public static readonly FIND_ONE_AND_REPLACE = 5;
    public static readonly FIND_ONE_AND_UPDATE = 6;
    public static readonly SHOW_RECORD_ID = 7;
    public static readonly RETURN_KEY = 8;
    public static readonly FILTER = 9;
    public static readonly MIN = 10;
    public static readonly MAX = 11;
    public static readonly SORT = 12;
    public static readonly LIMIT = 13;
    public static readonly EXPLAIN = 14;
    public static readonly HINT = 15;
    public static readonly SKIP_ = 16;
    public static readonly INSERT_ONE = 17;
    public static readonly INSERT_MANY = 18;
    public static readonly BULK_WRITE = 19;
    public static readonly UPDATE_ONE = 20;
    public static readonly UPDATE_MANY = 21;
    public static readonly REPLACE_ONE = 22;
    public static readonly DELETE_ONE = 23;
    public static readonly DELETE_MANY = 24;
    public static readonly RENAME = 25;
    public static readonly DROP = 26;
    public static readonly IS_CAPPED = 27;
    public static readonly CREATE_INDEX = 28;
    public static readonly CREATE_INDEXES = 29;
    public static readonly DROP_INDEX = 30;
    public static readonly DROP_INDEXES = 31;
    public static readonly LIST_INDEXES = 32;
    public static readonly INDEXES = 33;
    public static readonly INDEX_EXISTS = 34;
    public static readonly INDEX_INFORMATION = 35;
    public static readonly ESTIMATED_DOCUMENT_COUNT = 36;
    public static readonly COUNT_DOCUMENTS = 37;
    public static readonly DISTINCT = 38;
    public static readonly AGGREGATE = 39;
    public static readonly COLLECTION = 40;
    public static readonly CREATE_COLLECTION = 41;
    public static readonly COMMAND = 42;
    public static readonly LIST_COLLECTIONS = 43;
    public static readonly RENAME_COLLECTION = 44;
    public static readonly DROP_COLLECTION = 45;
    public static readonly DROP_DATABASE = 46;
    public static readonly REMOVE_USER = 47;
    public static readonly RUN_CURSOR_COMMAND = 48;
    public static readonly STATS = 49;
    public static readonly PROFILING_LEVEL = 50;
    public static readonly SET_PROFILING_LEVEL = 51;
    public static readonly ADMIN = 52;
    public static readonly BUILD_INFO = 53;
    public static readonly SERVER_INFO = 54;
    public static readonly SERVER_STATUS = 55;
    public static readonly PING = 56;
    public static readonly VALIDATE_COLLECTION = 57;
    public static readonly LIST_DATABASES = 58;
    public static readonly REPL_SET_GET_STATUS = 59;
    public static readonly OBJECT_ID = 60;
    public static readonly DATE = 61;
    public static readonly UUID = 62;
    public static readonly MIN_KEY = 63;
    public static readonly MAX_KEY = 64;
    public static readonly NUMBER_DECIMAL = 65;
    public static readonly NUMBER_INT = 66;
    public static readonly NUMBER_LONG = 67;
    public static readonly LBRACKET = 68;
    public static readonly RBRACKET = 69;
    public static readonly LPAREN = 70;
    public static readonly RPAREN = 71;
    public static readonly LBRACE = 72;
    public static readonly RBRACE = 73;
    public static readonly COLON = 74;
    public static readonly COMMA = 75;
    public static readonly SEMICOLON = 76;
    public static readonly DOT = 77;
    public static readonly TRUE = 78;
    public static readonly FALSE = 79;
    public static readonly NULL = 80;
    public static readonly STRING = 81;
    public static readonly NUMBER = 82;
    public static readonly NUMERIC_LITERAL = 83;
    public static readonly SYMBOL = 84;
    public static readonly IDENTIFIER = 85;
    public static readonly SINGLE_LINE_COMMENT = 86;
    public static readonly MULTI_LINE_COMMENT = 87;
    public static readonly WS = 88;
    public static readonly RULE_root = 0;
    public static readonly RULE_commands = 1;
    public static readonly RULE_command = 2;
    public static readonly RULE_databaseOperation = 3;
    public static readonly RULE_databaseMethod = 4;
    public static readonly RULE_databaseAdminMethod = 5;
    public static readonly RULE_adminMethod = 6;
    public static readonly RULE_validateCollectionMethod = 7;
    public static readonly RULE_validateCollectionArgument1 = 8;
    public static readonly RULE_validateCollectionArgument2 = 9;
    public static readonly RULE_serverStatusMethod = 10;
    public static readonly RULE_serverStatusArgument = 11;
    public static readonly RULE_pingMethod = 12;
    public static readonly RULE_pingArgument = 13;
    public static readonly RULE_listDatabasesMethod = 14;
    public static readonly RULE_listDatabasesArgument = 15;
    public static readonly RULE_replSetGetStatusMethod = 16;
    public static readonly RULE_replSetGetStatusArgument = 17;
    public static readonly RULE_serverInfoMethod = 18;
    public static readonly RULE_serverInfoArgument = 19;
    public static readonly RULE_buildInfoMethod = 20;
    public static readonly RULE_buildInfoArgument = 21;
    public static readonly RULE_databaseSetProfilingLevelMethod = 22;
    public static readonly RULE_databaseSetProfilingLevelArgument1 = 23;
    public static readonly RULE_databaseSetProfilingLevelArgument2 = 24;
    public static readonly RULE_databaseProfilingLevelMethod = 25;
    public static readonly RULE_databaseProfilingLevelArgument = 26;
    public static readonly RULE_databaseStatsMethod = 27;
    public static readonly RULE_databaseStatsArgument = 28;
    public static readonly RULE_databaseRunCursorCommandMethod = 29;
    public static readonly RULE_databaseRunCursorCommandArgument1 = 30;
    public static readonly RULE_databaseRunCursorCommandArgument2 = 31;
    public static readonly RULE_databaseIndexInformationMethod = 32;
    public static readonly RULE_databaseIndexInformationArgument1 = 33;
    public static readonly RULE_databaseIndexInformationArgument2 = 34;
    public static readonly RULE_databaseRemoveUserMethod = 35;
    public static readonly RULE_databaseRemoveUserArgument1 = 36;
    public static readonly RULE_quotedUsername = 37;
    public static readonly RULE_databaseRemoveUserArgument2 = 38;
    public static readonly RULE_databaseCreateIndexMethod = 39;
    public static readonly RULE_databaseCreateIndexArgument3 = 40;
    public static readonly RULE_databaseCreateIndexArgument2 = 41;
    public static readonly RULE_databaseCreateIndexArgument1 = 42;
    public static readonly RULE_databaseDropDatabaseMethod = 43;
    public static readonly RULE_databaseDropDatabaseArgument = 44;
    public static readonly RULE_databaseDropCollectionMethod = 45;
    public static readonly RULE_databaseDropCollectionArgument1 = 46;
    public static readonly RULE_databaseDropCollectionArgument2 = 47;
    public static readonly RULE_databaseRenameCollectionMethod = 48;
    public static readonly RULE_databaseRenameCollectionArgument1 = 49;
    public static readonly RULE_databaseRenameCollectionArgument2 = 50;
    public static readonly RULE_databaseRenameCollectionArgument3 = 51;
    public static readonly RULE_databaseListCollectionsMethod = 52;
    public static readonly RULE_databaseListCollectionsArgument1 = 53;
    public static readonly RULE_databaseListCollectionsArgument2 = 54;
    public static readonly RULE_databaseCommandMethod = 55;
    public static readonly RULE_databaseCommandArgument1 = 56;
    public static readonly RULE_databaseCommandArgument2 = 57;
    public static readonly RULE_databaseCreateCollectionMethod = 58;
    public static readonly RULE_databaseCreateCollectionArgument1 = 59;
    public static readonly RULE_databaseCreateCollectionArgument2 = 60;
    public static readonly RULE_databaseCollectionMethod = 61;
    public static readonly RULE_quotedCollectionName = 62;
    public static readonly RULE_collectionOperation = 63;
    public static readonly RULE_collectionName = 64;
    public static readonly RULE_collectionMethod = 65;
    public static readonly RULE_aggregateMethod = 66;
    public static readonly RULE_aggregateArgument2 = 67;
    public static readonly RULE_aggregateArgument1 = 68;
    public static readonly RULE_collectionDistinctMethod = 69;
    public static readonly RULE_collectionDistinctArgument1 = 70;
    public static readonly RULE_collectionDistinctArgument2 = 71;
    public static readonly RULE_collectionDistinctArgument3 = 72;
    public static readonly RULE_collectionCountDocumentsMethod = 73;
    public static readonly RULE_collectionCountDocumentsArgument2 = 74;
    public static readonly RULE_collectionCountDocumentsArgument1 = 75;
    public static readonly RULE_collectionEstimatedDocumentCountMethod = 76;
    public static readonly RULE_collectionEstimatedDocumentCountArgument = 77;
    public static readonly RULE_collectionIndexInformationMethod = 78;
    public static readonly RULE_collectionIndexInformationArgument = 79;
    public static readonly RULE_collectionIndexExistsMethod = 80;
    public static readonly RULE_collectionIndexExistsArgument2 = 81;
    public static readonly RULE_collectionIndexExistsArgument1 = 82;
    public static readonly RULE_indexName = 83;
    public static readonly RULE_collectionIndexesMethod = 84;
    public static readonly RULE_collectionIndexesArgument = 85;
    public static readonly RULE_collectionListIndexesMethod = 86;
    public static readonly RULE_collectionListIndexesArgument = 87;
    public static readonly RULE_collectionDropIndexesMethod = 88;
    public static readonly RULE_collectionDropIndexesArgument = 89;
    public static readonly RULE_collectionDropIndexMethod = 90;
    public static readonly RULE_collectionDropIndexArgument2 = 91;
    public static readonly RULE_collectionDropIndexArgument1 = 92;
    public static readonly RULE_collectionCreateIndexesMethod = 93;
    public static readonly RULE_collectionCreateIndexesArgument2 = 94;
    public static readonly RULE_collectionCreateIndexesArgument1 = 95;
    public static readonly RULE_collectionCreateIndexMethod = 96;
    public static readonly RULE_collectionCreateIndexArgument2 = 97;
    public static readonly RULE_collectionCreateIndexArgument1 = 98;
    public static readonly RULE_collectionIsCappedMethod = 99;
    public static readonly RULE_collectionIsCappedArgument = 100;
    public static readonly RULE_collectionDropMethod = 101;
    public static readonly RULE_collectionDropArgument = 102;
    public static readonly RULE_collectionRenameMethod = 103;
    public static readonly RULE_collectionRenameArgument1 = 104;
    public static readonly RULE_collectionRenameArgument2 = 105;
    public static readonly RULE_collectionDeleteManyMethod = 106;
    public static readonly RULE_collectionDeleteManyArgument1 = 107;
    public static readonly RULE_collectionDeleteManyArgument2 = 108;
    public static readonly RULE_collectionDeleteOneMethod = 109;
    public static readonly RULE_collectionDeleteOneArgument1 = 110;
    public static readonly RULE_collectionDeleteOneArgument2 = 111;
    public static readonly RULE_collectionReplaceOneMethod = 112;
    public static readonly RULE_collectionReplaceOneArgument1 = 113;
    public static readonly RULE_collectionReplaceOneArgument2 = 114;
    public static readonly RULE_collectionReplaceOneArgument3 = 115;
    public static readonly RULE_collectionUpdateManyMethod = 116;
    public static readonly RULE_collectionUpdateManyArgument1 = 117;
    public static readonly RULE_collectionUpdateManyArgument2 = 118;
    public static readonly RULE_collectionUpdateManyArgument3 = 119;
    public static readonly RULE_collectionUpdateOneMethod = 120;
    public static readonly RULE_collectionUpdateOneArgument1 = 121;
    public static readonly RULE_collectionUpdateOneArgument2 = 122;
    public static readonly RULE_collectionUpdateOneArgument3 = 123;
    public static readonly RULE_collectionBulkWriteMethod = 124;
    public static readonly RULE_collectionBulkWriteArgument1 = 125;
    public static readonly RULE_collectionBulkWriteArgument2 = 126;
    public static readonly RULE_collectionInsertManyMethod = 127;
    public static readonly RULE_collectionInsertManyArgument1 = 128;
    public static readonly RULE_collectionInsertManyArgument2 = 129;
    public static readonly RULE_collectionInsertOneMethod = 130;
    public static readonly RULE_collectionInsertOneArgument1 = 131;
    public static readonly RULE_collectionInsertOneArgument2 = 132;
    public static readonly RULE_documentToInsert = 133;
    public static readonly RULE_collectionFindOneAndUpdateMethod = 134;
    public static readonly RULE_collectionFindOneAndUpdateArgument1 = 135;
    public static readonly RULE_collectionFindOneAndUpdateArgument2 = 136;
    public static readonly RULE_collectionFindOneAndUpdateArgument3 = 137;
    public static readonly RULE_collectionFindOneAndReplaceMethod = 138;
    public static readonly RULE_collectionFindOneAndReplaceArgument1 = 139;
    public static readonly RULE_collectionFindOneAndReplaceArgument2 = 140;
    public static readonly RULE_collectionFindOneAndReplaceArgument3 = 141;
    public static readonly RULE_collectionFindOneAndDeleteMethod = 142;
    public static readonly RULE_collectionFindOneAndDeleteArgument1 = 143;
    public static readonly RULE_collectionFindOneAndDeleteArgument2 = 144;
    public static readonly RULE_collectionFindOneMethod = 145;
    public static readonly RULE_collectionFindOneArgument1 = 146;
    public static readonly RULE_collectionFindOneArgument2 = 147;
    public static readonly RULE_collectionFindMethod = 148;
    public static readonly RULE_collectionFindMethodArgument1 = 149;
    public static readonly RULE_collectionFindMethodArgument2 = 150;
    public static readonly RULE_explainMethod = 151;
    public static readonly RULE_explainMethodArgument = 152;
    public static readonly RULE_collectionFindMethodModifier = 153;
    public static readonly RULE_skipModifier = 154;
    public static readonly RULE_skipModifierArgument = 155;
    public static readonly RULE_limitModifier = 156;
    public static readonly RULE_limitModifierArgument = 157;
    public static readonly RULE_filterModifier = 158;
    public static readonly RULE_filterModifierArgument = 159;
    public static readonly RULE_minModifier = 160;
    public static readonly RULE_minModifierArgument = 161;
    public static readonly RULE_maxModifier = 162;
    public static readonly RULE_maxModifierArgument = 163;
    public static readonly RULE_hintModifier = 164;
    public static readonly RULE_hintModifierArgument = 165;
    public static readonly RULE_returnKeyModifier = 166;
    public static readonly RULE_returnKeyModifierArgument = 167;
    public static readonly RULE_showRecordIdModifier = 168;
    public static readonly RULE_showRecordIdModifierArgument = 169;
    public static readonly RULE_sortModifier = 170;
    public static readonly RULE_sortModifierArgument1 = 171;
    public static readonly RULE_sortModifierArgument2 = 172;
    public static readonly RULE_reservedKeyword = 173;
    public static readonly RULE_object = 174;
    public static readonly RULE_pair = 175;
    public static readonly RULE_boolean = 176;
    public static readonly RULE_key = 177;
    public static readonly RULE_identifier = 178;
    public static readonly RULE_value = 179;
    public static readonly RULE_numberLongFunction = 180;
    public static readonly RULE_numberLongFunctionArgument1 = 181;
    public static readonly RULE_numberLongFunctionArgument2 = 182;
    public static readonly RULE_numberDecimalFunction = 183;
    public static readonly RULE_numberDecimalFunctionArgument = 184;
    public static readonly RULE_numberIntFunction = 185;
    public static readonly RULE_numberIntFunctionArgument = 186;
    public static readonly RULE_maxKeyFunction = 187;
    public static readonly RULE_minKeyFunction = 188;
    public static readonly RULE_uuidFunction = 189;
    public static readonly RULE_uuidFunctionArgument = 190;
    public static readonly RULE_objectIdFunction = 191;
    public static readonly RULE_objectIdFunctionArgument = 192;
    public static readonly RULE_dateFunction = 193;
    public static readonly RULE_dateFunctionArgument = 194;
    public static readonly RULE_string = 195;
    public static readonly RULE_null = 196;
    public static readonly RULE_array = 197;
    public static readonly RULE_number = 198;

    public static readonly literalNames = [
        null, "'db'", "'find'", "'findOne'", "'findOneAndDelete'", "'findOneAndReplace'", 
        "'findOneAndUpdate'", "'showRecordId'", "'returnKey'", "'filter'", 
        "'min'", "'max'", "'sort'", "'limit'", "'explain'", "'hint'", "'skip'", 
        "'insertOne'", "'insertMany'", "'bulkWrite'", "'updateOne'", "'updateMany'", 
        "'replaceOne'", "'deleteOne'", "'deleteMany'", "'rename'", "'drop'", 
        "'isCapped'", "'createIndex'", "'createIndexes'", "'dropIndex'", 
        "'dropIndexes'", "'listIndexes'", "'indexes'", "'indexExists'", 
        "'indexInformation'", "'estimatedDocumentCount'", "'countDocuments'", 
        "'distinct'", "'aggregate'", "'collection'", "'createCollection'", 
        "'command'", "'listCollections'", "'renameCollection'", "'dropCollection'", 
        "'dropDatabase'", "'removeUser'", "'runCursorCommand'", "'stats'", 
        "'profilingLevel'", "'setProfilingLevel'", "'admin'", "'buildInfo'", 
        "'serverInfo'", "'serverStatus'", "'ping'", "'validateCollection'", 
        "'listDatabases'", "'replSetGetStatus'", "'ObjectId'", "'Date'", 
        "'UUID'", "'MinKey'", "'MaxKey'", "'NumberDecimal'", "'NumberInt'", 
        "'NumberLong'", "'['", "']'", "'('", "')'", "'{'", "'}'", "':'", 
        "','", "';'", "'.'", "'true'", "'false'", "'null'"
    ];

    public static readonly symbolicNames = [
        null, "DB", "FIND", "FIND_ONE", "FIND_ONE_AND_DELETE", "FIND_ONE_AND_REPLACE", 
        "FIND_ONE_AND_UPDATE", "SHOW_RECORD_ID", "RETURN_KEY", "FILTER", 
        "MIN", "MAX", "SORT", "LIMIT", "EXPLAIN", "HINT", "SKIP_", "INSERT_ONE", 
        "INSERT_MANY", "BULK_WRITE", "UPDATE_ONE", "UPDATE_MANY", "REPLACE_ONE", 
        "DELETE_ONE", "DELETE_MANY", "RENAME", "DROP", "IS_CAPPED", "CREATE_INDEX", 
        "CREATE_INDEXES", "DROP_INDEX", "DROP_INDEXES", "LIST_INDEXES", 
        "INDEXES", "INDEX_EXISTS", "INDEX_INFORMATION", "ESTIMATED_DOCUMENT_COUNT", 
        "COUNT_DOCUMENTS", "DISTINCT", "AGGREGATE", "COLLECTION", "CREATE_COLLECTION", 
        "COMMAND", "LIST_COLLECTIONS", "RENAME_COLLECTION", "DROP_COLLECTION", 
        "DROP_DATABASE", "REMOVE_USER", "RUN_CURSOR_COMMAND", "STATS", "PROFILING_LEVEL", 
        "SET_PROFILING_LEVEL", "ADMIN", "BUILD_INFO", "SERVER_INFO", "SERVER_STATUS", 
        "PING", "VALIDATE_COLLECTION", "LIST_DATABASES", "REPL_SET_GET_STATUS", 
        "OBJECT_ID", "DATE", "UUID", "MIN_KEY", "MAX_KEY", "NUMBER_DECIMAL", 
        "NUMBER_INT", "NUMBER_LONG", "LBRACKET", "RBRACKET", "LPAREN", "RPAREN", 
        "LBRACE", "RBRACE", "COLON", "COMMA", "SEMICOLON", "DOT", "TRUE", 
        "FALSE", "NULL", "STRING", "NUMBER", "NUMERIC_LITERAL", "SYMBOL", 
        "IDENTIFIER", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "WS"
    ];
    public static readonly ruleNames = [
        "root", "commands", "command", "databaseOperation", "databaseMethod", 
        "databaseAdminMethod", "adminMethod", "validateCollectionMethod", 
        "validateCollectionArgument1", "validateCollectionArgument2", "serverStatusMethod", 
        "serverStatusArgument", "pingMethod", "pingArgument", "listDatabasesMethod", 
        "listDatabasesArgument", "replSetGetStatusMethod", "replSetGetStatusArgument", 
        "serverInfoMethod", "serverInfoArgument", "buildInfoMethod", "buildInfoArgument", 
        "databaseSetProfilingLevelMethod", "databaseSetProfilingLevelArgument1", 
        "databaseSetProfilingLevelArgument2", "databaseProfilingLevelMethod", 
        "databaseProfilingLevelArgument", "databaseStatsMethod", "databaseStatsArgument", 
        "databaseRunCursorCommandMethod", "databaseRunCursorCommandArgument1", 
        "databaseRunCursorCommandArgument2", "databaseIndexInformationMethod", 
        "databaseIndexInformationArgument1", "databaseIndexInformationArgument2", 
        "databaseRemoveUserMethod", "databaseRemoveUserArgument1", "quotedUsername", 
        "databaseRemoveUserArgument2", "databaseCreateIndexMethod", "databaseCreateIndexArgument3", 
        "databaseCreateIndexArgument2", "databaseCreateIndexArgument1", 
        "databaseDropDatabaseMethod", "databaseDropDatabaseArgument", "databaseDropCollectionMethod", 
        "databaseDropCollectionArgument1", "databaseDropCollectionArgument2", 
        "databaseRenameCollectionMethod", "databaseRenameCollectionArgument1", 
        "databaseRenameCollectionArgument2", "databaseRenameCollectionArgument3", 
        "databaseListCollectionsMethod", "databaseListCollectionsArgument1", 
        "databaseListCollectionsArgument2", "databaseCommandMethod", "databaseCommandArgument1", 
        "databaseCommandArgument2", "databaseCreateCollectionMethod", "databaseCreateCollectionArgument1", 
        "databaseCreateCollectionArgument2", "databaseCollectionMethod", 
        "quotedCollectionName", "collectionOperation", "collectionName", 
        "collectionMethod", "aggregateMethod", "aggregateArgument2", "aggregateArgument1", 
        "collectionDistinctMethod", "collectionDistinctArgument1", "collectionDistinctArgument2", 
        "collectionDistinctArgument3", "collectionCountDocumentsMethod", 
        "collectionCountDocumentsArgument2", "collectionCountDocumentsArgument1", 
        "collectionEstimatedDocumentCountMethod", "collectionEstimatedDocumentCountArgument", 
        "collectionIndexInformationMethod", "collectionIndexInformationArgument", 
        "collectionIndexExistsMethod", "collectionIndexExistsArgument2", 
        "collectionIndexExistsArgument1", "indexName", "collectionIndexesMethod", 
        "collectionIndexesArgument", "collectionListIndexesMethod", "collectionListIndexesArgument", 
        "collectionDropIndexesMethod", "collectionDropIndexesArgument", 
        "collectionDropIndexMethod", "collectionDropIndexArgument2", "collectionDropIndexArgument1", 
        "collectionCreateIndexesMethod", "collectionCreateIndexesArgument2", 
        "collectionCreateIndexesArgument1", "collectionCreateIndexMethod", 
        "collectionCreateIndexArgument2", "collectionCreateIndexArgument1", 
        "collectionIsCappedMethod", "collectionIsCappedArgument", "collectionDropMethod", 
        "collectionDropArgument", "collectionRenameMethod", "collectionRenameArgument1", 
        "collectionRenameArgument2", "collectionDeleteManyMethod", "collectionDeleteManyArgument1", 
        "collectionDeleteManyArgument2", "collectionDeleteOneMethod", "collectionDeleteOneArgument1", 
        "collectionDeleteOneArgument2", "collectionReplaceOneMethod", "collectionReplaceOneArgument1", 
        "collectionReplaceOneArgument2", "collectionReplaceOneArgument3", 
        "collectionUpdateManyMethod", "collectionUpdateManyArgument1", "collectionUpdateManyArgument2", 
        "collectionUpdateManyArgument3", "collectionUpdateOneMethod", "collectionUpdateOneArgument1", 
        "collectionUpdateOneArgument2", "collectionUpdateOneArgument3", 
        "collectionBulkWriteMethod", "collectionBulkWriteArgument1", "collectionBulkWriteArgument2", 
        "collectionInsertManyMethod", "collectionInsertManyArgument1", "collectionInsertManyArgument2", 
        "collectionInsertOneMethod", "collectionInsertOneArgument1", "collectionInsertOneArgument2", 
        "documentToInsert", "collectionFindOneAndUpdateMethod", "collectionFindOneAndUpdateArgument1", 
        "collectionFindOneAndUpdateArgument2", "collectionFindOneAndUpdateArgument3", 
        "collectionFindOneAndReplaceMethod", "collectionFindOneAndReplaceArgument1", 
        "collectionFindOneAndReplaceArgument2", "collectionFindOneAndReplaceArgument3", 
        "collectionFindOneAndDeleteMethod", "collectionFindOneAndDeleteArgument1", 
        "collectionFindOneAndDeleteArgument2", "collectionFindOneMethod", 
        "collectionFindOneArgument1", "collectionFindOneArgument2", "collectionFindMethod", 
        "collectionFindMethodArgument1", "collectionFindMethodArgument2", 
        "explainMethod", "explainMethodArgument", "collectionFindMethodModifier", 
        "skipModifier", "skipModifierArgument", "limitModifier", "limitModifierArgument", 
        "filterModifier", "filterModifierArgument", "minModifier", "minModifierArgument", 
        "maxModifier", "maxModifierArgument", "hintModifier", "hintModifierArgument", 
        "returnKeyModifier", "returnKeyModifierArgument", "showRecordIdModifier", 
        "showRecordIdModifierArgument", "sortModifier", "sortModifierArgument1", 
        "sortModifierArgument2", "reservedKeyword", "object", "pair", "boolean", 
        "key", "identifier", "value", "numberLongFunction", "numberLongFunctionArgument1", 
        "numberLongFunctionArgument2", "numberDecimalFunction", "numberDecimalFunctionArgument", 
        "numberIntFunction", "numberIntFunctionArgument", "maxKeyFunction", 
        "minKeyFunction", "uuidFunction", "uuidFunctionArgument", "objectIdFunction", 
        "objectIdFunctionArgument", "dateFunction", "dateFunctionArgument", 
        "string", "null", "array", "number",
    ];

    public get grammarFileName(): string { return "MongoParser.g4"; }
    public get literalNames(): (string | null)[] { return MongoParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return MongoParser.symbolicNames; }
    public get ruleNames(): string[] { return MongoParser.ruleNames; }
    public get serializedATN(): number[] { return MongoParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, MongoParser._ATN, MongoParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public root(): RootContext {
        let localContext = new RootContext(this.context, this.state);
        this.enterRule(localContext, 0, MongoParser.RULE_root);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 399;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1) {
                {
                this.state = 398;
                this.commands();
                }
            }

            this.state = 401;
            this.match(MongoParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commands(): CommandsContext {
        let localContext = new CommandsContext(this.context, this.state);
        this.enterRule(localContext, 2, MongoParser.RULE_commands);
        let _la: number;
        try {
            this.state = 411;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 403;
                this.command();
                this.state = 405;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 76) {
                    {
                    this.state = 404;
                    this.match(MongoParser.SEMICOLON);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 407;
                this.command();
                this.state = 408;
                this.match(MongoParser.SEMICOLON);
                this.state = 409;
                this.commands();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public command(): CommandContext {
        let localContext = new CommandContext(this.context, this.state);
        this.enterRule(localContext, 4, MongoParser.RULE_command);
        try {
            this.state = 415;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 413;
                this.collectionOperation();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 414;
                this.databaseOperation();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseOperation(): DatabaseOperationContext {
        let localContext = new DatabaseOperationContext(this.context, this.state);
        this.enterRule(localContext, 6, MongoParser.RULE_databaseOperation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 417;
            this.match(MongoParser.DB);
            this.state = 418;
            this.match(MongoParser.DOT);
            this.state = 419;
            this.databaseMethod();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseMethod(): DatabaseMethodContext {
        let localContext = new DatabaseMethodContext(this.context, this.state);
        this.enterRule(localContext, 8, MongoParser.RULE_databaseMethod);
        try {
            this.state = 437;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.COLLECTION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 421;
                this.databaseCollectionMethod();
                }
                break;
            case MongoParser.CREATE_COLLECTION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 422;
                this.databaseCreateCollectionMethod();
                }
                break;
            case MongoParser.COMMAND:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 423;
                this.databaseCommandMethod();
                }
                break;
            case MongoParser.AGGREGATE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 424;
                this.aggregateMethod();
                }
                break;
            case MongoParser.LIST_COLLECTIONS:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 425;
                this.databaseListCollectionsMethod();
                }
                break;
            case MongoParser.RENAME_COLLECTION:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 426;
                this.databaseRenameCollectionMethod();
                }
                break;
            case MongoParser.DROP_COLLECTION:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 427;
                this.databaseDropCollectionMethod();
                }
                break;
            case MongoParser.DROP_DATABASE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 428;
                this.databaseDropDatabaseMethod();
                }
                break;
            case MongoParser.CREATE_INDEX:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 429;
                this.databaseCreateIndexMethod();
                }
                break;
            case MongoParser.REMOVE_USER:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 430;
                this.databaseRemoveUserMethod();
                }
                break;
            case MongoParser.INDEX_INFORMATION:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 431;
                this.databaseIndexInformationMethod();
                }
                break;
            case MongoParser.RUN_CURSOR_COMMAND:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 432;
                this.databaseRunCursorCommandMethod();
                }
                break;
            case MongoParser.STATS:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 433;
                this.databaseStatsMethod();
                }
                break;
            case MongoParser.PROFILING_LEVEL:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 434;
                this.databaseProfilingLevelMethod();
                }
                break;
            case MongoParser.SET_PROFILING_LEVEL:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 435;
                this.databaseSetProfilingLevelMethod();
                }
                break;
            case MongoParser.ADMIN:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 436;
                this.databaseAdminMethod();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseAdminMethod(): DatabaseAdminMethodContext {
        let localContext = new DatabaseAdminMethodContext(this.context, this.state);
        this.enterRule(localContext, 10, MongoParser.RULE_databaseAdminMethod);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 439;
            this.match(MongoParser.ADMIN);
            this.state = 440;
            this.match(MongoParser.LPAREN);
            this.state = 441;
            this.match(MongoParser.RPAREN);
            this.state = 442;
            this.match(MongoParser.DOT);
            this.state = 443;
            this.adminMethod();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public adminMethod(): AdminMethodContext {
        let localContext = new AdminMethodContext(this.context, this.state);
        this.enterRule(localContext, 12, MongoParser.RULE_adminMethod);
        try {
            this.state = 454;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.COMMAND:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 445;
                this.databaseCommandMethod();
                }
                break;
            case MongoParser.REMOVE_USER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 446;
                this.databaseRemoveUserMethod();
                }
                break;
            case MongoParser.BUILD_INFO:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 447;
                this.buildInfoMethod();
                }
                break;
            case MongoParser.SERVER_INFO:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 448;
                this.serverInfoMethod();
                }
                break;
            case MongoParser.SERVER_STATUS:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 449;
                this.serverStatusMethod();
                }
                break;
            case MongoParser.PING:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 450;
                this.pingMethod();
                }
                break;
            case MongoParser.LIST_DATABASES:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 451;
                this.listDatabasesMethod();
                }
                break;
            case MongoParser.REPL_SET_GET_STATUS:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 452;
                this.replSetGetStatusMethod();
                }
                break;
            case MongoParser.VALIDATE_COLLECTION:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 453;
                this.validateCollectionMethod();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public validateCollectionMethod(): ValidateCollectionMethodContext {
        let localContext = new ValidateCollectionMethodContext(this.context, this.state);
        this.enterRule(localContext, 14, MongoParser.RULE_validateCollectionMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 456;
            this.match(MongoParser.VALIDATE_COLLECTION);
            this.state = 457;
            this.match(MongoParser.LPAREN);
            this.state = 458;
            this.validateCollectionArgument1();
            this.state = 461;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 459;
                this.match(MongoParser.COMMA);
                this.state = 460;
                this.validateCollectionArgument2();
                }
            }

            this.state = 463;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public validateCollectionArgument1(): ValidateCollectionArgument1Context {
        let localContext = new ValidateCollectionArgument1Context(this.context, this.state);
        this.enterRule(localContext, 16, MongoParser.RULE_validateCollectionArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 465;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public validateCollectionArgument2(): ValidateCollectionArgument2Context {
        let localContext = new ValidateCollectionArgument2Context(this.context, this.state);
        this.enterRule(localContext, 18, MongoParser.RULE_validateCollectionArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 467;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public serverStatusMethod(): ServerStatusMethodContext {
        let localContext = new ServerStatusMethodContext(this.context, this.state);
        this.enterRule(localContext, 20, MongoParser.RULE_serverStatusMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 469;
            this.match(MongoParser.SERVER_STATUS);
            this.state = 470;
            this.match(MongoParser.LPAREN);
            this.state = 472;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 471;
                this.serverStatusArgument();
                }
            }

            this.state = 474;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public serverStatusArgument(): ServerStatusArgumentContext {
        let localContext = new ServerStatusArgumentContext(this.context, this.state);
        this.enterRule(localContext, 22, MongoParser.RULE_serverStatusArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 476;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pingMethod(): PingMethodContext {
        let localContext = new PingMethodContext(this.context, this.state);
        this.enterRule(localContext, 24, MongoParser.RULE_pingMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 478;
            this.match(MongoParser.PING);
            this.state = 479;
            this.match(MongoParser.LPAREN);
            this.state = 481;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 480;
                this.pingArgument();
                }
            }

            this.state = 483;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pingArgument(): PingArgumentContext {
        let localContext = new PingArgumentContext(this.context, this.state);
        this.enterRule(localContext, 26, MongoParser.RULE_pingArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 485;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listDatabasesMethod(): ListDatabasesMethodContext {
        let localContext = new ListDatabasesMethodContext(this.context, this.state);
        this.enterRule(localContext, 28, MongoParser.RULE_listDatabasesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 487;
            this.match(MongoParser.LIST_DATABASES);
            this.state = 488;
            this.match(MongoParser.LPAREN);
            this.state = 490;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 489;
                this.listDatabasesArgument();
                }
            }

            this.state = 492;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listDatabasesArgument(): ListDatabasesArgumentContext {
        let localContext = new ListDatabasesArgumentContext(this.context, this.state);
        this.enterRule(localContext, 30, MongoParser.RULE_listDatabasesArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 494;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replSetGetStatusMethod(): ReplSetGetStatusMethodContext {
        let localContext = new ReplSetGetStatusMethodContext(this.context, this.state);
        this.enterRule(localContext, 32, MongoParser.RULE_replSetGetStatusMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 496;
            this.match(MongoParser.REPL_SET_GET_STATUS);
            this.state = 497;
            this.match(MongoParser.LPAREN);
            this.state = 499;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 498;
                this.replSetGetStatusArgument();
                }
            }

            this.state = 501;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replSetGetStatusArgument(): ReplSetGetStatusArgumentContext {
        let localContext = new ReplSetGetStatusArgumentContext(this.context, this.state);
        this.enterRule(localContext, 34, MongoParser.RULE_replSetGetStatusArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 503;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public serverInfoMethod(): ServerInfoMethodContext {
        let localContext = new ServerInfoMethodContext(this.context, this.state);
        this.enterRule(localContext, 36, MongoParser.RULE_serverInfoMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 505;
            this.match(MongoParser.SERVER_INFO);
            this.state = 506;
            this.match(MongoParser.LPAREN);
            this.state = 508;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 507;
                this.serverInfoArgument();
                }
            }

            this.state = 510;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public serverInfoArgument(): ServerInfoArgumentContext {
        let localContext = new ServerInfoArgumentContext(this.context, this.state);
        this.enterRule(localContext, 38, MongoParser.RULE_serverInfoArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 512;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public buildInfoMethod(): BuildInfoMethodContext {
        let localContext = new BuildInfoMethodContext(this.context, this.state);
        this.enterRule(localContext, 40, MongoParser.RULE_buildInfoMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 514;
            this.match(MongoParser.BUILD_INFO);
            this.state = 515;
            this.match(MongoParser.LPAREN);
            this.state = 517;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 516;
                this.buildInfoArgument();
                }
            }

            this.state = 519;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public buildInfoArgument(): BuildInfoArgumentContext {
        let localContext = new BuildInfoArgumentContext(this.context, this.state);
        this.enterRule(localContext, 42, MongoParser.RULE_buildInfoArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 521;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseSetProfilingLevelMethod(): DatabaseSetProfilingLevelMethodContext {
        let localContext = new DatabaseSetProfilingLevelMethodContext(this.context, this.state);
        this.enterRule(localContext, 44, MongoParser.RULE_databaseSetProfilingLevelMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 523;
            this.match(MongoParser.SET_PROFILING_LEVEL);
            this.state = 524;
            this.match(MongoParser.LPAREN);
            this.state = 525;
            this.databaseSetProfilingLevelArgument1();
            this.state = 528;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 526;
                this.match(MongoParser.COMMA);
                this.state = 527;
                this.databaseSetProfilingLevelArgument2();
                }
            }

            this.state = 530;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseSetProfilingLevelArgument1(): DatabaseSetProfilingLevelArgument1Context {
        let localContext = new DatabaseSetProfilingLevelArgument1Context(this.context, this.state);
        this.enterRule(localContext, 46, MongoParser.RULE_databaseSetProfilingLevelArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 532;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseSetProfilingLevelArgument2(): DatabaseSetProfilingLevelArgument2Context {
        let localContext = new DatabaseSetProfilingLevelArgument2Context(this.context, this.state);
        this.enterRule(localContext, 48, MongoParser.RULE_databaseSetProfilingLevelArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 534;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseProfilingLevelMethod(): DatabaseProfilingLevelMethodContext {
        let localContext = new DatabaseProfilingLevelMethodContext(this.context, this.state);
        this.enterRule(localContext, 50, MongoParser.RULE_databaseProfilingLevelMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 536;
            this.match(MongoParser.PROFILING_LEVEL);
            this.state = 537;
            this.match(MongoParser.LPAREN);
            this.state = 539;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 538;
                this.databaseProfilingLevelArgument();
                }
            }

            this.state = 541;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseProfilingLevelArgument(): DatabaseProfilingLevelArgumentContext {
        let localContext = new DatabaseProfilingLevelArgumentContext(this.context, this.state);
        this.enterRule(localContext, 52, MongoParser.RULE_databaseProfilingLevelArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 543;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseStatsMethod(): DatabaseStatsMethodContext {
        let localContext = new DatabaseStatsMethodContext(this.context, this.state);
        this.enterRule(localContext, 54, MongoParser.RULE_databaseStatsMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 545;
            this.match(MongoParser.STATS);
            this.state = 546;
            this.match(MongoParser.LPAREN);
            this.state = 548;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 547;
                this.databaseStatsArgument();
                }
            }

            this.state = 550;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseStatsArgument(): DatabaseStatsArgumentContext {
        let localContext = new DatabaseStatsArgumentContext(this.context, this.state);
        this.enterRule(localContext, 56, MongoParser.RULE_databaseStatsArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 552;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRunCursorCommandMethod(): DatabaseRunCursorCommandMethodContext {
        let localContext = new DatabaseRunCursorCommandMethodContext(this.context, this.state);
        this.enterRule(localContext, 58, MongoParser.RULE_databaseRunCursorCommandMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 554;
            this.match(MongoParser.RUN_CURSOR_COMMAND);
            this.state = 555;
            this.match(MongoParser.LPAREN);
            this.state = 556;
            this.databaseRunCursorCommandArgument1();
            this.state = 559;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 557;
                this.match(MongoParser.COMMA);
                this.state = 558;
                this.databaseRunCursorCommandArgument2();
                }
            }

            this.state = 561;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRunCursorCommandArgument1(): DatabaseRunCursorCommandArgument1Context {
        let localContext = new DatabaseRunCursorCommandArgument1Context(this.context, this.state);
        this.enterRule(localContext, 60, MongoParser.RULE_databaseRunCursorCommandArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 563;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRunCursorCommandArgument2(): DatabaseRunCursorCommandArgument2Context {
        let localContext = new DatabaseRunCursorCommandArgument2Context(this.context, this.state);
        this.enterRule(localContext, 62, MongoParser.RULE_databaseRunCursorCommandArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 565;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseIndexInformationMethod(): DatabaseIndexInformationMethodContext {
        let localContext = new DatabaseIndexInformationMethodContext(this.context, this.state);
        this.enterRule(localContext, 64, MongoParser.RULE_databaseIndexInformationMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 567;
            this.match(MongoParser.INDEX_INFORMATION);
            this.state = 568;
            this.match(MongoParser.LPAREN);
            this.state = 569;
            this.databaseIndexInformationArgument1();
            this.state = 572;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 570;
                this.match(MongoParser.COMMA);
                this.state = 571;
                this.databaseIndexInformationArgument2();
                }
            }

            this.state = 574;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseIndexInformationArgument1(): DatabaseIndexInformationArgument1Context {
        let localContext = new DatabaseIndexInformationArgument1Context(this.context, this.state);
        this.enterRule(localContext, 66, MongoParser.RULE_databaseIndexInformationArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 576;
            this.quotedCollectionName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseIndexInformationArgument2(): DatabaseIndexInformationArgument2Context {
        let localContext = new DatabaseIndexInformationArgument2Context(this.context, this.state);
        this.enterRule(localContext, 68, MongoParser.RULE_databaseIndexInformationArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 578;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRemoveUserMethod(): DatabaseRemoveUserMethodContext {
        let localContext = new DatabaseRemoveUserMethodContext(this.context, this.state);
        this.enterRule(localContext, 70, MongoParser.RULE_databaseRemoveUserMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 580;
            this.match(MongoParser.REMOVE_USER);
            this.state = 581;
            this.match(MongoParser.LPAREN);
            this.state = 582;
            this.databaseRemoveUserArgument1();
            this.state = 585;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 583;
                this.match(MongoParser.COMMA);
                this.state = 584;
                this.databaseRemoveUserArgument2();
                }
            }

            this.state = 587;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRemoveUserArgument1(): DatabaseRemoveUserArgument1Context {
        let localContext = new DatabaseRemoveUserArgument1Context(this.context, this.state);
        this.enterRule(localContext, 72, MongoParser.RULE_databaseRemoveUserArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 589;
            this.quotedUsername();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotedUsername(): QuotedUsernameContext {
        let localContext = new QuotedUsernameContext(this.context, this.state);
        this.enterRule(localContext, 74, MongoParser.RULE_quotedUsername);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 591;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRemoveUserArgument2(): DatabaseRemoveUserArgument2Context {
        let localContext = new DatabaseRemoveUserArgument2Context(this.context, this.state);
        this.enterRule(localContext, 76, MongoParser.RULE_databaseRemoveUserArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 593;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateIndexMethod(): DatabaseCreateIndexMethodContext {
        let localContext = new DatabaseCreateIndexMethodContext(this.context, this.state);
        this.enterRule(localContext, 78, MongoParser.RULE_databaseCreateIndexMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 595;
            this.match(MongoParser.CREATE_INDEX);
            this.state = 596;
            this.match(MongoParser.LPAREN);
            this.state = 597;
            this.databaseCreateIndexArgument1();
            this.state = 598;
            this.match(MongoParser.COMMA);
            this.state = 599;
            this.databaseCreateIndexArgument2();
            this.state = 602;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 600;
                this.match(MongoParser.COMMA);
                this.state = 601;
                this.databaseCreateIndexArgument3();
                }
            }

            this.state = 604;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateIndexArgument3(): DatabaseCreateIndexArgument3Context {
        let localContext = new DatabaseCreateIndexArgument3Context(this.context, this.state);
        this.enterRule(localContext, 80, MongoParser.RULE_databaseCreateIndexArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 606;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateIndexArgument2(): DatabaseCreateIndexArgument2Context {
        let localContext = new DatabaseCreateIndexArgument2Context(this.context, this.state);
        this.enterRule(localContext, 82, MongoParser.RULE_databaseCreateIndexArgument2);
        try {
            this.state = 611;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 608;
                this.string_();
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 609;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 610;
                this.array();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateIndexArgument1(): DatabaseCreateIndexArgument1Context {
        let localContext = new DatabaseCreateIndexArgument1Context(this.context, this.state);
        this.enterRule(localContext, 84, MongoParser.RULE_databaseCreateIndexArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 613;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseDropDatabaseMethod(): DatabaseDropDatabaseMethodContext {
        let localContext = new DatabaseDropDatabaseMethodContext(this.context, this.state);
        this.enterRule(localContext, 86, MongoParser.RULE_databaseDropDatabaseMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 615;
            this.match(MongoParser.DROP_DATABASE);
            this.state = 616;
            this.match(MongoParser.LPAREN);
            this.state = 618;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 617;
                this.databaseDropDatabaseArgument();
                }
            }

            this.state = 620;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseDropDatabaseArgument(): DatabaseDropDatabaseArgumentContext {
        let localContext = new DatabaseDropDatabaseArgumentContext(this.context, this.state);
        this.enterRule(localContext, 88, MongoParser.RULE_databaseDropDatabaseArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 622;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseDropCollectionMethod(): DatabaseDropCollectionMethodContext {
        let localContext = new DatabaseDropCollectionMethodContext(this.context, this.state);
        this.enterRule(localContext, 90, MongoParser.RULE_databaseDropCollectionMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 624;
            this.match(MongoParser.DROP_COLLECTION);
            this.state = 625;
            this.match(MongoParser.LPAREN);
            this.state = 626;
            this.databaseDropCollectionArgument1();
            this.state = 629;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 627;
                this.match(MongoParser.COMMA);
                this.state = 628;
                this.databaseDropCollectionArgument2();
                }
            }

            this.state = 631;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseDropCollectionArgument1(): DatabaseDropCollectionArgument1Context {
        let localContext = new DatabaseDropCollectionArgument1Context(this.context, this.state);
        this.enterRule(localContext, 92, MongoParser.RULE_databaseDropCollectionArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 633;
            this.quotedCollectionName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseDropCollectionArgument2(): DatabaseDropCollectionArgument2Context {
        let localContext = new DatabaseDropCollectionArgument2Context(this.context, this.state);
        this.enterRule(localContext, 94, MongoParser.RULE_databaseDropCollectionArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 635;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRenameCollectionMethod(): DatabaseRenameCollectionMethodContext {
        let localContext = new DatabaseRenameCollectionMethodContext(this.context, this.state);
        this.enterRule(localContext, 96, MongoParser.RULE_databaseRenameCollectionMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 637;
            this.match(MongoParser.RENAME_COLLECTION);
            this.state = 638;
            this.match(MongoParser.LPAREN);
            this.state = 639;
            this.databaseRenameCollectionArgument1();
            this.state = 640;
            this.match(MongoParser.COMMA);
            this.state = 641;
            this.databaseRenameCollectionArgument2();
            this.state = 644;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 642;
                this.match(MongoParser.COMMA);
                this.state = 643;
                this.databaseRenameCollectionArgument3();
                }
            }

            this.state = 646;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRenameCollectionArgument1(): DatabaseRenameCollectionArgument1Context {
        let localContext = new DatabaseRenameCollectionArgument1Context(this.context, this.state);
        this.enterRule(localContext, 98, MongoParser.RULE_databaseRenameCollectionArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 648;
            this.quotedCollectionName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRenameCollectionArgument2(): DatabaseRenameCollectionArgument2Context {
        let localContext = new DatabaseRenameCollectionArgument2Context(this.context, this.state);
        this.enterRule(localContext, 100, MongoParser.RULE_databaseRenameCollectionArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 650;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseRenameCollectionArgument3(): DatabaseRenameCollectionArgument3Context {
        let localContext = new DatabaseRenameCollectionArgument3Context(this.context, this.state);
        this.enterRule(localContext, 102, MongoParser.RULE_databaseRenameCollectionArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 652;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseListCollectionsMethod(): DatabaseListCollectionsMethodContext {
        let localContext = new DatabaseListCollectionsMethodContext(this.context, this.state);
        this.enterRule(localContext, 104, MongoParser.RULE_databaseListCollectionsMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 654;
            this.match(MongoParser.LIST_COLLECTIONS);
            this.state = 655;
            this.match(MongoParser.LPAREN);
            this.state = 661;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 656;
                this.databaseListCollectionsArgument1();
                this.state = 659;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75) {
                    {
                    this.state = 657;
                    this.match(MongoParser.COMMA);
                    this.state = 658;
                    this.databaseListCollectionsArgument2();
                    }
                }

                }
            }

            this.state = 663;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseListCollectionsArgument1(): DatabaseListCollectionsArgument1Context {
        let localContext = new DatabaseListCollectionsArgument1Context(this.context, this.state);
        this.enterRule(localContext, 106, MongoParser.RULE_databaseListCollectionsArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 665;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseListCollectionsArgument2(): DatabaseListCollectionsArgument2Context {
        let localContext = new DatabaseListCollectionsArgument2Context(this.context, this.state);
        this.enterRule(localContext, 108, MongoParser.RULE_databaseListCollectionsArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 667;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCommandMethod(): DatabaseCommandMethodContext {
        let localContext = new DatabaseCommandMethodContext(this.context, this.state);
        this.enterRule(localContext, 110, MongoParser.RULE_databaseCommandMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 669;
            this.match(MongoParser.COMMAND);
            this.state = 670;
            this.match(MongoParser.LPAREN);
            this.state = 671;
            this.databaseCommandArgument1();
            this.state = 674;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 672;
                this.match(MongoParser.COMMA);
                this.state = 673;
                this.databaseCommandArgument2();
                }
            }

            this.state = 676;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCommandArgument1(): DatabaseCommandArgument1Context {
        let localContext = new DatabaseCommandArgument1Context(this.context, this.state);
        this.enterRule(localContext, 112, MongoParser.RULE_databaseCommandArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 678;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCommandArgument2(): DatabaseCommandArgument2Context {
        let localContext = new DatabaseCommandArgument2Context(this.context, this.state);
        this.enterRule(localContext, 114, MongoParser.RULE_databaseCommandArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 680;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateCollectionMethod(): DatabaseCreateCollectionMethodContext {
        let localContext = new DatabaseCreateCollectionMethodContext(this.context, this.state);
        this.enterRule(localContext, 116, MongoParser.RULE_databaseCreateCollectionMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 682;
            this.match(MongoParser.CREATE_COLLECTION);
            this.state = 683;
            this.match(MongoParser.LPAREN);
            this.state = 684;
            this.databaseCreateCollectionArgument1();
            this.state = 687;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 685;
                this.match(MongoParser.COMMA);
                this.state = 686;
                this.databaseCreateCollectionArgument2();
                }
            }

            this.state = 689;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateCollectionArgument1(): DatabaseCreateCollectionArgument1Context {
        let localContext = new DatabaseCreateCollectionArgument1Context(this.context, this.state);
        this.enterRule(localContext, 118, MongoParser.RULE_databaseCreateCollectionArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 691;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCreateCollectionArgument2(): DatabaseCreateCollectionArgument2Context {
        let localContext = new DatabaseCreateCollectionArgument2Context(this.context, this.state);
        this.enterRule(localContext, 120, MongoParser.RULE_databaseCreateCollectionArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 693;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseCollectionMethod(): DatabaseCollectionMethodContext {
        let localContext = new DatabaseCollectionMethodContext(this.context, this.state);
        this.enterRule(localContext, 122, MongoParser.RULE_databaseCollectionMethod);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 695;
            this.match(MongoParser.COLLECTION);
            this.state = 696;
            this.match(MongoParser.LPAREN);
            this.state = 697;
            this.quotedCollectionName();
            this.state = 698;
            this.match(MongoParser.RPAREN);
            this.state = 699;
            this.match(MongoParser.DOT);
            this.state = 700;
            this.collectionMethod();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotedCollectionName(): QuotedCollectionNameContext {
        let localContext = new QuotedCollectionNameContext(this.context, this.state);
        this.enterRule(localContext, 124, MongoParser.RULE_quotedCollectionName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 702;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionOperation(): CollectionOperationContext {
        let localContext = new CollectionOperationContext(this.context, this.state);
        this.enterRule(localContext, 126, MongoParser.RULE_collectionOperation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 704;
            this.match(MongoParser.DB);
            this.state = 705;
            this.match(MongoParser.DOT);
            this.state = 706;
            this.collectionName();
            this.state = 707;
            this.match(MongoParser.DOT);
            this.state = 708;
            this.collectionMethod();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionName(): CollectionNameContext {
        let localContext = new CollectionNameContext(this.context, this.state);
        this.enterRule(localContext, 128, MongoParser.RULE_collectionName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 710;
            this.match(MongoParser.IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionMethod(): CollectionMethodContext {
        let localContext = new CollectionMethodContext(this.context, this.state);
        this.enterRule(localContext, 130, MongoParser.RULE_collectionMethod);
        try {
            this.state = 740;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.FIND:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 712;
                this.collectionFindMethod();
                }
                break;
            case MongoParser.FIND_ONE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 713;
                this.collectionFindOneMethod();
                }
                break;
            case MongoParser.FIND_ONE_AND_DELETE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 714;
                this.collectionFindOneAndDeleteMethod();
                }
                break;
            case MongoParser.FIND_ONE_AND_REPLACE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 715;
                this.collectionFindOneAndReplaceMethod();
                }
                break;
            case MongoParser.FIND_ONE_AND_UPDATE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 716;
                this.collectionFindOneAndUpdateMethod();
                }
                break;
            case MongoParser.INSERT_ONE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 717;
                this.collectionInsertOneMethod();
                }
                break;
            case MongoParser.INSERT_MANY:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 718;
                this.collectionInsertManyMethod();
                }
                break;
            case MongoParser.BULK_WRITE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 719;
                this.collectionBulkWriteMethod();
                }
                break;
            case MongoParser.UPDATE_ONE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 720;
                this.collectionUpdateOneMethod();
                }
                break;
            case MongoParser.UPDATE_MANY:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 721;
                this.collectionUpdateManyMethod();
                }
                break;
            case MongoParser.REPLACE_ONE:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 722;
                this.collectionReplaceOneMethod();
                }
                break;
            case MongoParser.DELETE_ONE:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 723;
                this.collectionDeleteOneMethod();
                }
                break;
            case MongoParser.DELETE_MANY:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 724;
                this.collectionDeleteManyMethod();
                }
                break;
            case MongoParser.RENAME:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 725;
                this.collectionRenameMethod();
                }
                break;
            case MongoParser.DROP:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 726;
                this.collectionDropMethod();
                }
                break;
            case MongoParser.IS_CAPPED:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 727;
                this.collectionIsCappedMethod();
                }
                break;
            case MongoParser.CREATE_INDEX:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 728;
                this.collectionCreateIndexMethod();
                }
                break;
            case MongoParser.CREATE_INDEXES:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 729;
                this.collectionCreateIndexesMethod();
                }
                break;
            case MongoParser.DROP_INDEX:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 730;
                this.collectionDropIndexMethod();
                }
                break;
            case MongoParser.DROP_INDEXES:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 731;
                this.collectionDropIndexesMethod();
                }
                break;
            case MongoParser.LIST_INDEXES:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 732;
                this.collectionListIndexesMethod();
                }
                break;
            case MongoParser.INDEXES:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 733;
                this.collectionIndexesMethod();
                }
                break;
            case MongoParser.INDEX_EXISTS:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 734;
                this.collectionIndexExistsMethod();
                }
                break;
            case MongoParser.INDEX_INFORMATION:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 735;
                this.collectionIndexInformationMethod();
                }
                break;
            case MongoParser.ESTIMATED_DOCUMENT_COUNT:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 736;
                this.collectionEstimatedDocumentCountMethod();
                }
                break;
            case MongoParser.COUNT_DOCUMENTS:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 737;
                this.collectionCountDocumentsMethod();
                }
                break;
            case MongoParser.DISTINCT:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 738;
                this.collectionDistinctMethod();
                }
                break;
            case MongoParser.AGGREGATE:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 739;
                this.aggregateMethod();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregateMethod(): AggregateMethodContext {
        let localContext = new AggregateMethodContext(this.context, this.state);
        this.enterRule(localContext, 132, MongoParser.RULE_aggregateMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 742;
            this.match(MongoParser.AGGREGATE);
            this.state = 743;
            this.match(MongoParser.LPAREN);
            this.state = 749;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 68) {
                {
                this.state = 744;
                this.aggregateArgument1();
                this.state = 747;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75) {
                    {
                    this.state = 745;
                    this.match(MongoParser.COMMA);
                    this.state = 746;
                    this.aggregateArgument2();
                    }
                }

                }
            }

            this.state = 751;
            this.match(MongoParser.RPAREN);
            this.state = 753;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 77) {
                {
                this.state = 752;
                this.explainMethod();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregateArgument2(): AggregateArgument2Context {
        let localContext = new AggregateArgument2Context(this.context, this.state);
        this.enterRule(localContext, 134, MongoParser.RULE_aggregateArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 755;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregateArgument1(): AggregateArgument1Context {
        let localContext = new AggregateArgument1Context(this.context, this.state);
        this.enterRule(localContext, 136, MongoParser.RULE_aggregateArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 757;
            this.array();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDistinctMethod(): CollectionDistinctMethodContext {
        let localContext = new CollectionDistinctMethodContext(this.context, this.state);
        this.enterRule(localContext, 138, MongoParser.RULE_collectionDistinctMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 759;
            this.match(MongoParser.DISTINCT);
            this.state = 760;
            this.match(MongoParser.LPAREN);
            this.state = 761;
            this.collectionDistinctArgument1();
            this.state = 768;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 762;
                this.match(MongoParser.COMMA);
                this.state = 763;
                this.collectionDistinctArgument2();
                this.state = 766;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75) {
                    {
                    this.state = 764;
                    this.match(MongoParser.COMMA);
                    this.state = 765;
                    this.collectionDistinctArgument3();
                    }
                }

                }
            }

            this.state = 770;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDistinctArgument1(): CollectionDistinctArgument1Context {
        let localContext = new CollectionDistinctArgument1Context(this.context, this.state);
        this.enterRule(localContext, 140, MongoParser.RULE_collectionDistinctArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 772;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDistinctArgument2(): CollectionDistinctArgument2Context {
        let localContext = new CollectionDistinctArgument2Context(this.context, this.state);
        this.enterRule(localContext, 142, MongoParser.RULE_collectionDistinctArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 774;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDistinctArgument3(): CollectionDistinctArgument3Context {
        let localContext = new CollectionDistinctArgument3Context(this.context, this.state);
        this.enterRule(localContext, 144, MongoParser.RULE_collectionDistinctArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 776;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCountDocumentsMethod(): CollectionCountDocumentsMethodContext {
        let localContext = new CollectionCountDocumentsMethodContext(this.context, this.state);
        this.enterRule(localContext, 146, MongoParser.RULE_collectionCountDocumentsMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 778;
            this.match(MongoParser.COUNT_DOCUMENTS);
            this.state = 779;
            this.match(MongoParser.LPAREN);
            this.state = 785;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 780;
                this.collectionCountDocumentsArgument1();
                this.state = 783;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75) {
                    {
                    this.state = 781;
                    this.match(MongoParser.COMMA);
                    this.state = 782;
                    this.collectionCountDocumentsArgument2();
                    }
                }

                }
            }

            this.state = 787;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCountDocumentsArgument2(): CollectionCountDocumentsArgument2Context {
        let localContext = new CollectionCountDocumentsArgument2Context(this.context, this.state);
        this.enterRule(localContext, 148, MongoParser.RULE_collectionCountDocumentsArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 789;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCountDocumentsArgument1(): CollectionCountDocumentsArgument1Context {
        let localContext = new CollectionCountDocumentsArgument1Context(this.context, this.state);
        this.enterRule(localContext, 150, MongoParser.RULE_collectionCountDocumentsArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 791;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionEstimatedDocumentCountMethod(): CollectionEstimatedDocumentCountMethodContext {
        let localContext = new CollectionEstimatedDocumentCountMethodContext(this.context, this.state);
        this.enterRule(localContext, 152, MongoParser.RULE_collectionEstimatedDocumentCountMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 793;
            this.match(MongoParser.ESTIMATED_DOCUMENT_COUNT);
            this.state = 794;
            this.match(MongoParser.LPAREN);
            this.state = 796;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 795;
                this.collectionEstimatedDocumentCountArgument();
                }
            }

            this.state = 798;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionEstimatedDocumentCountArgument(): CollectionEstimatedDocumentCountArgumentContext {
        let localContext = new CollectionEstimatedDocumentCountArgumentContext(this.context, this.state);
        this.enterRule(localContext, 154, MongoParser.RULE_collectionEstimatedDocumentCountArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 800;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexInformationMethod(): CollectionIndexInformationMethodContext {
        let localContext = new CollectionIndexInformationMethodContext(this.context, this.state);
        this.enterRule(localContext, 156, MongoParser.RULE_collectionIndexInformationMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 802;
            this.match(MongoParser.INDEX_INFORMATION);
            this.state = 803;
            this.match(MongoParser.LPAREN);
            this.state = 805;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 804;
                this.collectionIndexInformationArgument();
                }
            }

            this.state = 807;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexInformationArgument(): CollectionIndexInformationArgumentContext {
        let localContext = new CollectionIndexInformationArgumentContext(this.context, this.state);
        this.enterRule(localContext, 158, MongoParser.RULE_collectionIndexInformationArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 809;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexExistsMethod(): CollectionIndexExistsMethodContext {
        let localContext = new CollectionIndexExistsMethodContext(this.context, this.state);
        this.enterRule(localContext, 160, MongoParser.RULE_collectionIndexExistsMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 811;
            this.match(MongoParser.INDEX_EXISTS);
            this.state = 812;
            this.match(MongoParser.LPAREN);
            this.state = 813;
            this.collectionIndexExistsArgument1();
            this.state = 816;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 814;
                this.match(MongoParser.COMMA);
                this.state = 815;
                this.collectionIndexExistsArgument2();
                }
            }

            this.state = 818;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexExistsArgument2(): CollectionIndexExistsArgument2Context {
        let localContext = new CollectionIndexExistsArgument2Context(this.context, this.state);
        this.enterRule(localContext, 162, MongoParser.RULE_collectionIndexExistsArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 820;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexExistsArgument1(): CollectionIndexExistsArgument1Context {
        let localContext = new CollectionIndexExistsArgument1Context(this.context, this.state);
        this.enterRule(localContext, 164, MongoParser.RULE_collectionIndexExistsArgument1);
        let _la: number;
        try {
            let alternative: number;
            this.state = 837;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 822;
                this.indexName();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 823;
                this.match(MongoParser.LBRACKET);
                this.state = 824;
                this.indexName();
                this.state = 829;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 39, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 825;
                        this.match(MongoParser.COMMA);
                        this.state = 826;
                        this.indexName();
                        }
                        }
                    }
                    this.state = 831;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 39, this.context);
                }
                this.state = 833;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75) {
                    {
                    this.state = 832;
                    this.match(MongoParser.COMMA);
                    }
                }

                this.state = 835;
                this.match(MongoParser.RBRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexName(): IndexNameContext {
        let localContext = new IndexNameContext(this.context, this.state);
        this.enterRule(localContext, 166, MongoParser.RULE_indexName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 839;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexesMethod(): CollectionIndexesMethodContext {
        let localContext = new CollectionIndexesMethodContext(this.context, this.state);
        this.enterRule(localContext, 168, MongoParser.RULE_collectionIndexesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 841;
            this.match(MongoParser.INDEXES);
            this.state = 842;
            this.match(MongoParser.LPAREN);
            this.state = 844;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 843;
                this.collectionIndexesArgument();
                }
            }

            this.state = 846;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIndexesArgument(): CollectionIndexesArgumentContext {
        let localContext = new CollectionIndexesArgumentContext(this.context, this.state);
        this.enterRule(localContext, 170, MongoParser.RULE_collectionIndexesArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 848;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionListIndexesMethod(): CollectionListIndexesMethodContext {
        let localContext = new CollectionListIndexesMethodContext(this.context, this.state);
        this.enterRule(localContext, 172, MongoParser.RULE_collectionListIndexesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 850;
            this.match(MongoParser.LIST_INDEXES);
            this.state = 851;
            this.match(MongoParser.LPAREN);
            this.state = 853;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 852;
                this.collectionListIndexesArgument();
                }
            }

            this.state = 855;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionListIndexesArgument(): CollectionListIndexesArgumentContext {
        let localContext = new CollectionListIndexesArgumentContext(this.context, this.state);
        this.enterRule(localContext, 174, MongoParser.RULE_collectionListIndexesArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 857;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropIndexesMethod(): CollectionDropIndexesMethodContext {
        let localContext = new CollectionDropIndexesMethodContext(this.context, this.state);
        this.enterRule(localContext, 176, MongoParser.RULE_collectionDropIndexesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 859;
            this.match(MongoParser.DROP_INDEXES);
            this.state = 860;
            this.match(MongoParser.LPAREN);
            this.state = 862;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 861;
                this.collectionDropIndexesArgument();
                }
            }

            this.state = 864;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropIndexesArgument(): CollectionDropIndexesArgumentContext {
        let localContext = new CollectionDropIndexesArgumentContext(this.context, this.state);
        this.enterRule(localContext, 178, MongoParser.RULE_collectionDropIndexesArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 866;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropIndexMethod(): CollectionDropIndexMethodContext {
        let localContext = new CollectionDropIndexMethodContext(this.context, this.state);
        this.enterRule(localContext, 180, MongoParser.RULE_collectionDropIndexMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 868;
            this.match(MongoParser.DROP_INDEX);
            this.state = 869;
            this.match(MongoParser.LPAREN);
            this.state = 870;
            this.collectionDropIndexArgument1();
            this.state = 873;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 871;
                this.match(MongoParser.COMMA);
                this.state = 872;
                this.collectionDropIndexArgument2();
                }
            }

            this.state = 875;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropIndexArgument2(): CollectionDropIndexArgument2Context {
        let localContext = new CollectionDropIndexArgument2Context(this.context, this.state);
        this.enterRule(localContext, 182, MongoParser.RULE_collectionDropIndexArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 877;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropIndexArgument1(): CollectionDropIndexArgument1Context {
        let localContext = new CollectionDropIndexArgument1Context(this.context, this.state);
        this.enterRule(localContext, 184, MongoParser.RULE_collectionDropIndexArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 879;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCreateIndexesMethod(): CollectionCreateIndexesMethodContext {
        let localContext = new CollectionCreateIndexesMethodContext(this.context, this.state);
        this.enterRule(localContext, 186, MongoParser.RULE_collectionCreateIndexesMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 881;
            this.match(MongoParser.CREATE_INDEXES);
            this.state = 882;
            this.match(MongoParser.LPAREN);
            this.state = 883;
            this.collectionCreateIndexesArgument1();
            this.state = 886;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 884;
                this.match(MongoParser.COMMA);
                this.state = 885;
                this.collectionCreateIndexesArgument2();
                }
            }

            this.state = 888;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCreateIndexesArgument2(): CollectionCreateIndexesArgument2Context {
        let localContext = new CollectionCreateIndexesArgument2Context(this.context, this.state);
        this.enterRule(localContext, 188, MongoParser.RULE_collectionCreateIndexesArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 890;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCreateIndexesArgument1(): CollectionCreateIndexesArgument1Context {
        let localContext = new CollectionCreateIndexesArgument1Context(this.context, this.state);
        this.enterRule(localContext, 190, MongoParser.RULE_collectionCreateIndexesArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 892;
            this.array();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCreateIndexMethod(): CollectionCreateIndexMethodContext {
        let localContext = new CollectionCreateIndexMethodContext(this.context, this.state);
        this.enterRule(localContext, 192, MongoParser.RULE_collectionCreateIndexMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 894;
            this.match(MongoParser.CREATE_INDEX);
            this.state = 895;
            this.match(MongoParser.LPAREN);
            this.state = 896;
            this.collectionCreateIndexArgument1();
            this.state = 899;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 897;
                this.match(MongoParser.COMMA);
                this.state = 898;
                this.collectionCreateIndexArgument2();
                }
            }

            this.state = 901;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCreateIndexArgument2(): CollectionCreateIndexArgument2Context {
        let localContext = new CollectionCreateIndexArgument2Context(this.context, this.state);
        this.enterRule(localContext, 194, MongoParser.RULE_collectionCreateIndexArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 903;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionCreateIndexArgument1(): CollectionCreateIndexArgument1Context {
        let localContext = new CollectionCreateIndexArgument1Context(this.context, this.state);
        this.enterRule(localContext, 196, MongoParser.RULE_collectionCreateIndexArgument1);
        try {
            this.state = 908;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 905;
                this.string_();
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 906;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 907;
                this.array();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIsCappedMethod(): CollectionIsCappedMethodContext {
        let localContext = new CollectionIsCappedMethodContext(this.context, this.state);
        this.enterRule(localContext, 198, MongoParser.RULE_collectionIsCappedMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 910;
            this.match(MongoParser.IS_CAPPED);
            this.state = 911;
            this.match(MongoParser.LPAREN);
            this.state = 913;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 912;
                this.collectionIsCappedArgument();
                }
            }

            this.state = 915;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionIsCappedArgument(): CollectionIsCappedArgumentContext {
        let localContext = new CollectionIsCappedArgumentContext(this.context, this.state);
        this.enterRule(localContext, 200, MongoParser.RULE_collectionIsCappedArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 917;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropMethod(): CollectionDropMethodContext {
        let localContext = new CollectionDropMethodContext(this.context, this.state);
        this.enterRule(localContext, 202, MongoParser.RULE_collectionDropMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 919;
            this.match(MongoParser.DROP);
            this.state = 920;
            this.match(MongoParser.LPAREN);
            this.state = 922;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 921;
                this.collectionDropArgument();
                }
            }

            this.state = 924;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDropArgument(): CollectionDropArgumentContext {
        let localContext = new CollectionDropArgumentContext(this.context, this.state);
        this.enterRule(localContext, 204, MongoParser.RULE_collectionDropArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 926;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionRenameMethod(): CollectionRenameMethodContext {
        let localContext = new CollectionRenameMethodContext(this.context, this.state);
        this.enterRule(localContext, 206, MongoParser.RULE_collectionRenameMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 928;
            this.match(MongoParser.RENAME);
            this.state = 929;
            this.match(MongoParser.LPAREN);
            this.state = 930;
            this.collectionRenameArgument1();
            this.state = 933;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 931;
                this.match(MongoParser.COMMA);
                this.state = 932;
                this.collectionRenameArgument2();
                }
            }

            this.state = 935;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionRenameArgument1(): CollectionRenameArgument1Context {
        let localContext = new CollectionRenameArgument1Context(this.context, this.state);
        this.enterRule(localContext, 208, MongoParser.RULE_collectionRenameArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 937;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionRenameArgument2(): CollectionRenameArgument2Context {
        let localContext = new CollectionRenameArgument2Context(this.context, this.state);
        this.enterRule(localContext, 210, MongoParser.RULE_collectionRenameArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 939;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDeleteManyMethod(): CollectionDeleteManyMethodContext {
        let localContext = new CollectionDeleteManyMethodContext(this.context, this.state);
        this.enterRule(localContext, 212, MongoParser.RULE_collectionDeleteManyMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 941;
            this.match(MongoParser.DELETE_MANY);
            this.state = 942;
            this.match(MongoParser.LPAREN);
            this.state = 948;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 943;
                this.collectionDeleteManyArgument1();
                this.state = 946;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75) {
                    {
                    this.state = 944;
                    this.match(MongoParser.COMMA);
                    this.state = 945;
                    this.collectionDeleteManyArgument2();
                    }
                }

                }
            }

            this.state = 950;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDeleteManyArgument1(): CollectionDeleteManyArgument1Context {
        let localContext = new CollectionDeleteManyArgument1Context(this.context, this.state);
        this.enterRule(localContext, 214, MongoParser.RULE_collectionDeleteManyArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 952;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDeleteManyArgument2(): CollectionDeleteManyArgument2Context {
        let localContext = new CollectionDeleteManyArgument2Context(this.context, this.state);
        this.enterRule(localContext, 216, MongoParser.RULE_collectionDeleteManyArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 954;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDeleteOneMethod(): CollectionDeleteOneMethodContext {
        let localContext = new CollectionDeleteOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 218, MongoParser.RULE_collectionDeleteOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 956;
            this.match(MongoParser.DELETE_ONE);
            this.state = 957;
            this.match(MongoParser.LPAREN);
            this.state = 963;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 958;
                this.collectionDeleteOneArgument1();
                this.state = 961;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75) {
                    {
                    this.state = 959;
                    this.match(MongoParser.COMMA);
                    this.state = 960;
                    this.collectionDeleteOneArgument2();
                    }
                }

                }
            }

            this.state = 965;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDeleteOneArgument1(): CollectionDeleteOneArgument1Context {
        let localContext = new CollectionDeleteOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 220, MongoParser.RULE_collectionDeleteOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 967;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionDeleteOneArgument2(): CollectionDeleteOneArgument2Context {
        let localContext = new CollectionDeleteOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 222, MongoParser.RULE_collectionDeleteOneArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 969;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionReplaceOneMethod(): CollectionReplaceOneMethodContext {
        let localContext = new CollectionReplaceOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 224, MongoParser.RULE_collectionReplaceOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 971;
            this.match(MongoParser.REPLACE_ONE);
            this.state = 972;
            this.match(MongoParser.LPAREN);
            this.state = 973;
            this.collectionReplaceOneArgument1();
            this.state = 974;
            this.match(MongoParser.COMMA);
            this.state = 975;
            this.collectionReplaceOneArgument2();
            this.state = 978;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 976;
                this.match(MongoParser.COMMA);
                this.state = 977;
                this.collectionReplaceOneArgument3();
                }
            }

            this.state = 980;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionReplaceOneArgument1(): CollectionReplaceOneArgument1Context {
        let localContext = new CollectionReplaceOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 226, MongoParser.RULE_collectionReplaceOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 982;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionReplaceOneArgument2(): CollectionReplaceOneArgument2Context {
        let localContext = new CollectionReplaceOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 228, MongoParser.RULE_collectionReplaceOneArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 984;
            this.documentToInsert();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionReplaceOneArgument3(): CollectionReplaceOneArgument3Context {
        let localContext = new CollectionReplaceOneArgument3Context(this.context, this.state);
        this.enterRule(localContext, 230, MongoParser.RULE_collectionReplaceOneArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 986;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateManyMethod(): CollectionUpdateManyMethodContext {
        let localContext = new CollectionUpdateManyMethodContext(this.context, this.state);
        this.enterRule(localContext, 232, MongoParser.RULE_collectionUpdateManyMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 988;
            this.match(MongoParser.UPDATE_MANY);
            this.state = 989;
            this.match(MongoParser.LPAREN);
            this.state = 990;
            this.collectionUpdateManyArgument1();
            this.state = 991;
            this.match(MongoParser.COMMA);
            this.state = 992;
            this.collectionUpdateManyArgument2();
            this.state = 995;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 993;
                this.match(MongoParser.COMMA);
                this.state = 994;
                this.collectionUpdateManyArgument3();
                }
            }

            this.state = 997;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateManyArgument1(): CollectionUpdateManyArgument1Context {
        let localContext = new CollectionUpdateManyArgument1Context(this.context, this.state);
        this.enterRule(localContext, 234, MongoParser.RULE_collectionUpdateManyArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 999;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateManyArgument2(): CollectionUpdateManyArgument2Context {
        let localContext = new CollectionUpdateManyArgument2Context(this.context, this.state);
        this.enterRule(localContext, 236, MongoParser.RULE_collectionUpdateManyArgument2);
        try {
            this.state = 1003;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1001;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1002;
                this.array();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateManyArgument3(): CollectionUpdateManyArgument3Context {
        let localContext = new CollectionUpdateManyArgument3Context(this.context, this.state);
        this.enterRule(localContext, 238, MongoParser.RULE_collectionUpdateManyArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1005;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateOneMethod(): CollectionUpdateOneMethodContext {
        let localContext = new CollectionUpdateOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 240, MongoParser.RULE_collectionUpdateOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1007;
            this.match(MongoParser.UPDATE_ONE);
            this.state = 1008;
            this.match(MongoParser.LPAREN);
            this.state = 1009;
            this.collectionUpdateOneArgument1();
            this.state = 1010;
            this.match(MongoParser.COMMA);
            this.state = 1011;
            this.collectionUpdateOneArgument2();
            this.state = 1014;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 1012;
                this.match(MongoParser.COMMA);
                this.state = 1013;
                this.collectionUpdateOneArgument3();
                }
            }

            this.state = 1016;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateOneArgument1(): CollectionUpdateOneArgument1Context {
        let localContext = new CollectionUpdateOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 242, MongoParser.RULE_collectionUpdateOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1018;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateOneArgument2(): CollectionUpdateOneArgument2Context {
        let localContext = new CollectionUpdateOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 244, MongoParser.RULE_collectionUpdateOneArgument2);
        try {
            this.state = 1022;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1020;
                this.array();
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1021;
                this.object();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionUpdateOneArgument3(): CollectionUpdateOneArgument3Context {
        let localContext = new CollectionUpdateOneArgument3Context(this.context, this.state);
        this.enterRule(localContext, 246, MongoParser.RULE_collectionUpdateOneArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1024;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionBulkWriteMethod(): CollectionBulkWriteMethodContext {
        let localContext = new CollectionBulkWriteMethodContext(this.context, this.state);
        this.enterRule(localContext, 248, MongoParser.RULE_collectionBulkWriteMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1026;
            this.match(MongoParser.BULK_WRITE);
            this.state = 1027;
            this.match(MongoParser.LPAREN);
            this.state = 1028;
            this.collectionBulkWriteArgument1();
            this.state = 1031;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 1029;
                this.match(MongoParser.COMMA);
                this.state = 1030;
                this.collectionBulkWriteArgument2();
                }
            }

            this.state = 1033;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionBulkWriteArgument1(): CollectionBulkWriteArgument1Context {
        let localContext = new CollectionBulkWriteArgument1Context(this.context, this.state);
        this.enterRule(localContext, 250, MongoParser.RULE_collectionBulkWriteArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1035;
            this.array();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionBulkWriteArgument2(): CollectionBulkWriteArgument2Context {
        let localContext = new CollectionBulkWriteArgument2Context(this.context, this.state);
        this.enterRule(localContext, 252, MongoParser.RULE_collectionBulkWriteArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1037;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionInsertManyMethod(): CollectionInsertManyMethodContext {
        let localContext = new CollectionInsertManyMethodContext(this.context, this.state);
        this.enterRule(localContext, 254, MongoParser.RULE_collectionInsertManyMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1039;
            this.match(MongoParser.INSERT_MANY);
            this.state = 1040;
            this.match(MongoParser.LPAREN);
            this.state = 1041;
            this.collectionInsertManyArgument1();
            this.state = 1044;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 1042;
                this.match(MongoParser.COMMA);
                this.state = 1043;
                this.collectionInsertManyArgument2();
                }
            }

            this.state = 1046;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionInsertManyArgument1(): CollectionInsertManyArgument1Context {
        let localContext = new CollectionInsertManyArgument1Context(this.context, this.state);
        this.enterRule(localContext, 256, MongoParser.RULE_collectionInsertManyArgument1);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1048;
            this.match(MongoParser.LBRACKET);
            this.state = 1049;
            this.documentToInsert();
            this.state = 1054;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 63, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1050;
                    this.match(MongoParser.COMMA);
                    this.state = 1051;
                    this.documentToInsert();
                    }
                    }
                }
                this.state = 1056;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 63, this.context);
            }
            this.state = 1058;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 1057;
                this.match(MongoParser.COMMA);
                }
            }

            this.state = 1060;
            this.match(MongoParser.RBRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionInsertManyArgument2(): CollectionInsertManyArgument2Context {
        let localContext = new CollectionInsertManyArgument2Context(this.context, this.state);
        this.enterRule(localContext, 258, MongoParser.RULE_collectionInsertManyArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1062;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionInsertOneMethod(): CollectionInsertOneMethodContext {
        let localContext = new CollectionInsertOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 260, MongoParser.RULE_collectionInsertOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1064;
            this.match(MongoParser.INSERT_ONE);
            this.state = 1065;
            this.match(MongoParser.LPAREN);
            this.state = 1066;
            this.collectionInsertOneArgument1();
            this.state = 1069;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 1067;
                this.match(MongoParser.COMMA);
                this.state = 1068;
                this.collectionInsertOneArgument2();
                }
            }

            this.state = 1071;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionInsertOneArgument1(): CollectionInsertOneArgument1Context {
        let localContext = new CollectionInsertOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 262, MongoParser.RULE_collectionInsertOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1073;
            this.documentToInsert();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionInsertOneArgument2(): CollectionInsertOneArgument2Context {
        let localContext = new CollectionInsertOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 264, MongoParser.RULE_collectionInsertOneArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1075;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public documentToInsert(): DocumentToInsertContext {
        let localContext = new DocumentToInsertContext(this.context, this.state);
        this.enterRule(localContext, 266, MongoParser.RULE_documentToInsert);
        try {
            this.state = 1079;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1077;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1078;
                this.array();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndUpdateMethod(): CollectionFindOneAndUpdateMethodContext {
        let localContext = new CollectionFindOneAndUpdateMethodContext(this.context, this.state);
        this.enterRule(localContext, 268, MongoParser.RULE_collectionFindOneAndUpdateMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1081;
            this.match(MongoParser.FIND_ONE_AND_UPDATE);
            this.state = 1082;
            this.match(MongoParser.LPAREN);
            this.state = 1083;
            this.collectionFindOneAndUpdateArgument1();
            this.state = 1084;
            this.match(MongoParser.COMMA);
            this.state = 1085;
            this.collectionFindOneAndUpdateArgument2();
            this.state = 1088;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 1086;
                this.match(MongoParser.COMMA);
                this.state = 1087;
                this.collectionFindOneAndUpdateArgument3();
                }
            }

            this.state = 1090;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndUpdateArgument1(): CollectionFindOneAndUpdateArgument1Context {
        let localContext = new CollectionFindOneAndUpdateArgument1Context(this.context, this.state);
        this.enterRule(localContext, 270, MongoParser.RULE_collectionFindOneAndUpdateArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1092;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndUpdateArgument2(): CollectionFindOneAndUpdateArgument2Context {
        let localContext = new CollectionFindOneAndUpdateArgument2Context(this.context, this.state);
        this.enterRule(localContext, 272, MongoParser.RULE_collectionFindOneAndUpdateArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1094;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndUpdateArgument3(): CollectionFindOneAndUpdateArgument3Context {
        let localContext = new CollectionFindOneAndUpdateArgument3Context(this.context, this.state);
        this.enterRule(localContext, 274, MongoParser.RULE_collectionFindOneAndUpdateArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1096;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndReplaceMethod(): CollectionFindOneAndReplaceMethodContext {
        let localContext = new CollectionFindOneAndReplaceMethodContext(this.context, this.state);
        this.enterRule(localContext, 276, MongoParser.RULE_collectionFindOneAndReplaceMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1098;
            this.match(MongoParser.FIND_ONE_AND_REPLACE);
            this.state = 1099;
            this.match(MongoParser.LPAREN);
            this.state = 1100;
            this.collectionFindOneAndReplaceArgument1();
            this.state = 1101;
            this.match(MongoParser.COMMA);
            this.state = 1102;
            this.collectionFindOneAndReplaceArgument2();
            this.state = 1105;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 1103;
                this.match(MongoParser.COMMA);
                this.state = 1104;
                this.collectionFindOneAndReplaceArgument3();
                }
            }

            this.state = 1107;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndReplaceArgument1(): CollectionFindOneAndReplaceArgument1Context {
        let localContext = new CollectionFindOneAndReplaceArgument1Context(this.context, this.state);
        this.enterRule(localContext, 278, MongoParser.RULE_collectionFindOneAndReplaceArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1109;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndReplaceArgument2(): CollectionFindOneAndReplaceArgument2Context {
        let localContext = new CollectionFindOneAndReplaceArgument2Context(this.context, this.state);
        this.enterRule(localContext, 280, MongoParser.RULE_collectionFindOneAndReplaceArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1111;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndReplaceArgument3(): CollectionFindOneAndReplaceArgument3Context {
        let localContext = new CollectionFindOneAndReplaceArgument3Context(this.context, this.state);
        this.enterRule(localContext, 282, MongoParser.RULE_collectionFindOneAndReplaceArgument3);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1113;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndDeleteMethod(): CollectionFindOneAndDeleteMethodContext {
        let localContext = new CollectionFindOneAndDeleteMethodContext(this.context, this.state);
        this.enterRule(localContext, 284, MongoParser.RULE_collectionFindOneAndDeleteMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1115;
            this.match(MongoParser.FIND_ONE_AND_DELETE);
            this.state = 1116;
            this.match(MongoParser.LPAREN);
            this.state = 1117;
            this.collectionFindOneAndDeleteArgument1();
            this.state = 1120;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 1118;
                this.match(MongoParser.COMMA);
                this.state = 1119;
                this.collectionFindOneAndDeleteArgument2();
                }
            }

            this.state = 1122;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndDeleteArgument1(): CollectionFindOneAndDeleteArgument1Context {
        let localContext = new CollectionFindOneAndDeleteArgument1Context(this.context, this.state);
        this.enterRule(localContext, 286, MongoParser.RULE_collectionFindOneAndDeleteArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1124;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneAndDeleteArgument2(): CollectionFindOneAndDeleteArgument2Context {
        let localContext = new CollectionFindOneAndDeleteArgument2Context(this.context, this.state);
        this.enterRule(localContext, 288, MongoParser.RULE_collectionFindOneAndDeleteArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1126;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneMethod(): CollectionFindOneMethodContext {
        let localContext = new CollectionFindOneMethodContext(this.context, this.state);
        this.enterRule(localContext, 290, MongoParser.RULE_collectionFindOneMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1128;
            this.match(MongoParser.FIND_ONE);
            this.state = 1129;
            this.match(MongoParser.LPAREN);
            this.state = 1135;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 1130;
                this.collectionFindOneArgument1();
                this.state = 1133;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75) {
                    {
                    this.state = 1131;
                    this.match(MongoParser.COMMA);
                    this.state = 1132;
                    this.collectionFindOneArgument2();
                    }
                }

                }
            }

            this.state = 1137;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneArgument1(): CollectionFindOneArgument1Context {
        let localContext = new CollectionFindOneArgument1Context(this.context, this.state);
        this.enterRule(localContext, 292, MongoParser.RULE_collectionFindOneArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1139;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindOneArgument2(): CollectionFindOneArgument2Context {
        let localContext = new CollectionFindOneArgument2Context(this.context, this.state);
        this.enterRule(localContext, 294, MongoParser.RULE_collectionFindOneArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1141;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindMethod(): CollectionFindMethodContext {
        let localContext = new CollectionFindMethodContext(this.context, this.state);
        this.enterRule(localContext, 296, MongoParser.RULE_collectionFindMethod);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1143;
            this.match(MongoParser.FIND);
            this.state = 1144;
            this.match(MongoParser.LPAREN);
            this.state = 1150;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 72) {
                {
                this.state = 1145;
                this.collectionFindMethodArgument1();
                this.state = 1148;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75) {
                    {
                    this.state = 1146;
                    this.match(MongoParser.COMMA);
                    this.state = 1147;
                    this.collectionFindMethodArgument2();
                    }
                }

                }
            }

            this.state = 1152;
            this.match(MongoParser.RPAREN);
            this.state = 1156;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 74, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1153;
                    this.collectionFindMethodModifier();
                    }
                    }
                }
                this.state = 1158;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 74, this.context);
            }
            this.state = 1160;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 77) {
                {
                this.state = 1159;
                this.explainMethod();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindMethodArgument1(): CollectionFindMethodArgument1Context {
        let localContext = new CollectionFindMethodArgument1Context(this.context, this.state);
        this.enterRule(localContext, 298, MongoParser.RULE_collectionFindMethodArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1162;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindMethodArgument2(): CollectionFindMethodArgument2Context {
        let localContext = new CollectionFindMethodArgument2Context(this.context, this.state);
        this.enterRule(localContext, 300, MongoParser.RULE_collectionFindMethodArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1164;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainMethod(): ExplainMethodContext {
        let localContext = new ExplainMethodContext(this.context, this.state);
        this.enterRule(localContext, 302, MongoParser.RULE_explainMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1166;
            this.match(MongoParser.DOT);
            this.state = 1167;
            this.match(MongoParser.EXPLAIN);
            this.state = 1168;
            this.match(MongoParser.LPAREN);
            this.state = 1170;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 72)) & ~0x1F) === 0 && ((1 << (_la - 72)) & 705) !== 0)) {
                {
                this.state = 1169;
                this.explainMethodArgument();
                }
            }

            this.state = 1172;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainMethodArgument(): ExplainMethodArgumentContext {
        let localContext = new ExplainMethodArgumentContext(this.context, this.state);
        this.enterRule(localContext, 304, MongoParser.RULE_explainMethodArgument);
        try {
            this.state = 1177;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1174;
                this.string_();
                }
                break;
            case MongoParser.TRUE:
            case MongoParser.FALSE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1175;
                this.boolean_();
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1176;
                this.object();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFindMethodModifier(): CollectionFindMethodModifierContext {
        let localContext = new CollectionFindMethodModifierContext(this.context, this.state);
        this.enterRule(localContext, 306, MongoParser.RULE_collectionFindMethodModifier);
        try {
            this.state = 1197;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 78, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1179;
                this.match(MongoParser.DOT);
                this.state = 1180;
                this.skipModifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1181;
                this.match(MongoParser.DOT);
                this.state = 1182;
                this.limitModifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1183;
                this.match(MongoParser.DOT);
                this.state = 1184;
                this.filterModifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1185;
                this.match(MongoParser.DOT);
                this.state = 1186;
                this.minModifier();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1187;
                this.match(MongoParser.DOT);
                this.state = 1188;
                this.maxModifier();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1189;
                this.match(MongoParser.DOT);
                this.state = 1190;
                this.hintModifier();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1191;
                this.match(MongoParser.DOT);
                this.state = 1192;
                this.returnKeyModifier();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1193;
                this.match(MongoParser.DOT);
                this.state = 1194;
                this.showRecordIdModifier();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1195;
                this.match(MongoParser.DOT);
                this.state = 1196;
                this.sortModifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skipModifier(): SkipModifierContext {
        let localContext = new SkipModifierContext(this.context, this.state);
        this.enterRule(localContext, 308, MongoParser.RULE_skipModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1199;
            this.match(MongoParser.SKIP_);
            this.state = 1200;
            this.match(MongoParser.LPAREN);
            this.state = 1201;
            this.skipModifierArgument();
            this.state = 1202;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skipModifierArgument(): SkipModifierArgumentContext {
        let localContext = new SkipModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 310, MongoParser.RULE_skipModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1204;
            this.number_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitModifier(): LimitModifierContext {
        let localContext = new LimitModifierContext(this.context, this.state);
        this.enterRule(localContext, 312, MongoParser.RULE_limitModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1206;
            this.match(MongoParser.LIMIT);
            this.state = 1207;
            this.match(MongoParser.LPAREN);
            this.state = 1208;
            this.limitModifierArgument();
            this.state = 1209;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitModifierArgument(): LimitModifierArgumentContext {
        let localContext = new LimitModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 314, MongoParser.RULE_limitModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1211;
            this.number_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterModifier(): FilterModifierContext {
        let localContext = new FilterModifierContext(this.context, this.state);
        this.enterRule(localContext, 316, MongoParser.RULE_filterModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1213;
            this.match(MongoParser.FILTER);
            this.state = 1214;
            this.match(MongoParser.LPAREN);
            this.state = 1215;
            this.filterModifierArgument();
            this.state = 1216;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterModifierArgument(): FilterModifierArgumentContext {
        let localContext = new FilterModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 318, MongoParser.RULE_filterModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1218;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public minModifier(): MinModifierContext {
        let localContext = new MinModifierContext(this.context, this.state);
        this.enterRule(localContext, 320, MongoParser.RULE_minModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1220;
            this.match(MongoParser.MIN);
            this.state = 1221;
            this.match(MongoParser.LPAREN);
            this.state = 1222;
            this.minModifierArgument();
            this.state = 1223;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public minModifierArgument(): MinModifierArgumentContext {
        let localContext = new MinModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 322, MongoParser.RULE_minModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1225;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public maxModifier(): MaxModifierContext {
        let localContext = new MaxModifierContext(this.context, this.state);
        this.enterRule(localContext, 324, MongoParser.RULE_maxModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1227;
            this.match(MongoParser.MAX);
            this.state = 1228;
            this.match(MongoParser.LPAREN);
            this.state = 1229;
            this.maxModifierArgument();
            this.state = 1230;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public maxModifierArgument(): MaxModifierArgumentContext {
        let localContext = new MaxModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 326, MongoParser.RULE_maxModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1232;
            this.object();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintModifier(): HintModifierContext {
        let localContext = new HintModifierContext(this.context, this.state);
        this.enterRule(localContext, 328, MongoParser.RULE_hintModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1234;
            this.match(MongoParser.HINT);
            this.state = 1235;
            this.match(MongoParser.LPAREN);
            this.state = 1236;
            this.hintModifierArgument();
            this.state = 1237;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintModifierArgument(): HintModifierArgumentContext {
        let localContext = new HintModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 330, MongoParser.RULE_hintModifierArgument);
        try {
            this.state = 1241;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1239;
                this.object();
                }
                break;
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1240;
                this.string_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnKeyModifier(): ReturnKeyModifierContext {
        let localContext = new ReturnKeyModifierContext(this.context, this.state);
        this.enterRule(localContext, 332, MongoParser.RULE_returnKeyModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1243;
            this.match(MongoParser.RETURN_KEY);
            this.state = 1244;
            this.match(MongoParser.LPAREN);
            this.state = 1245;
            this.returnKeyModifierArgument();
            this.state = 1246;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnKeyModifierArgument(): ReturnKeyModifierArgumentContext {
        let localContext = new ReturnKeyModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 334, MongoParser.RULE_returnKeyModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1248;
            this.boolean_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRecordIdModifier(): ShowRecordIdModifierContext {
        let localContext = new ShowRecordIdModifierContext(this.context, this.state);
        this.enterRule(localContext, 336, MongoParser.RULE_showRecordIdModifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1250;
            this.match(MongoParser.SHOW_RECORD_ID);
            this.state = 1251;
            this.match(MongoParser.LPAREN);
            this.state = 1252;
            this.showRecordIdModifierArgument();
            this.state = 1253;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRecordIdModifierArgument(): ShowRecordIdModifierArgumentContext {
        let localContext = new ShowRecordIdModifierArgumentContext(this.context, this.state);
        this.enterRule(localContext, 338, MongoParser.RULE_showRecordIdModifierArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1255;
            this.boolean_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortModifier(): SortModifierContext {
        let localContext = new SortModifierContext(this.context, this.state);
        this.enterRule(localContext, 340, MongoParser.RULE_sortModifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1257;
            this.match(MongoParser.SORT);
            this.state = 1258;
            this.match(MongoParser.LPAREN);
            this.state = 1259;
            this.sortModifierArgument1();
            this.state = 1262;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 1260;
                this.match(MongoParser.COMMA);
                this.state = 1261;
                this.sortModifierArgument2();
                }
            }

            this.state = 1264;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortModifierArgument1(): SortModifierArgument1Context {
        let localContext = new SortModifierArgument1Context(this.context, this.state);
        this.enterRule(localContext, 342, MongoParser.RULE_sortModifierArgument1);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1267;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 60)) & ~0x1F) === 0 && ((1 << (_la - 60)) & 33296895) !== 0)) {
                {
                this.state = 1266;
                this.value();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortModifierArgument2(): SortModifierArgument2Context {
        let localContext = new SortModifierArgument2Context(this.context, this.state);
        this.enterRule(localContext, 344, MongoParser.RULE_sortModifierArgument2);
        try {
            this.state = 1272;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.NUMBER:
            case MongoParser.NUMERIC_LITERAL:
            case MongoParser.SYMBOL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1269;
                this.number_();
                }
                break;
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1270;
                this.string_();
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1271;
                this.object();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reservedKeyword(): ReservedKeywordContext {
        let localContext = new ReservedKeywordContext(this.context, this.state);
        this.enterRule(localContext, 346, MongoParser.RULE_reservedKeyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1274;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object(): ObjectContext {
        let localContext = new ObjectContext(this.context, this.state);
        this.enterRule(localContext, 348, MongoParser.RULE_object);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1292;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 85, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1276;
                this.match(MongoParser.LBRACE);
                this.state = 1277;
                this.pair();
                this.state = 1282;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 83, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1278;
                        this.match(MongoParser.COMMA);
                        this.state = 1279;
                        this.pair();
                        }
                        }
                    }
                    this.state = 1284;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 83, this.context);
                }
                this.state = 1286;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75) {
                    {
                    this.state = 1285;
                    this.match(MongoParser.COMMA);
                    }
                }

                this.state = 1288;
                this.match(MongoParser.RBRACE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1290;
                this.match(MongoParser.LBRACE);
                this.state = 1291;
                this.match(MongoParser.RBRACE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pair(): PairContext {
        let localContext = new PairContext(this.context, this.state);
        this.enterRule(localContext, 350, MongoParser.RULE_pair);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1294;
            this.key();
            this.state = 1295;
            this.match(MongoParser.COLON);
            this.state = 1296;
            this.value();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public boolean_(): BooleanContext {
        let localContext = new BooleanContext(this.context, this.state);
        this.enterRule(localContext, 352, MongoParser.RULE_boolean);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1298;
            _la = this.tokenStream.LA(1);
            if(!(_la === 78 || _la === 79)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key(): KeyContext {
        let localContext = new KeyContext(this.context, this.state);
        this.enterRule(localContext, 354, MongoParser.RULE_key);
        try {
            this.state = 1305;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1300;
                this.string_();
                }
                break;
            case MongoParser.DB:
            case MongoParser.FIND:
            case MongoParser.FIND_ONE:
            case MongoParser.FIND_ONE_AND_DELETE:
            case MongoParser.FIND_ONE_AND_REPLACE:
            case MongoParser.FIND_ONE_AND_UPDATE:
            case MongoParser.SHOW_RECORD_ID:
            case MongoParser.RETURN_KEY:
            case MongoParser.FILTER:
            case MongoParser.MIN:
            case MongoParser.MAX:
            case MongoParser.SORT:
            case MongoParser.LIMIT:
            case MongoParser.EXPLAIN:
            case MongoParser.HINT:
            case MongoParser.SKIP_:
            case MongoParser.INSERT_ONE:
            case MongoParser.INSERT_MANY:
            case MongoParser.BULK_WRITE:
            case MongoParser.UPDATE_ONE:
            case MongoParser.UPDATE_MANY:
            case MongoParser.REPLACE_ONE:
            case MongoParser.DELETE_ONE:
            case MongoParser.DELETE_MANY:
            case MongoParser.RENAME:
            case MongoParser.DROP:
            case MongoParser.IS_CAPPED:
            case MongoParser.CREATE_INDEX:
            case MongoParser.CREATE_INDEXES:
            case MongoParser.DROP_INDEX:
            case MongoParser.DROP_INDEXES:
            case MongoParser.LIST_INDEXES:
            case MongoParser.INDEXES:
            case MongoParser.INDEX_EXISTS:
            case MongoParser.INDEX_INFORMATION:
            case MongoParser.ESTIMATED_DOCUMENT_COUNT:
            case MongoParser.COUNT_DOCUMENTS:
            case MongoParser.DISTINCT:
            case MongoParser.AGGREGATE:
            case MongoParser.COLLECTION:
            case MongoParser.CREATE_COLLECTION:
            case MongoParser.COMMAND:
            case MongoParser.LIST_COLLECTIONS:
            case MongoParser.RENAME_COLLECTION:
            case MongoParser.DROP_COLLECTION:
            case MongoParser.DROP_DATABASE:
            case MongoParser.REMOVE_USER:
            case MongoParser.RUN_CURSOR_COMMAND:
            case MongoParser.STATS:
            case MongoParser.PROFILING_LEVEL:
            case MongoParser.SET_PROFILING_LEVEL:
            case MongoParser.ADMIN:
            case MongoParser.BUILD_INFO:
            case MongoParser.SERVER_INFO:
            case MongoParser.SERVER_STATUS:
            case MongoParser.PING:
            case MongoParser.VALIDATE_COLLECTION:
            case MongoParser.LIST_DATABASES:
            case MongoParser.REPL_SET_GET_STATUS:
            case MongoParser.OBJECT_ID:
            case MongoParser.DATE:
            case MongoParser.UUID:
            case MongoParser.MIN_KEY:
            case MongoParser.MAX_KEY:
            case MongoParser.NUMBER_DECIMAL:
            case MongoParser.NUMBER_INT:
            case MongoParser.NUMBER_LONG:
            case MongoParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1301;
                this.identifier();
                }
                break;
            case MongoParser.NUMERIC_LITERAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1302;
                this.match(MongoParser.NUMERIC_LITERAL);
                }
                break;
            case MongoParser.TRUE:
            case MongoParser.FALSE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1303;
                this.boolean_();
                }
                break;
            case MongoParser.NULL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1304;
                this.null_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 356, MongoParser.RULE_identifier);
        try {
            this.state = 1309;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1307;
                this.match(MongoParser.IDENTIFIER);
                }
                break;
            case MongoParser.DB:
            case MongoParser.FIND:
            case MongoParser.FIND_ONE:
            case MongoParser.FIND_ONE_AND_DELETE:
            case MongoParser.FIND_ONE_AND_REPLACE:
            case MongoParser.FIND_ONE_AND_UPDATE:
            case MongoParser.SHOW_RECORD_ID:
            case MongoParser.RETURN_KEY:
            case MongoParser.FILTER:
            case MongoParser.MIN:
            case MongoParser.MAX:
            case MongoParser.SORT:
            case MongoParser.LIMIT:
            case MongoParser.EXPLAIN:
            case MongoParser.HINT:
            case MongoParser.SKIP_:
            case MongoParser.INSERT_ONE:
            case MongoParser.INSERT_MANY:
            case MongoParser.BULK_WRITE:
            case MongoParser.UPDATE_ONE:
            case MongoParser.UPDATE_MANY:
            case MongoParser.REPLACE_ONE:
            case MongoParser.DELETE_ONE:
            case MongoParser.DELETE_MANY:
            case MongoParser.RENAME:
            case MongoParser.DROP:
            case MongoParser.IS_CAPPED:
            case MongoParser.CREATE_INDEX:
            case MongoParser.CREATE_INDEXES:
            case MongoParser.DROP_INDEX:
            case MongoParser.DROP_INDEXES:
            case MongoParser.LIST_INDEXES:
            case MongoParser.INDEXES:
            case MongoParser.INDEX_EXISTS:
            case MongoParser.INDEX_INFORMATION:
            case MongoParser.ESTIMATED_DOCUMENT_COUNT:
            case MongoParser.COUNT_DOCUMENTS:
            case MongoParser.DISTINCT:
            case MongoParser.AGGREGATE:
            case MongoParser.COLLECTION:
            case MongoParser.CREATE_COLLECTION:
            case MongoParser.COMMAND:
            case MongoParser.LIST_COLLECTIONS:
            case MongoParser.RENAME_COLLECTION:
            case MongoParser.DROP_COLLECTION:
            case MongoParser.DROP_DATABASE:
            case MongoParser.REMOVE_USER:
            case MongoParser.RUN_CURSOR_COMMAND:
            case MongoParser.STATS:
            case MongoParser.PROFILING_LEVEL:
            case MongoParser.SET_PROFILING_LEVEL:
            case MongoParser.ADMIN:
            case MongoParser.BUILD_INFO:
            case MongoParser.SERVER_INFO:
            case MongoParser.SERVER_STATUS:
            case MongoParser.PING:
            case MongoParser.VALIDATE_COLLECTION:
            case MongoParser.LIST_DATABASES:
            case MongoParser.REPL_SET_GET_STATUS:
            case MongoParser.OBJECT_ID:
            case MongoParser.DATE:
            case MongoParser.UUID:
            case MongoParser.MIN_KEY:
            case MongoParser.MAX_KEY:
            case MongoParser.NUMBER_DECIMAL:
            case MongoParser.NUMBER_INT:
            case MongoParser.NUMBER_LONG:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1308;
                this.reservedKeyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public value(): ValueContext {
        let localContext = new ValueContext(this.context, this.state);
        this.enterRule(localContext, 358, MongoParser.RULE_value);
        try {
            this.state = 1325;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1311;
                this.string_();
                }
                break;
            case MongoParser.NUMBER:
            case MongoParser.NUMERIC_LITERAL:
            case MongoParser.SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1312;
                this.number_();
                }
                break;
            case MongoParser.LBRACE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1313;
                this.object();
                }
                break;
            case MongoParser.LBRACKET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1314;
                this.array();
                }
                break;
            case MongoParser.TRUE:
            case MongoParser.FALSE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1315;
                this.boolean_();
                }
                break;
            case MongoParser.NULL:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1316;
                this.null_();
                }
                break;
            case MongoParser.OBJECT_ID:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1317;
                this.objectIdFunction();
                }
                break;
            case MongoParser.DATE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1318;
                this.dateFunction();
                }
                break;
            case MongoParser.UUID:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1319;
                this.uuidFunction();
                }
                break;
            case MongoParser.MIN_KEY:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1320;
                this.minKeyFunction();
                }
                break;
            case MongoParser.MAX_KEY:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1321;
                this.maxKeyFunction();
                }
                break;
            case MongoParser.NUMBER_INT:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1322;
                this.numberIntFunction();
                }
                break;
            case MongoParser.NUMBER_DECIMAL:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1323;
                this.numberDecimalFunction();
                }
                break;
            case MongoParser.NUMBER_LONG:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1324;
                this.numberLongFunction();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberLongFunction(): NumberLongFunctionContext {
        let localContext = new NumberLongFunctionContext(this.context, this.state);
        this.enterRule(localContext, 360, MongoParser.RULE_numberLongFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1327;
            this.match(MongoParser.NUMBER_LONG);
            this.state = 1328;
            this.match(MongoParser.LPAREN);
            this.state = 1329;
            this.numberLongFunctionArgument1();
            {
            this.state = 1330;
            this.match(MongoParser.COMMA);
            this.state = 1331;
            this.numberLongFunctionArgument2();
            }
            this.state = 1333;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberLongFunctionArgument1(): NumberLongFunctionArgument1Context {
        let localContext = new NumberLongFunctionArgument1Context(this.context, this.state);
        this.enterRule(localContext, 362, MongoParser.RULE_numberLongFunctionArgument1);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1335;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberLongFunctionArgument2(): NumberLongFunctionArgument2Context {
        let localContext = new NumberLongFunctionArgument2Context(this.context, this.state);
        this.enterRule(localContext, 364, MongoParser.RULE_numberLongFunctionArgument2);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1337;
            this.number_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberDecimalFunction(): NumberDecimalFunctionContext {
        let localContext = new NumberDecimalFunctionContext(this.context, this.state);
        this.enterRule(localContext, 366, MongoParser.RULE_numberDecimalFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1339;
            this.match(MongoParser.NUMBER_DECIMAL);
            this.state = 1340;
            this.match(MongoParser.LPAREN);
            this.state = 1341;
            this.numberDecimalFunctionArgument();
            this.state = 1342;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberDecimalFunctionArgument(): NumberDecimalFunctionArgumentContext {
        let localContext = new NumberDecimalFunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 368, MongoParser.RULE_numberDecimalFunctionArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1344;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberIntFunction(): NumberIntFunctionContext {
        let localContext = new NumberIntFunctionContext(this.context, this.state);
        this.enterRule(localContext, 370, MongoParser.RULE_numberIntFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1346;
            this.match(MongoParser.NUMBER_INT);
            this.state = 1347;
            this.match(MongoParser.LPAREN);
            this.state = 1348;
            this.numberIntFunctionArgument();
            this.state = 1349;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberIntFunctionArgument(): NumberIntFunctionArgumentContext {
        let localContext = new NumberIntFunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 372, MongoParser.RULE_numberIntFunctionArgument);
        try {
            this.state = 1353;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1351;
                this.string_();
                }
                break;
            case MongoParser.NUMBER:
            case MongoParser.NUMERIC_LITERAL:
            case MongoParser.SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1352;
                this.number_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public maxKeyFunction(): MaxKeyFunctionContext {
        let localContext = new MaxKeyFunctionContext(this.context, this.state);
        this.enterRule(localContext, 374, MongoParser.RULE_maxKeyFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1355;
            this.match(MongoParser.MAX_KEY);
            this.state = 1356;
            this.match(MongoParser.LPAREN);
            this.state = 1357;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public minKeyFunction(): MinKeyFunctionContext {
        let localContext = new MinKeyFunctionContext(this.context, this.state);
        this.enterRule(localContext, 376, MongoParser.RULE_minKeyFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1359;
            this.match(MongoParser.MIN_KEY);
            this.state = 1360;
            this.match(MongoParser.LPAREN);
            this.state = 1361;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uuidFunction(): UuidFunctionContext {
        let localContext = new UuidFunctionContext(this.context, this.state);
        this.enterRule(localContext, 378, MongoParser.RULE_uuidFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1363;
            this.match(MongoParser.UUID);
            this.state = 1364;
            this.match(MongoParser.LPAREN);
            this.state = 1366;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 1365;
                this.uuidFunctionArgument();
                }
            }

            this.state = 1368;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uuidFunctionArgument(): UuidFunctionArgumentContext {
        let localContext = new UuidFunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 380, MongoParser.RULE_uuidFunctionArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1370;
            this.string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public objectIdFunction(): ObjectIdFunctionContext {
        let localContext = new ObjectIdFunctionContext(this.context, this.state);
        this.enterRule(localContext, 382, MongoParser.RULE_objectIdFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1372;
            this.match(MongoParser.OBJECT_ID);
            this.state = 1373;
            this.match(MongoParser.LPAREN);
            this.state = 1374;
            this.objectIdFunctionArgument();
            this.state = 1375;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public objectIdFunctionArgument(): ObjectIdFunctionArgumentContext {
        let localContext = new ObjectIdFunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 384, MongoParser.RULE_objectIdFunctionArgument);
        try {
            this.state = 1379;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1377;
                this.string_();
                }
                break;
            case MongoParser.NUMBER:
            case MongoParser.NUMERIC_LITERAL:
            case MongoParser.SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1378;
                this.number_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dateFunction(): DateFunctionContext {
        let localContext = new DateFunctionContext(this.context, this.state);
        this.enterRule(localContext, 386, MongoParser.RULE_dateFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1381;
            this.match(MongoParser.DATE);
            this.state = 1382;
            this.match(MongoParser.LPAREN);
            this.state = 1384;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 81)) & ~0x1F) === 0 && ((1 << (_la - 81)) & 15) !== 0)) {
                {
                this.state = 1383;
                this.dateFunctionArgument();
                }
            }

            this.state = 1386;
            this.match(MongoParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dateFunctionArgument(): DateFunctionArgumentContext {
        let localContext = new DateFunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 388, MongoParser.RULE_dateFunctionArgument);
        try {
            this.state = 1390;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case MongoParser.STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1388;
                this.string_();
                }
                break;
            case MongoParser.NUMBER:
            case MongoParser.NUMERIC_LITERAL:
            case MongoParser.SYMBOL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1389;
                this.number_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public string_(): StringContext {
        let localContext = new StringContext(this.context, this.state);
        this.enterRule(localContext, 390, MongoParser.RULE_string);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1392;
            this.match(MongoParser.STRING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public null_(): NullContext {
        let localContext = new NullContext(this.context, this.state);
        this.enterRule(localContext, 392, MongoParser.RULE_null);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1394;
            this.match(MongoParser.NULL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public array(): ArrayContext {
        let localContext = new ArrayContext(this.context, this.state);
        this.enterRule(localContext, 394, MongoParser.RULE_array);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1412;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 96, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1396;
                this.match(MongoParser.LBRACKET);
                this.state = 1397;
                this.value();
                this.state = 1402;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 94, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1398;
                        this.match(MongoParser.COMMA);
                        this.state = 1399;
                        this.value();
                        }
                        }
                    }
                    this.state = 1404;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 94, this.context);
                }
                this.state = 1406;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75) {
                    {
                    this.state = 1405;
                    this.match(MongoParser.COMMA);
                    }
                }

                this.state = 1408;
                this.match(MongoParser.RBRACKET);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1410;
                this.match(MongoParser.LBRACKET);
                this.state = 1411;
                this.match(MongoParser.RBRACKET);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 396, MongoParser.RULE_number);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1415;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 84) {
                {
                this.state = 1414;
                this.match(MongoParser.SYMBOL);
                }
            }

            this.state = 1417;
            _la = this.tokenStream.LA(1);
            if(!(_la === 82 || _la === 83)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public static readonly _serializedATN: number[] = [
        4,1,88,1420,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,1,0,3,0,400,8,0,1,0,1,0,1,1,1,1,3,1,406,8,1,1,
        1,1,1,1,1,1,1,3,1,412,8,1,1,2,1,2,3,2,416,8,2,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,
        4,438,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,3,6,455,8,6,1,7,1,7,1,7,1,7,1,7,3,7,462,8,7,1,7,1,7,1,8,1,
        8,1,9,1,9,1,10,1,10,1,10,3,10,473,8,10,1,10,1,10,1,11,1,11,1,12,
        1,12,1,12,3,12,482,8,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,3,14,
        491,8,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,3,16,500,8,16,1,16,1,
        16,1,17,1,17,1,18,1,18,1,18,3,18,509,8,18,1,18,1,18,1,19,1,19,1,
        20,1,20,1,20,3,20,518,8,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,
        22,1,22,3,22,529,8,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,
        25,3,25,540,8,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,3,27,549,8,27,
        1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,3,29,560,8,29,1,29,
        1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,32,3,32,573,8,32,
        1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,3,35,586,
        8,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,3,39,603,8,39,1,39,1,39,1,40,1,40,1,41,1,41,1,41,
        3,41,612,8,41,1,42,1,42,1,43,1,43,1,43,3,43,619,8,43,1,43,1,43,1,
        44,1,44,1,45,1,45,1,45,1,45,1,45,3,45,630,8,45,1,45,1,45,1,46,1,
        46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,645,8,48,1,
        48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,3,
        52,660,8,52,3,52,662,8,52,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,
        1,55,1,55,1,55,3,55,675,8,55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,
        1,58,1,58,1,58,1,58,3,58,688,8,58,1,58,1,58,1,59,1,59,1,60,1,60,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,63,
        1,63,1,63,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,3,65,741,8,65,1,66,1,66,1,66,1,66,
        1,66,3,66,748,8,66,3,66,750,8,66,1,66,1,66,3,66,754,8,66,1,67,1,
        67,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,767,8,69,3,
        69,769,8,69,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,
        73,1,73,1,73,3,73,784,8,73,3,73,786,8,73,1,73,1,73,1,74,1,74,1,75,
        1,75,1,76,1,76,1,76,3,76,797,8,76,1,76,1,76,1,77,1,77,1,78,1,78,
        1,78,3,78,806,8,78,1,78,1,78,1,79,1,79,1,80,1,80,1,80,1,80,1,80,
        3,80,817,8,80,1,80,1,80,1,81,1,81,1,82,1,82,1,82,1,82,1,82,5,82,
        828,8,82,10,82,12,82,831,9,82,1,82,3,82,834,8,82,1,82,1,82,3,82,
        838,8,82,1,83,1,83,1,84,1,84,1,84,3,84,845,8,84,1,84,1,84,1,85,1,
        85,1,86,1,86,1,86,3,86,854,8,86,1,86,1,86,1,87,1,87,1,88,1,88,1,
        88,3,88,863,8,88,1,88,1,88,1,89,1,89,1,90,1,90,1,90,1,90,1,90,3,
        90,874,8,90,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,1,93,1,93,1,
        93,3,93,887,8,93,1,93,1,93,1,94,1,94,1,95,1,95,1,96,1,96,1,96,1,
        96,1,96,3,96,900,8,96,1,96,1,96,1,97,1,97,1,98,1,98,1,98,3,98,909,
        8,98,1,99,1,99,1,99,3,99,914,8,99,1,99,1,99,1,100,1,100,1,101,1,
        101,1,101,3,101,923,8,101,1,101,1,101,1,102,1,102,1,103,1,103,1,
        103,1,103,1,103,3,103,934,8,103,1,103,1,103,1,104,1,104,1,105,1,
        105,1,106,1,106,1,106,1,106,1,106,3,106,947,8,106,3,106,949,8,106,
        1,106,1,106,1,107,1,107,1,108,1,108,1,109,1,109,1,109,1,109,1,109,
        3,109,962,8,109,3,109,964,8,109,1,109,1,109,1,110,1,110,1,111,1,
        111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,979,8,112,1,
        112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,3,116,996,8,116,1,116,1,116,1,117,1,117,
        1,118,1,118,3,118,1004,8,118,1,119,1,119,1,120,1,120,1,120,1,120,
        1,120,1,120,1,120,3,120,1015,8,120,1,120,1,120,1,121,1,121,1,122,
        1,122,3,122,1023,8,122,1,123,1,123,1,124,1,124,1,124,1,124,1,124,
        3,124,1032,8,124,1,124,1,124,1,125,1,125,1,126,1,126,1,127,1,127,
        1,127,1,127,1,127,3,127,1045,8,127,1,127,1,127,1,128,1,128,1,128,
        1,128,5,128,1053,8,128,10,128,12,128,1056,9,128,1,128,3,128,1059,
        8,128,1,128,1,128,1,129,1,129,1,130,1,130,1,130,1,130,1,130,3,130,
        1070,8,130,1,130,1,130,1,131,1,131,1,132,1,132,1,133,1,133,3,133,
        1080,8,133,1,134,1,134,1,134,1,134,1,134,1,134,1,134,3,134,1089,
        8,134,1,134,1,134,1,135,1,135,1,136,1,136,1,137,1,137,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,3,138,1106,8,138,1,138,1,138,1,139,
        1,139,1,140,1,140,1,141,1,141,1,142,1,142,1,142,1,142,1,142,3,142,
        1121,8,142,1,142,1,142,1,143,1,143,1,144,1,144,1,145,1,145,1,145,
        1,145,1,145,3,145,1134,8,145,3,145,1136,8,145,1,145,1,145,1,146,
        1,146,1,147,1,147,1,148,1,148,1,148,1,148,1,148,3,148,1149,8,148,
        3,148,1151,8,148,1,148,1,148,5,148,1155,8,148,10,148,12,148,1158,
        9,148,1,148,3,148,1161,8,148,1,149,1,149,1,150,1,150,1,151,1,151,
        1,151,1,151,3,151,1171,8,151,1,151,1,151,1,152,1,152,1,152,3,152,
        1178,8,152,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,
        1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,3,153,1198,
        8,153,1,154,1,154,1,154,1,154,1,154,1,155,1,155,1,156,1,156,1,156,
        1,156,1,156,1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,159,1,159,
        1,160,1,160,1,160,1,160,1,160,1,161,1,161,1,162,1,162,1,162,1,162,
        1,162,1,163,1,163,1,164,1,164,1,164,1,164,1,164,1,165,1,165,3,165,
        1242,8,165,1,166,1,166,1,166,1,166,1,166,1,167,1,167,1,168,1,168,
        1,168,1,168,1,168,1,169,1,169,1,170,1,170,1,170,1,170,1,170,3,170,
        1263,8,170,1,170,1,170,1,171,3,171,1268,8,171,1,172,1,172,1,172,
        3,172,1273,8,172,1,173,1,173,1,174,1,174,1,174,1,174,5,174,1281,
        8,174,10,174,12,174,1284,9,174,1,174,3,174,1287,8,174,1,174,1,174,
        1,174,1,174,3,174,1293,8,174,1,175,1,175,1,175,1,175,1,176,1,176,
        1,177,1,177,1,177,1,177,1,177,3,177,1306,8,177,1,178,1,178,3,178,
        1310,8,178,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
        1,179,1,179,1,179,1,179,1,179,3,179,1326,8,179,1,180,1,180,1,180,
        1,180,1,180,1,180,1,180,1,180,1,181,1,181,1,182,1,182,1,183,1,183,
        1,183,1,183,1,183,1,184,1,184,1,185,1,185,1,185,1,185,1,185,1,186,
        1,186,3,186,1354,8,186,1,187,1,187,1,187,1,187,1,188,1,188,1,188,
        1,188,1,189,1,189,1,189,3,189,1367,8,189,1,189,1,189,1,190,1,190,
        1,191,1,191,1,191,1,191,1,191,1,192,1,192,3,192,1380,8,192,1,193,
        1,193,1,193,3,193,1385,8,193,1,193,1,193,1,194,1,194,3,194,1391,
        8,194,1,195,1,195,1,196,1,196,1,197,1,197,1,197,1,197,5,197,1401,
        8,197,10,197,12,197,1404,9,197,1,197,3,197,1407,8,197,1,197,1,197,
        1,197,1,197,3,197,1413,8,197,1,198,3,198,1416,8,198,1,198,1,198,
        1,198,0,0,199,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
        312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
        344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
        376,378,380,382,384,386,388,390,392,394,396,0,3,1,0,1,67,1,0,78,
        79,1,0,82,83,1391,0,399,1,0,0,0,2,411,1,0,0,0,4,415,1,0,0,0,6,417,
        1,0,0,0,8,437,1,0,0,0,10,439,1,0,0,0,12,454,1,0,0,0,14,456,1,0,0,
        0,16,465,1,0,0,0,18,467,1,0,0,0,20,469,1,0,0,0,22,476,1,0,0,0,24,
        478,1,0,0,0,26,485,1,0,0,0,28,487,1,0,0,0,30,494,1,0,0,0,32,496,
        1,0,0,0,34,503,1,0,0,0,36,505,1,0,0,0,38,512,1,0,0,0,40,514,1,0,
        0,0,42,521,1,0,0,0,44,523,1,0,0,0,46,532,1,0,0,0,48,534,1,0,0,0,
        50,536,1,0,0,0,52,543,1,0,0,0,54,545,1,0,0,0,56,552,1,0,0,0,58,554,
        1,0,0,0,60,563,1,0,0,0,62,565,1,0,0,0,64,567,1,0,0,0,66,576,1,0,
        0,0,68,578,1,0,0,0,70,580,1,0,0,0,72,589,1,0,0,0,74,591,1,0,0,0,
        76,593,1,0,0,0,78,595,1,0,0,0,80,606,1,0,0,0,82,611,1,0,0,0,84,613,
        1,0,0,0,86,615,1,0,0,0,88,622,1,0,0,0,90,624,1,0,0,0,92,633,1,0,
        0,0,94,635,1,0,0,0,96,637,1,0,0,0,98,648,1,0,0,0,100,650,1,0,0,0,
        102,652,1,0,0,0,104,654,1,0,0,0,106,665,1,0,0,0,108,667,1,0,0,0,
        110,669,1,0,0,0,112,678,1,0,0,0,114,680,1,0,0,0,116,682,1,0,0,0,
        118,691,1,0,0,0,120,693,1,0,0,0,122,695,1,0,0,0,124,702,1,0,0,0,
        126,704,1,0,0,0,128,710,1,0,0,0,130,740,1,0,0,0,132,742,1,0,0,0,
        134,755,1,0,0,0,136,757,1,0,0,0,138,759,1,0,0,0,140,772,1,0,0,0,
        142,774,1,0,0,0,144,776,1,0,0,0,146,778,1,0,0,0,148,789,1,0,0,0,
        150,791,1,0,0,0,152,793,1,0,0,0,154,800,1,0,0,0,156,802,1,0,0,0,
        158,809,1,0,0,0,160,811,1,0,0,0,162,820,1,0,0,0,164,837,1,0,0,0,
        166,839,1,0,0,0,168,841,1,0,0,0,170,848,1,0,0,0,172,850,1,0,0,0,
        174,857,1,0,0,0,176,859,1,0,0,0,178,866,1,0,0,0,180,868,1,0,0,0,
        182,877,1,0,0,0,184,879,1,0,0,0,186,881,1,0,0,0,188,890,1,0,0,0,
        190,892,1,0,0,0,192,894,1,0,0,0,194,903,1,0,0,0,196,908,1,0,0,0,
        198,910,1,0,0,0,200,917,1,0,0,0,202,919,1,0,0,0,204,926,1,0,0,0,
        206,928,1,0,0,0,208,937,1,0,0,0,210,939,1,0,0,0,212,941,1,0,0,0,
        214,952,1,0,0,0,216,954,1,0,0,0,218,956,1,0,0,0,220,967,1,0,0,0,
        222,969,1,0,0,0,224,971,1,0,0,0,226,982,1,0,0,0,228,984,1,0,0,0,
        230,986,1,0,0,0,232,988,1,0,0,0,234,999,1,0,0,0,236,1003,1,0,0,0,
        238,1005,1,0,0,0,240,1007,1,0,0,0,242,1018,1,0,0,0,244,1022,1,0,
        0,0,246,1024,1,0,0,0,248,1026,1,0,0,0,250,1035,1,0,0,0,252,1037,
        1,0,0,0,254,1039,1,0,0,0,256,1048,1,0,0,0,258,1062,1,0,0,0,260,1064,
        1,0,0,0,262,1073,1,0,0,0,264,1075,1,0,0,0,266,1079,1,0,0,0,268,1081,
        1,0,0,0,270,1092,1,0,0,0,272,1094,1,0,0,0,274,1096,1,0,0,0,276,1098,
        1,0,0,0,278,1109,1,0,0,0,280,1111,1,0,0,0,282,1113,1,0,0,0,284,1115,
        1,0,0,0,286,1124,1,0,0,0,288,1126,1,0,0,0,290,1128,1,0,0,0,292,1139,
        1,0,0,0,294,1141,1,0,0,0,296,1143,1,0,0,0,298,1162,1,0,0,0,300,1164,
        1,0,0,0,302,1166,1,0,0,0,304,1177,1,0,0,0,306,1197,1,0,0,0,308,1199,
        1,0,0,0,310,1204,1,0,0,0,312,1206,1,0,0,0,314,1211,1,0,0,0,316,1213,
        1,0,0,0,318,1218,1,0,0,0,320,1220,1,0,0,0,322,1225,1,0,0,0,324,1227,
        1,0,0,0,326,1232,1,0,0,0,328,1234,1,0,0,0,330,1241,1,0,0,0,332,1243,
        1,0,0,0,334,1248,1,0,0,0,336,1250,1,0,0,0,338,1255,1,0,0,0,340,1257,
        1,0,0,0,342,1267,1,0,0,0,344,1272,1,0,0,0,346,1274,1,0,0,0,348,1292,
        1,0,0,0,350,1294,1,0,0,0,352,1298,1,0,0,0,354,1305,1,0,0,0,356,1309,
        1,0,0,0,358,1325,1,0,0,0,360,1327,1,0,0,0,362,1335,1,0,0,0,364,1337,
        1,0,0,0,366,1339,1,0,0,0,368,1344,1,0,0,0,370,1346,1,0,0,0,372,1353,
        1,0,0,0,374,1355,1,0,0,0,376,1359,1,0,0,0,378,1363,1,0,0,0,380,1370,
        1,0,0,0,382,1372,1,0,0,0,384,1379,1,0,0,0,386,1381,1,0,0,0,388,1390,
        1,0,0,0,390,1392,1,0,0,0,392,1394,1,0,0,0,394,1412,1,0,0,0,396,1415,
        1,0,0,0,398,400,3,2,1,0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,
        1,0,0,0,401,402,5,0,0,1,402,1,1,0,0,0,403,405,3,4,2,0,404,406,5,
        76,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,412,1,0,0,0,407,408,3,
        4,2,0,408,409,5,76,0,0,409,410,3,2,1,0,410,412,1,0,0,0,411,403,1,
        0,0,0,411,407,1,0,0,0,412,3,1,0,0,0,413,416,3,126,63,0,414,416,3,
        6,3,0,415,413,1,0,0,0,415,414,1,0,0,0,416,5,1,0,0,0,417,418,5,1,
        0,0,418,419,5,77,0,0,419,420,3,8,4,0,420,7,1,0,0,0,421,438,3,122,
        61,0,422,438,3,116,58,0,423,438,3,110,55,0,424,438,3,132,66,0,425,
        438,3,104,52,0,426,438,3,96,48,0,427,438,3,90,45,0,428,438,3,86,
        43,0,429,438,3,78,39,0,430,438,3,70,35,0,431,438,3,64,32,0,432,438,
        3,58,29,0,433,438,3,54,27,0,434,438,3,50,25,0,435,438,3,44,22,0,
        436,438,3,10,5,0,437,421,1,0,0,0,437,422,1,0,0,0,437,423,1,0,0,0,
        437,424,1,0,0,0,437,425,1,0,0,0,437,426,1,0,0,0,437,427,1,0,0,0,
        437,428,1,0,0,0,437,429,1,0,0,0,437,430,1,0,0,0,437,431,1,0,0,0,
        437,432,1,0,0,0,437,433,1,0,0,0,437,434,1,0,0,0,437,435,1,0,0,0,
        437,436,1,0,0,0,438,9,1,0,0,0,439,440,5,52,0,0,440,441,5,70,0,0,
        441,442,5,71,0,0,442,443,5,77,0,0,443,444,3,12,6,0,444,11,1,0,0,
        0,445,455,3,110,55,0,446,455,3,70,35,0,447,455,3,40,20,0,448,455,
        3,36,18,0,449,455,3,20,10,0,450,455,3,24,12,0,451,455,3,28,14,0,
        452,455,3,32,16,0,453,455,3,14,7,0,454,445,1,0,0,0,454,446,1,0,0,
        0,454,447,1,0,0,0,454,448,1,0,0,0,454,449,1,0,0,0,454,450,1,0,0,
        0,454,451,1,0,0,0,454,452,1,0,0,0,454,453,1,0,0,0,455,13,1,0,0,0,
        456,457,5,57,0,0,457,458,5,70,0,0,458,461,3,16,8,0,459,460,5,75,
        0,0,460,462,3,18,9,0,461,459,1,0,0,0,461,462,1,0,0,0,462,463,1,0,
        0,0,463,464,5,71,0,0,464,15,1,0,0,0,465,466,3,390,195,0,466,17,1,
        0,0,0,467,468,3,348,174,0,468,19,1,0,0,0,469,470,5,55,0,0,470,472,
        5,70,0,0,471,473,3,22,11,0,472,471,1,0,0,0,472,473,1,0,0,0,473,474,
        1,0,0,0,474,475,5,71,0,0,475,21,1,0,0,0,476,477,3,348,174,0,477,
        23,1,0,0,0,478,479,5,56,0,0,479,481,5,70,0,0,480,482,3,26,13,0,481,
        480,1,0,0,0,481,482,1,0,0,0,482,483,1,0,0,0,483,484,5,71,0,0,484,
        25,1,0,0,0,485,486,3,348,174,0,486,27,1,0,0,0,487,488,5,58,0,0,488,
        490,5,70,0,0,489,491,3,30,15,0,490,489,1,0,0,0,490,491,1,0,0,0,491,
        492,1,0,0,0,492,493,5,71,0,0,493,29,1,0,0,0,494,495,3,348,174,0,
        495,31,1,0,0,0,496,497,5,59,0,0,497,499,5,70,0,0,498,500,3,34,17,
        0,499,498,1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,502,5,71,0,
        0,502,33,1,0,0,0,503,504,3,348,174,0,504,35,1,0,0,0,505,506,5,54,
        0,0,506,508,5,70,0,0,507,509,3,38,19,0,508,507,1,0,0,0,508,509,1,
        0,0,0,509,510,1,0,0,0,510,511,5,71,0,0,511,37,1,0,0,0,512,513,3,
        348,174,0,513,39,1,0,0,0,514,515,5,53,0,0,515,517,5,70,0,0,516,518,
        3,42,21,0,517,516,1,0,0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,520,
        5,71,0,0,520,41,1,0,0,0,521,522,3,348,174,0,522,43,1,0,0,0,523,524,
        5,51,0,0,524,525,5,70,0,0,525,528,3,46,23,0,526,527,5,75,0,0,527,
        529,3,48,24,0,528,526,1,0,0,0,528,529,1,0,0,0,529,530,1,0,0,0,530,
        531,5,71,0,0,531,45,1,0,0,0,532,533,3,390,195,0,533,47,1,0,0,0,534,
        535,3,348,174,0,535,49,1,0,0,0,536,537,5,50,0,0,537,539,5,70,0,0,
        538,540,3,52,26,0,539,538,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,
        0,541,542,5,71,0,0,542,51,1,0,0,0,543,544,3,348,174,0,544,53,1,0,
        0,0,545,546,5,49,0,0,546,548,5,70,0,0,547,549,3,56,28,0,548,547,
        1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,0,550,551,5,71,0,0,551,55,
        1,0,0,0,552,553,3,348,174,0,553,57,1,0,0,0,554,555,5,48,0,0,555,
        556,5,70,0,0,556,559,3,60,30,0,557,558,5,75,0,0,558,560,3,62,31,
        0,559,557,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,562,5,71,0,
        0,562,59,1,0,0,0,563,564,3,348,174,0,564,61,1,0,0,0,565,566,3,348,
        174,0,566,63,1,0,0,0,567,568,5,35,0,0,568,569,5,70,0,0,569,572,3,
        66,33,0,570,571,5,75,0,0,571,573,3,68,34,0,572,570,1,0,0,0,572,573,
        1,0,0,0,573,574,1,0,0,0,574,575,5,71,0,0,575,65,1,0,0,0,576,577,
        3,124,62,0,577,67,1,0,0,0,578,579,3,348,174,0,579,69,1,0,0,0,580,
        581,5,47,0,0,581,582,5,70,0,0,582,585,3,72,36,0,583,584,5,75,0,0,
        584,586,3,76,38,0,585,583,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,
        0,587,588,5,71,0,0,588,71,1,0,0,0,589,590,3,74,37,0,590,73,1,0,0,
        0,591,592,3,390,195,0,592,75,1,0,0,0,593,594,3,348,174,0,594,77,
        1,0,0,0,595,596,5,28,0,0,596,597,5,70,0,0,597,598,3,84,42,0,598,
        599,5,75,0,0,599,602,3,82,41,0,600,601,5,75,0,0,601,603,3,80,40,
        0,602,600,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,605,5,71,0,
        0,605,79,1,0,0,0,606,607,3,348,174,0,607,81,1,0,0,0,608,612,3,390,
        195,0,609,612,3,348,174,0,610,612,3,394,197,0,611,608,1,0,0,0,611,
        609,1,0,0,0,611,610,1,0,0,0,612,83,1,0,0,0,613,614,3,390,195,0,614,
        85,1,0,0,0,615,616,5,46,0,0,616,618,5,70,0,0,617,619,3,88,44,0,618,
        617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,621,5,71,0,0,621,
        87,1,0,0,0,622,623,3,348,174,0,623,89,1,0,0,0,624,625,5,45,0,0,625,
        626,5,70,0,0,626,629,3,92,46,0,627,628,5,75,0,0,628,630,3,94,47,
        0,629,627,1,0,0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,632,5,71,0,
        0,632,91,1,0,0,0,633,634,3,124,62,0,634,93,1,0,0,0,635,636,3,348,
        174,0,636,95,1,0,0,0,637,638,5,44,0,0,638,639,5,70,0,0,639,640,3,
        98,49,0,640,641,5,75,0,0,641,644,3,100,50,0,642,643,5,75,0,0,643,
        645,3,102,51,0,644,642,1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,
        647,5,71,0,0,647,97,1,0,0,0,648,649,3,124,62,0,649,99,1,0,0,0,650,
        651,3,390,195,0,651,101,1,0,0,0,652,653,3,348,174,0,653,103,1,0,
        0,0,654,655,5,43,0,0,655,661,5,70,0,0,656,659,3,106,53,0,657,658,
        5,75,0,0,658,660,3,108,54,0,659,657,1,0,0,0,659,660,1,0,0,0,660,
        662,1,0,0,0,661,656,1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,
        664,5,71,0,0,664,105,1,0,0,0,665,666,3,348,174,0,666,107,1,0,0,0,
        667,668,3,348,174,0,668,109,1,0,0,0,669,670,5,42,0,0,670,671,5,70,
        0,0,671,674,3,112,56,0,672,673,5,75,0,0,673,675,3,114,57,0,674,672,
        1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,677,5,71,0,0,677,111,
        1,0,0,0,678,679,3,348,174,0,679,113,1,0,0,0,680,681,3,348,174,0,
        681,115,1,0,0,0,682,683,5,41,0,0,683,684,5,70,0,0,684,687,3,118,
        59,0,685,686,5,75,0,0,686,688,3,120,60,0,687,685,1,0,0,0,687,688,
        1,0,0,0,688,689,1,0,0,0,689,690,5,71,0,0,690,117,1,0,0,0,691,692,
        3,390,195,0,692,119,1,0,0,0,693,694,3,348,174,0,694,121,1,0,0,0,
        695,696,5,40,0,0,696,697,5,70,0,0,697,698,3,124,62,0,698,699,5,71,
        0,0,699,700,5,77,0,0,700,701,3,130,65,0,701,123,1,0,0,0,702,703,
        3,390,195,0,703,125,1,0,0,0,704,705,5,1,0,0,705,706,5,77,0,0,706,
        707,3,128,64,0,707,708,5,77,0,0,708,709,3,130,65,0,709,127,1,0,0,
        0,710,711,5,85,0,0,711,129,1,0,0,0,712,741,3,296,148,0,713,741,3,
        290,145,0,714,741,3,284,142,0,715,741,3,276,138,0,716,741,3,268,
        134,0,717,741,3,260,130,0,718,741,3,254,127,0,719,741,3,248,124,
        0,720,741,3,240,120,0,721,741,3,232,116,0,722,741,3,224,112,0,723,
        741,3,218,109,0,724,741,3,212,106,0,725,741,3,206,103,0,726,741,
        3,202,101,0,727,741,3,198,99,0,728,741,3,192,96,0,729,741,3,186,
        93,0,730,741,3,180,90,0,731,741,3,176,88,0,732,741,3,172,86,0,733,
        741,3,168,84,0,734,741,3,160,80,0,735,741,3,156,78,0,736,741,3,152,
        76,0,737,741,3,146,73,0,738,741,3,138,69,0,739,741,3,132,66,0,740,
        712,1,0,0,0,740,713,1,0,0,0,740,714,1,0,0,0,740,715,1,0,0,0,740,
        716,1,0,0,0,740,717,1,0,0,0,740,718,1,0,0,0,740,719,1,0,0,0,740,
        720,1,0,0,0,740,721,1,0,0,0,740,722,1,0,0,0,740,723,1,0,0,0,740,
        724,1,0,0,0,740,725,1,0,0,0,740,726,1,0,0,0,740,727,1,0,0,0,740,
        728,1,0,0,0,740,729,1,0,0,0,740,730,1,0,0,0,740,731,1,0,0,0,740,
        732,1,0,0,0,740,733,1,0,0,0,740,734,1,0,0,0,740,735,1,0,0,0,740,
        736,1,0,0,0,740,737,1,0,0,0,740,738,1,0,0,0,740,739,1,0,0,0,741,
        131,1,0,0,0,742,743,5,39,0,0,743,749,5,70,0,0,744,747,3,136,68,0,
        745,746,5,75,0,0,746,748,3,134,67,0,747,745,1,0,0,0,747,748,1,0,
        0,0,748,750,1,0,0,0,749,744,1,0,0,0,749,750,1,0,0,0,750,751,1,0,
        0,0,751,753,5,71,0,0,752,754,3,302,151,0,753,752,1,0,0,0,753,754,
        1,0,0,0,754,133,1,0,0,0,755,756,3,348,174,0,756,135,1,0,0,0,757,
        758,3,394,197,0,758,137,1,0,0,0,759,760,5,38,0,0,760,761,5,70,0,
        0,761,768,3,140,70,0,762,763,5,75,0,0,763,766,3,142,71,0,764,765,
        5,75,0,0,765,767,3,144,72,0,766,764,1,0,0,0,766,767,1,0,0,0,767,
        769,1,0,0,0,768,762,1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,
        771,5,71,0,0,771,139,1,0,0,0,772,773,3,390,195,0,773,141,1,0,0,0,
        774,775,3,348,174,0,775,143,1,0,0,0,776,777,3,348,174,0,777,145,
        1,0,0,0,778,779,5,37,0,0,779,785,5,70,0,0,780,783,3,150,75,0,781,
        782,5,75,0,0,782,784,3,148,74,0,783,781,1,0,0,0,783,784,1,0,0,0,
        784,786,1,0,0,0,785,780,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,
        787,788,5,71,0,0,788,147,1,0,0,0,789,790,3,348,174,0,790,149,1,0,
        0,0,791,792,3,348,174,0,792,151,1,0,0,0,793,794,5,36,0,0,794,796,
        5,70,0,0,795,797,3,154,77,0,796,795,1,0,0,0,796,797,1,0,0,0,797,
        798,1,0,0,0,798,799,5,71,0,0,799,153,1,0,0,0,800,801,3,348,174,0,
        801,155,1,0,0,0,802,803,5,35,0,0,803,805,5,70,0,0,804,806,3,158,
        79,0,805,804,1,0,0,0,805,806,1,0,0,0,806,807,1,0,0,0,807,808,5,71,
        0,0,808,157,1,0,0,0,809,810,3,348,174,0,810,159,1,0,0,0,811,812,
        5,34,0,0,812,813,5,70,0,0,813,816,3,164,82,0,814,815,5,75,0,0,815,
        817,3,162,81,0,816,814,1,0,0,0,816,817,1,0,0,0,817,818,1,0,0,0,818,
        819,5,71,0,0,819,161,1,0,0,0,820,821,3,348,174,0,821,163,1,0,0,0,
        822,838,3,166,83,0,823,824,5,68,0,0,824,829,3,166,83,0,825,826,5,
        75,0,0,826,828,3,166,83,0,827,825,1,0,0,0,828,831,1,0,0,0,829,827,
        1,0,0,0,829,830,1,0,0,0,830,833,1,0,0,0,831,829,1,0,0,0,832,834,
        5,75,0,0,833,832,1,0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,836,
        5,69,0,0,836,838,1,0,0,0,837,822,1,0,0,0,837,823,1,0,0,0,838,165,
        1,0,0,0,839,840,3,390,195,0,840,167,1,0,0,0,841,842,5,33,0,0,842,
        844,5,70,0,0,843,845,3,170,85,0,844,843,1,0,0,0,844,845,1,0,0,0,
        845,846,1,0,0,0,846,847,5,71,0,0,847,169,1,0,0,0,848,849,3,348,174,
        0,849,171,1,0,0,0,850,851,5,32,0,0,851,853,5,70,0,0,852,854,3,174,
        87,0,853,852,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,856,5,71,
        0,0,856,173,1,0,0,0,857,858,3,348,174,0,858,175,1,0,0,0,859,860,
        5,31,0,0,860,862,5,70,0,0,861,863,3,178,89,0,862,861,1,0,0,0,862,
        863,1,0,0,0,863,864,1,0,0,0,864,865,5,71,0,0,865,177,1,0,0,0,866,
        867,3,348,174,0,867,179,1,0,0,0,868,869,5,30,0,0,869,870,5,70,0,
        0,870,873,3,184,92,0,871,872,5,75,0,0,872,874,3,182,91,0,873,871,
        1,0,0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,876,5,71,0,0,876,181,
        1,0,0,0,877,878,3,348,174,0,878,183,1,0,0,0,879,880,3,390,195,0,
        880,185,1,0,0,0,881,882,5,29,0,0,882,883,5,70,0,0,883,886,3,190,
        95,0,884,885,5,75,0,0,885,887,3,188,94,0,886,884,1,0,0,0,886,887,
        1,0,0,0,887,888,1,0,0,0,888,889,5,71,0,0,889,187,1,0,0,0,890,891,
        3,348,174,0,891,189,1,0,0,0,892,893,3,394,197,0,893,191,1,0,0,0,
        894,895,5,28,0,0,895,896,5,70,0,0,896,899,3,196,98,0,897,898,5,75,
        0,0,898,900,3,194,97,0,899,897,1,0,0,0,899,900,1,0,0,0,900,901,1,
        0,0,0,901,902,5,71,0,0,902,193,1,0,0,0,903,904,3,348,174,0,904,195,
        1,0,0,0,905,909,3,390,195,0,906,909,3,348,174,0,907,909,3,394,197,
        0,908,905,1,0,0,0,908,906,1,0,0,0,908,907,1,0,0,0,909,197,1,0,0,
        0,910,911,5,27,0,0,911,913,5,70,0,0,912,914,3,200,100,0,913,912,
        1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,916,5,71,0,0,916,199,
        1,0,0,0,917,918,3,348,174,0,918,201,1,0,0,0,919,920,5,26,0,0,920,
        922,5,70,0,0,921,923,3,204,102,0,922,921,1,0,0,0,922,923,1,0,0,0,
        923,924,1,0,0,0,924,925,5,71,0,0,925,203,1,0,0,0,926,927,3,348,174,
        0,927,205,1,0,0,0,928,929,5,25,0,0,929,930,5,70,0,0,930,933,3,208,
        104,0,931,932,5,75,0,0,932,934,3,210,105,0,933,931,1,0,0,0,933,934,
        1,0,0,0,934,935,1,0,0,0,935,936,5,71,0,0,936,207,1,0,0,0,937,938,
        3,390,195,0,938,209,1,0,0,0,939,940,3,348,174,0,940,211,1,0,0,0,
        941,942,5,24,0,0,942,948,5,70,0,0,943,946,3,214,107,0,944,945,5,
        75,0,0,945,947,3,216,108,0,946,944,1,0,0,0,946,947,1,0,0,0,947,949,
        1,0,0,0,948,943,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,951,
        5,71,0,0,951,213,1,0,0,0,952,953,3,348,174,0,953,215,1,0,0,0,954,
        955,3,348,174,0,955,217,1,0,0,0,956,957,5,23,0,0,957,963,5,70,0,
        0,958,961,3,220,110,0,959,960,5,75,0,0,960,962,3,222,111,0,961,959,
        1,0,0,0,961,962,1,0,0,0,962,964,1,0,0,0,963,958,1,0,0,0,963,964,
        1,0,0,0,964,965,1,0,0,0,965,966,5,71,0,0,966,219,1,0,0,0,967,968,
        3,348,174,0,968,221,1,0,0,0,969,970,3,348,174,0,970,223,1,0,0,0,
        971,972,5,22,0,0,972,973,5,70,0,0,973,974,3,226,113,0,974,975,5,
        75,0,0,975,978,3,228,114,0,976,977,5,75,0,0,977,979,3,230,115,0,
        978,976,1,0,0,0,978,979,1,0,0,0,979,980,1,0,0,0,980,981,5,71,0,0,
        981,225,1,0,0,0,982,983,3,348,174,0,983,227,1,0,0,0,984,985,3,266,
        133,0,985,229,1,0,0,0,986,987,3,348,174,0,987,231,1,0,0,0,988,989,
        5,21,0,0,989,990,5,70,0,0,990,991,3,234,117,0,991,992,5,75,0,0,992,
        995,3,236,118,0,993,994,5,75,0,0,994,996,3,238,119,0,995,993,1,0,
        0,0,995,996,1,0,0,0,996,997,1,0,0,0,997,998,5,71,0,0,998,233,1,0,
        0,0,999,1000,3,348,174,0,1000,235,1,0,0,0,1001,1004,3,348,174,0,
        1002,1004,3,394,197,0,1003,1001,1,0,0,0,1003,1002,1,0,0,0,1004,237,
        1,0,0,0,1005,1006,3,348,174,0,1006,239,1,0,0,0,1007,1008,5,20,0,
        0,1008,1009,5,70,0,0,1009,1010,3,242,121,0,1010,1011,5,75,0,0,1011,
        1014,3,244,122,0,1012,1013,5,75,0,0,1013,1015,3,246,123,0,1014,1012,
        1,0,0,0,1014,1015,1,0,0,0,1015,1016,1,0,0,0,1016,1017,5,71,0,0,1017,
        241,1,0,0,0,1018,1019,3,348,174,0,1019,243,1,0,0,0,1020,1023,3,394,
        197,0,1021,1023,3,348,174,0,1022,1020,1,0,0,0,1022,1021,1,0,0,0,
        1023,245,1,0,0,0,1024,1025,3,348,174,0,1025,247,1,0,0,0,1026,1027,
        5,19,0,0,1027,1028,5,70,0,0,1028,1031,3,250,125,0,1029,1030,5,75,
        0,0,1030,1032,3,252,126,0,1031,1029,1,0,0,0,1031,1032,1,0,0,0,1032,
        1033,1,0,0,0,1033,1034,5,71,0,0,1034,249,1,0,0,0,1035,1036,3,394,
        197,0,1036,251,1,0,0,0,1037,1038,3,348,174,0,1038,253,1,0,0,0,1039,
        1040,5,18,0,0,1040,1041,5,70,0,0,1041,1044,3,256,128,0,1042,1043,
        5,75,0,0,1043,1045,3,258,129,0,1044,1042,1,0,0,0,1044,1045,1,0,0,
        0,1045,1046,1,0,0,0,1046,1047,5,71,0,0,1047,255,1,0,0,0,1048,1049,
        5,68,0,0,1049,1054,3,266,133,0,1050,1051,5,75,0,0,1051,1053,3,266,
        133,0,1052,1050,1,0,0,0,1053,1056,1,0,0,0,1054,1052,1,0,0,0,1054,
        1055,1,0,0,0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,1057,1059,5,75,
        0,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1060,1,0,0,0,1060,1061,
        5,69,0,0,1061,257,1,0,0,0,1062,1063,3,348,174,0,1063,259,1,0,0,0,
        1064,1065,5,17,0,0,1065,1066,5,70,0,0,1066,1069,3,262,131,0,1067,
        1068,5,75,0,0,1068,1070,3,264,132,0,1069,1067,1,0,0,0,1069,1070,
        1,0,0,0,1070,1071,1,0,0,0,1071,1072,5,71,0,0,1072,261,1,0,0,0,1073,
        1074,3,266,133,0,1074,263,1,0,0,0,1075,1076,3,348,174,0,1076,265,
        1,0,0,0,1077,1080,3,348,174,0,1078,1080,3,394,197,0,1079,1077,1,
        0,0,0,1079,1078,1,0,0,0,1080,267,1,0,0,0,1081,1082,5,6,0,0,1082,
        1083,5,70,0,0,1083,1084,3,270,135,0,1084,1085,5,75,0,0,1085,1088,
        3,272,136,0,1086,1087,5,75,0,0,1087,1089,3,274,137,0,1088,1086,1,
        0,0,0,1088,1089,1,0,0,0,1089,1090,1,0,0,0,1090,1091,5,71,0,0,1091,
        269,1,0,0,0,1092,1093,3,348,174,0,1093,271,1,0,0,0,1094,1095,3,348,
        174,0,1095,273,1,0,0,0,1096,1097,3,348,174,0,1097,275,1,0,0,0,1098,
        1099,5,5,0,0,1099,1100,5,70,0,0,1100,1101,3,278,139,0,1101,1102,
        5,75,0,0,1102,1105,3,280,140,0,1103,1104,5,75,0,0,1104,1106,3,282,
        141,0,1105,1103,1,0,0,0,1105,1106,1,0,0,0,1106,1107,1,0,0,0,1107,
        1108,5,71,0,0,1108,277,1,0,0,0,1109,1110,3,348,174,0,1110,279,1,
        0,0,0,1111,1112,3,348,174,0,1112,281,1,0,0,0,1113,1114,3,348,174,
        0,1114,283,1,0,0,0,1115,1116,5,4,0,0,1116,1117,5,70,0,0,1117,1120,
        3,286,143,0,1118,1119,5,75,0,0,1119,1121,3,288,144,0,1120,1118,1,
        0,0,0,1120,1121,1,0,0,0,1121,1122,1,0,0,0,1122,1123,5,71,0,0,1123,
        285,1,0,0,0,1124,1125,3,348,174,0,1125,287,1,0,0,0,1126,1127,3,348,
        174,0,1127,289,1,0,0,0,1128,1129,5,3,0,0,1129,1135,5,70,0,0,1130,
        1133,3,292,146,0,1131,1132,5,75,0,0,1132,1134,3,294,147,0,1133,1131,
        1,0,0,0,1133,1134,1,0,0,0,1134,1136,1,0,0,0,1135,1130,1,0,0,0,1135,
        1136,1,0,0,0,1136,1137,1,0,0,0,1137,1138,5,71,0,0,1138,291,1,0,0,
        0,1139,1140,3,348,174,0,1140,293,1,0,0,0,1141,1142,3,348,174,0,1142,
        295,1,0,0,0,1143,1144,5,2,0,0,1144,1150,5,70,0,0,1145,1148,3,298,
        149,0,1146,1147,5,75,0,0,1147,1149,3,300,150,0,1148,1146,1,0,0,0,
        1148,1149,1,0,0,0,1149,1151,1,0,0,0,1150,1145,1,0,0,0,1150,1151,
        1,0,0,0,1151,1152,1,0,0,0,1152,1156,5,71,0,0,1153,1155,3,306,153,
        0,1154,1153,1,0,0,0,1155,1158,1,0,0,0,1156,1154,1,0,0,0,1156,1157,
        1,0,0,0,1157,1160,1,0,0,0,1158,1156,1,0,0,0,1159,1161,3,302,151,
        0,1160,1159,1,0,0,0,1160,1161,1,0,0,0,1161,297,1,0,0,0,1162,1163,
        3,348,174,0,1163,299,1,0,0,0,1164,1165,3,348,174,0,1165,301,1,0,
        0,0,1166,1167,5,77,0,0,1167,1168,5,14,0,0,1168,1170,5,70,0,0,1169,
        1171,3,304,152,0,1170,1169,1,0,0,0,1170,1171,1,0,0,0,1171,1172,1,
        0,0,0,1172,1173,5,71,0,0,1173,303,1,0,0,0,1174,1178,3,390,195,0,
        1175,1178,3,352,176,0,1176,1178,3,348,174,0,1177,1174,1,0,0,0,1177,
        1175,1,0,0,0,1177,1176,1,0,0,0,1178,305,1,0,0,0,1179,1180,5,77,0,
        0,1180,1198,3,308,154,0,1181,1182,5,77,0,0,1182,1198,3,312,156,0,
        1183,1184,5,77,0,0,1184,1198,3,316,158,0,1185,1186,5,77,0,0,1186,
        1198,3,320,160,0,1187,1188,5,77,0,0,1188,1198,3,324,162,0,1189,1190,
        5,77,0,0,1190,1198,3,328,164,0,1191,1192,5,77,0,0,1192,1198,3,332,
        166,0,1193,1194,5,77,0,0,1194,1198,3,336,168,0,1195,1196,5,77,0,
        0,1196,1198,3,340,170,0,1197,1179,1,0,0,0,1197,1181,1,0,0,0,1197,
        1183,1,0,0,0,1197,1185,1,0,0,0,1197,1187,1,0,0,0,1197,1189,1,0,0,
        0,1197,1191,1,0,0,0,1197,1193,1,0,0,0,1197,1195,1,0,0,0,1198,307,
        1,0,0,0,1199,1200,5,16,0,0,1200,1201,5,70,0,0,1201,1202,3,310,155,
        0,1202,1203,5,71,0,0,1203,309,1,0,0,0,1204,1205,3,396,198,0,1205,
        311,1,0,0,0,1206,1207,5,13,0,0,1207,1208,5,70,0,0,1208,1209,3,314,
        157,0,1209,1210,5,71,0,0,1210,313,1,0,0,0,1211,1212,3,396,198,0,
        1212,315,1,0,0,0,1213,1214,5,9,0,0,1214,1215,5,70,0,0,1215,1216,
        3,318,159,0,1216,1217,5,71,0,0,1217,317,1,0,0,0,1218,1219,3,348,
        174,0,1219,319,1,0,0,0,1220,1221,5,10,0,0,1221,1222,5,70,0,0,1222,
        1223,3,322,161,0,1223,1224,5,71,0,0,1224,321,1,0,0,0,1225,1226,3,
        348,174,0,1226,323,1,0,0,0,1227,1228,5,11,0,0,1228,1229,5,70,0,0,
        1229,1230,3,326,163,0,1230,1231,5,71,0,0,1231,325,1,0,0,0,1232,1233,
        3,348,174,0,1233,327,1,0,0,0,1234,1235,5,15,0,0,1235,1236,5,70,0,
        0,1236,1237,3,330,165,0,1237,1238,5,71,0,0,1238,329,1,0,0,0,1239,
        1242,3,348,174,0,1240,1242,3,390,195,0,1241,1239,1,0,0,0,1241,1240,
        1,0,0,0,1242,331,1,0,0,0,1243,1244,5,8,0,0,1244,1245,5,70,0,0,1245,
        1246,3,334,167,0,1246,1247,5,71,0,0,1247,333,1,0,0,0,1248,1249,3,
        352,176,0,1249,335,1,0,0,0,1250,1251,5,7,0,0,1251,1252,5,70,0,0,
        1252,1253,3,338,169,0,1253,1254,5,71,0,0,1254,337,1,0,0,0,1255,1256,
        3,352,176,0,1256,339,1,0,0,0,1257,1258,5,12,0,0,1258,1259,5,70,0,
        0,1259,1262,3,342,171,0,1260,1261,5,75,0,0,1261,1263,3,344,172,0,
        1262,1260,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,1264,1265,
        5,71,0,0,1265,341,1,0,0,0,1266,1268,3,358,179,0,1267,1266,1,0,0,
        0,1267,1268,1,0,0,0,1268,343,1,0,0,0,1269,1273,3,396,198,0,1270,
        1273,3,390,195,0,1271,1273,3,348,174,0,1272,1269,1,0,0,0,1272,1270,
        1,0,0,0,1272,1271,1,0,0,0,1273,345,1,0,0,0,1274,1275,7,0,0,0,1275,
        347,1,0,0,0,1276,1277,5,72,0,0,1277,1282,3,350,175,0,1278,1279,5,
        75,0,0,1279,1281,3,350,175,0,1280,1278,1,0,0,0,1281,1284,1,0,0,0,
        1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,1286,1,0,0,0,1284,1282,
        1,0,0,0,1285,1287,5,75,0,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,
        1288,1,0,0,0,1288,1289,5,73,0,0,1289,1293,1,0,0,0,1290,1291,5,72,
        0,0,1291,1293,5,73,0,0,1292,1276,1,0,0,0,1292,1290,1,0,0,0,1293,
        349,1,0,0,0,1294,1295,3,354,177,0,1295,1296,5,74,0,0,1296,1297,3,
        358,179,0,1297,351,1,0,0,0,1298,1299,7,1,0,0,1299,353,1,0,0,0,1300,
        1306,3,390,195,0,1301,1306,3,356,178,0,1302,1306,5,83,0,0,1303,1306,
        3,352,176,0,1304,1306,3,392,196,0,1305,1300,1,0,0,0,1305,1301,1,
        0,0,0,1305,1302,1,0,0,0,1305,1303,1,0,0,0,1305,1304,1,0,0,0,1306,
        355,1,0,0,0,1307,1310,5,85,0,0,1308,1310,3,346,173,0,1309,1307,1,
        0,0,0,1309,1308,1,0,0,0,1310,357,1,0,0,0,1311,1326,3,390,195,0,1312,
        1326,3,396,198,0,1313,1326,3,348,174,0,1314,1326,3,394,197,0,1315,
        1326,3,352,176,0,1316,1326,3,392,196,0,1317,1326,3,382,191,0,1318,
        1326,3,386,193,0,1319,1326,3,378,189,0,1320,1326,3,376,188,0,1321,
        1326,3,374,187,0,1322,1326,3,370,185,0,1323,1326,3,366,183,0,1324,
        1326,3,360,180,0,1325,1311,1,0,0,0,1325,1312,1,0,0,0,1325,1313,1,
        0,0,0,1325,1314,1,0,0,0,1325,1315,1,0,0,0,1325,1316,1,0,0,0,1325,
        1317,1,0,0,0,1325,1318,1,0,0,0,1325,1319,1,0,0,0,1325,1320,1,0,0,
        0,1325,1321,1,0,0,0,1325,1322,1,0,0,0,1325,1323,1,0,0,0,1325,1324,
        1,0,0,0,1326,359,1,0,0,0,1327,1328,5,67,0,0,1328,1329,5,70,0,0,1329,
        1330,3,362,181,0,1330,1331,5,75,0,0,1331,1332,3,364,182,0,1332,1333,
        1,0,0,0,1333,1334,5,71,0,0,1334,361,1,0,0,0,1335,1336,3,390,195,
        0,1336,363,1,0,0,0,1337,1338,3,396,198,0,1338,365,1,0,0,0,1339,1340,
        5,65,0,0,1340,1341,5,70,0,0,1341,1342,3,368,184,0,1342,1343,5,71,
        0,0,1343,367,1,0,0,0,1344,1345,3,390,195,0,1345,369,1,0,0,0,1346,
        1347,5,66,0,0,1347,1348,5,70,0,0,1348,1349,3,372,186,0,1349,1350,
        5,71,0,0,1350,371,1,0,0,0,1351,1354,3,390,195,0,1352,1354,3,396,
        198,0,1353,1351,1,0,0,0,1353,1352,1,0,0,0,1354,373,1,0,0,0,1355,
        1356,5,64,0,0,1356,1357,5,70,0,0,1357,1358,5,71,0,0,1358,375,1,0,
        0,0,1359,1360,5,63,0,0,1360,1361,5,70,0,0,1361,1362,5,71,0,0,1362,
        377,1,0,0,0,1363,1364,5,62,0,0,1364,1366,5,70,0,0,1365,1367,3,380,
        190,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,0,0,0,1368,
        1369,5,71,0,0,1369,379,1,0,0,0,1370,1371,3,390,195,0,1371,381,1,
        0,0,0,1372,1373,5,60,0,0,1373,1374,5,70,0,0,1374,1375,3,384,192,
        0,1375,1376,5,71,0,0,1376,383,1,0,0,0,1377,1380,3,390,195,0,1378,
        1380,3,396,198,0,1379,1377,1,0,0,0,1379,1378,1,0,0,0,1380,385,1,
        0,0,0,1381,1382,5,61,0,0,1382,1384,5,70,0,0,1383,1385,3,388,194,
        0,1384,1383,1,0,0,0,1384,1385,1,0,0,0,1385,1386,1,0,0,0,1386,1387,
        5,71,0,0,1387,387,1,0,0,0,1388,1391,3,390,195,0,1389,1391,3,396,
        198,0,1390,1388,1,0,0,0,1390,1389,1,0,0,0,1391,389,1,0,0,0,1392,
        1393,5,81,0,0,1393,391,1,0,0,0,1394,1395,5,80,0,0,1395,393,1,0,0,
        0,1396,1397,5,68,0,0,1397,1402,3,358,179,0,1398,1399,5,75,0,0,1399,
        1401,3,358,179,0,1400,1398,1,0,0,0,1401,1404,1,0,0,0,1402,1400,1,
        0,0,0,1402,1403,1,0,0,0,1403,1406,1,0,0,0,1404,1402,1,0,0,0,1405,
        1407,5,75,0,0,1406,1405,1,0,0,0,1406,1407,1,0,0,0,1407,1408,1,0,
        0,0,1408,1409,5,69,0,0,1409,1413,1,0,0,0,1410,1411,5,68,0,0,1411,
        1413,5,69,0,0,1412,1396,1,0,0,0,1412,1410,1,0,0,0,1413,395,1,0,0,
        0,1414,1416,5,84,0,0,1415,1414,1,0,0,0,1415,1416,1,0,0,0,1416,1417,
        1,0,0,0,1417,1418,7,2,0,0,1418,397,1,0,0,0,98,399,405,411,415,437,
        454,461,472,481,490,499,508,517,528,539,548,559,572,585,602,611,
        618,629,644,659,661,674,687,740,747,749,753,766,768,783,785,796,
        805,816,829,833,837,844,853,862,873,886,899,908,913,922,933,946,
        948,961,963,978,995,1003,1014,1022,1031,1044,1054,1058,1069,1079,
        1088,1105,1120,1133,1135,1148,1150,1156,1160,1170,1177,1197,1241,
        1262,1267,1272,1282,1286,1292,1305,1309,1325,1353,1366,1379,1384,
        1390,1402,1406,1412,1415
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!MongoParser.__ATN) {
            MongoParser.__ATN = new antlr.ATNDeserializer().deserialize(MongoParser._serializedATN);
        }

        return MongoParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(MongoParser.literalNames, MongoParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return MongoParser.vocabulary;
    }

    private static readonly decisionsToDFA = MongoParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class RootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(MongoParser.EOF, 0)!;
    }
    public commands(): CommandsContext | null {
        return this.getRuleContext(0, CommandsContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_root;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitRoot) {
            return visitor.visitRoot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommandsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public command(): CommandContext {
        return this.getRuleContext(0, CommandContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SEMICOLON, 0);
    }
    public commands(): CommandsContext | null {
        return this.getRuleContext(0, CommandsContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_commands;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCommands) {
            return visitor.visitCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collectionOperation(): CollectionOperationContext | null {
        return this.getRuleContext(0, CollectionOperationContext);
    }
    public databaseOperation(): DatabaseOperationContext | null {
        return this.getRuleContext(0, DatabaseOperationContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_command;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCommand) {
            return visitor.visitCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseOperationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DB(): antlr.TerminalNode {
        return this.getToken(MongoParser.DB, 0)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DOT, 0)!;
    }
    public databaseMethod(): DatabaseMethodContext {
        return this.getRuleContext(0, DatabaseMethodContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseOperation;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseOperation) {
            return visitor.visitDatabaseOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public databaseCollectionMethod(): DatabaseCollectionMethodContext | null {
        return this.getRuleContext(0, DatabaseCollectionMethodContext);
    }
    public databaseCreateCollectionMethod(): DatabaseCreateCollectionMethodContext | null {
        return this.getRuleContext(0, DatabaseCreateCollectionMethodContext);
    }
    public databaseCommandMethod(): DatabaseCommandMethodContext | null {
        return this.getRuleContext(0, DatabaseCommandMethodContext);
    }
    public aggregateMethod(): AggregateMethodContext | null {
        return this.getRuleContext(0, AggregateMethodContext);
    }
    public databaseListCollectionsMethod(): DatabaseListCollectionsMethodContext | null {
        return this.getRuleContext(0, DatabaseListCollectionsMethodContext);
    }
    public databaseRenameCollectionMethod(): DatabaseRenameCollectionMethodContext | null {
        return this.getRuleContext(0, DatabaseRenameCollectionMethodContext);
    }
    public databaseDropCollectionMethod(): DatabaseDropCollectionMethodContext | null {
        return this.getRuleContext(0, DatabaseDropCollectionMethodContext);
    }
    public databaseDropDatabaseMethod(): DatabaseDropDatabaseMethodContext | null {
        return this.getRuleContext(0, DatabaseDropDatabaseMethodContext);
    }
    public databaseCreateIndexMethod(): DatabaseCreateIndexMethodContext | null {
        return this.getRuleContext(0, DatabaseCreateIndexMethodContext);
    }
    public databaseRemoveUserMethod(): DatabaseRemoveUserMethodContext | null {
        return this.getRuleContext(0, DatabaseRemoveUserMethodContext);
    }
    public databaseIndexInformationMethod(): DatabaseIndexInformationMethodContext | null {
        return this.getRuleContext(0, DatabaseIndexInformationMethodContext);
    }
    public databaseRunCursorCommandMethod(): DatabaseRunCursorCommandMethodContext | null {
        return this.getRuleContext(0, DatabaseRunCursorCommandMethodContext);
    }
    public databaseStatsMethod(): DatabaseStatsMethodContext | null {
        return this.getRuleContext(0, DatabaseStatsMethodContext);
    }
    public databaseProfilingLevelMethod(): DatabaseProfilingLevelMethodContext | null {
        return this.getRuleContext(0, DatabaseProfilingLevelMethodContext);
    }
    public databaseSetProfilingLevelMethod(): DatabaseSetProfilingLevelMethodContext | null {
        return this.getRuleContext(0, DatabaseSetProfilingLevelMethodContext);
    }
    public databaseAdminMethod(): DatabaseAdminMethodContext | null {
        return this.getRuleContext(0, DatabaseAdminMethodContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseMethod) {
            return visitor.visitDatabaseMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseAdminMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(MongoParser.ADMIN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DOT, 0)!;
    }
    public adminMethod(): AdminMethodContext {
        return this.getRuleContext(0, AdminMethodContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseAdminMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseAdminMethod) {
            return visitor.visitDatabaseAdminMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AdminMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public databaseCommandMethod(): DatabaseCommandMethodContext | null {
        return this.getRuleContext(0, DatabaseCommandMethodContext);
    }
    public databaseRemoveUserMethod(): DatabaseRemoveUserMethodContext | null {
        return this.getRuleContext(0, DatabaseRemoveUserMethodContext);
    }
    public buildInfoMethod(): BuildInfoMethodContext | null {
        return this.getRuleContext(0, BuildInfoMethodContext);
    }
    public serverInfoMethod(): ServerInfoMethodContext | null {
        return this.getRuleContext(0, ServerInfoMethodContext);
    }
    public serverStatusMethod(): ServerStatusMethodContext | null {
        return this.getRuleContext(0, ServerStatusMethodContext);
    }
    public pingMethod(): PingMethodContext | null {
        return this.getRuleContext(0, PingMethodContext);
    }
    public listDatabasesMethod(): ListDatabasesMethodContext | null {
        return this.getRuleContext(0, ListDatabasesMethodContext);
    }
    public replSetGetStatusMethod(): ReplSetGetStatusMethodContext | null {
        return this.getRuleContext(0, ReplSetGetStatusMethodContext);
    }
    public validateCollectionMethod(): ValidateCollectionMethodContext | null {
        return this.getRuleContext(0, ValidateCollectionMethodContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_adminMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitAdminMethod) {
            return visitor.visitAdminMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValidateCollectionMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALIDATE_COLLECTION(): antlr.TerminalNode {
        return this.getToken(MongoParser.VALIDATE_COLLECTION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public validateCollectionArgument1(): ValidateCollectionArgument1Context {
        return this.getRuleContext(0, ValidateCollectionArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public validateCollectionArgument2(): ValidateCollectionArgument2Context | null {
        return this.getRuleContext(0, ValidateCollectionArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_validateCollectionMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitValidateCollectionMethod) {
            return visitor.visitValidateCollectionMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValidateCollectionArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_validateCollectionArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitValidateCollectionArgument1) {
            return visitor.visitValidateCollectionArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValidateCollectionArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_validateCollectionArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitValidateCollectionArgument2) {
            return visitor.visitValidateCollectionArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerStatusMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SERVER_STATUS(): antlr.TerminalNode {
        return this.getToken(MongoParser.SERVER_STATUS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public serverStatusArgument(): ServerStatusArgumentContext | null {
        return this.getRuleContext(0, ServerStatusArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_serverStatusMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitServerStatusMethod) {
            return visitor.visitServerStatusMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerStatusArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_serverStatusArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitServerStatusArgument) {
            return visitor.visitServerStatusArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PingMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PING(): antlr.TerminalNode {
        return this.getToken(MongoParser.PING, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public pingArgument(): PingArgumentContext | null {
        return this.getRuleContext(0, PingArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_pingMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitPingMethod) {
            return visitor.visitPingMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PingArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_pingArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitPingArgument) {
            return visitor.visitPingArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListDatabasesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIST_DATABASES(): antlr.TerminalNode {
        return this.getToken(MongoParser.LIST_DATABASES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public listDatabasesArgument(): ListDatabasesArgumentContext | null {
        return this.getRuleContext(0, ListDatabasesArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_listDatabasesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitListDatabasesMethod) {
            return visitor.visitListDatabasesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListDatabasesArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_listDatabasesArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitListDatabasesArgument) {
            return visitor.visitListDatabasesArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplSetGetStatusMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPL_SET_GET_STATUS(): antlr.TerminalNode {
        return this.getToken(MongoParser.REPL_SET_GET_STATUS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public replSetGetStatusArgument(): ReplSetGetStatusArgumentContext | null {
        return this.getRuleContext(0, ReplSetGetStatusArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_replSetGetStatusMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReplSetGetStatusMethod) {
            return visitor.visitReplSetGetStatusMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplSetGetStatusArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_replSetGetStatusArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReplSetGetStatusArgument) {
            return visitor.visitReplSetGetStatusArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerInfoMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SERVER_INFO(): antlr.TerminalNode {
        return this.getToken(MongoParser.SERVER_INFO, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public serverInfoArgument(): ServerInfoArgumentContext | null {
        return this.getRuleContext(0, ServerInfoArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_serverInfoMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitServerInfoMethod) {
            return visitor.visitServerInfoMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ServerInfoArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_serverInfoArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitServerInfoArgument) {
            return visitor.visitServerInfoArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BuildInfoMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BUILD_INFO(): antlr.TerminalNode {
        return this.getToken(MongoParser.BUILD_INFO, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public buildInfoArgument(): BuildInfoArgumentContext | null {
        return this.getRuleContext(0, BuildInfoArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_buildInfoMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitBuildInfoMethod) {
            return visitor.visitBuildInfoMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BuildInfoArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_buildInfoArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitBuildInfoArgument) {
            return visitor.visitBuildInfoArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseSetProfilingLevelMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET_PROFILING_LEVEL(): antlr.TerminalNode {
        return this.getToken(MongoParser.SET_PROFILING_LEVEL, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseSetProfilingLevelArgument1(): DatabaseSetProfilingLevelArgument1Context {
        return this.getRuleContext(0, DatabaseSetProfilingLevelArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public databaseSetProfilingLevelArgument2(): DatabaseSetProfilingLevelArgument2Context | null {
        return this.getRuleContext(0, DatabaseSetProfilingLevelArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseSetProfilingLevelMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseSetProfilingLevelMethod) {
            return visitor.visitDatabaseSetProfilingLevelMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseSetProfilingLevelArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseSetProfilingLevelArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseSetProfilingLevelArgument1) {
            return visitor.visitDatabaseSetProfilingLevelArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseSetProfilingLevelArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseSetProfilingLevelArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseSetProfilingLevelArgument2) {
            return visitor.visitDatabaseSetProfilingLevelArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseProfilingLevelMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROFILING_LEVEL(): antlr.TerminalNode {
        return this.getToken(MongoParser.PROFILING_LEVEL, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public databaseProfilingLevelArgument(): DatabaseProfilingLevelArgumentContext | null {
        return this.getRuleContext(0, DatabaseProfilingLevelArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseProfilingLevelMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseProfilingLevelMethod) {
            return visitor.visitDatabaseProfilingLevelMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseProfilingLevelArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseProfilingLevelArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseProfilingLevelArgument) {
            return visitor.visitDatabaseProfilingLevelArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseStatsMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(MongoParser.STATS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public databaseStatsArgument(): DatabaseStatsArgumentContext | null {
        return this.getRuleContext(0, DatabaseStatsArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseStatsMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseStatsMethod) {
            return visitor.visitDatabaseStatsMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseStatsArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseStatsArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseStatsArgument) {
            return visitor.visitDatabaseStatsArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRunCursorCommandMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RUN_CURSOR_COMMAND(): antlr.TerminalNode {
        return this.getToken(MongoParser.RUN_CURSOR_COMMAND, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseRunCursorCommandArgument1(): DatabaseRunCursorCommandArgument1Context {
        return this.getRuleContext(0, DatabaseRunCursorCommandArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public databaseRunCursorCommandArgument2(): DatabaseRunCursorCommandArgument2Context | null {
        return this.getRuleContext(0, DatabaseRunCursorCommandArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRunCursorCommandMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRunCursorCommandMethod) {
            return visitor.visitDatabaseRunCursorCommandMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRunCursorCommandArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRunCursorCommandArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRunCursorCommandArgument1) {
            return visitor.visitDatabaseRunCursorCommandArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRunCursorCommandArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRunCursorCommandArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRunCursorCommandArgument2) {
            return visitor.visitDatabaseRunCursorCommandArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseIndexInformationMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX_INFORMATION(): antlr.TerminalNode {
        return this.getToken(MongoParser.INDEX_INFORMATION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseIndexInformationArgument1(): DatabaseIndexInformationArgument1Context {
        return this.getRuleContext(0, DatabaseIndexInformationArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public databaseIndexInformationArgument2(): DatabaseIndexInformationArgument2Context | null {
        return this.getRuleContext(0, DatabaseIndexInformationArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseIndexInformationMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseIndexInformationMethod) {
            return visitor.visitDatabaseIndexInformationMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseIndexInformationArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public quotedCollectionName(): QuotedCollectionNameContext {
        return this.getRuleContext(0, QuotedCollectionNameContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseIndexInformationArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseIndexInformationArgument1) {
            return visitor.visitDatabaseIndexInformationArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseIndexInformationArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseIndexInformationArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseIndexInformationArgument2) {
            return visitor.visitDatabaseIndexInformationArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRemoveUserMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REMOVE_USER(): antlr.TerminalNode {
        return this.getToken(MongoParser.REMOVE_USER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseRemoveUserArgument1(): DatabaseRemoveUserArgument1Context {
        return this.getRuleContext(0, DatabaseRemoveUserArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public databaseRemoveUserArgument2(): DatabaseRemoveUserArgument2Context | null {
        return this.getRuleContext(0, DatabaseRemoveUserArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRemoveUserMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRemoveUserMethod) {
            return visitor.visitDatabaseRemoveUserMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRemoveUserArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public quotedUsername(): QuotedUsernameContext {
        return this.getRuleContext(0, QuotedUsernameContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRemoveUserArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRemoveUserArgument1) {
            return visitor.visitDatabaseRemoveUserArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotedUsernameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_quotedUsername;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitQuotedUsername) {
            return visitor.visitQuotedUsername(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRemoveUserArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRemoveUserArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRemoveUserArgument2) {
            return visitor.visitDatabaseRemoveUserArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateIndexMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_INDEX(): antlr.TerminalNode {
        return this.getToken(MongoParser.CREATE_INDEX, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseCreateIndexArgument1(): DatabaseCreateIndexArgument1Context {
        return this.getRuleContext(0, DatabaseCreateIndexArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public databaseCreateIndexArgument2(): DatabaseCreateIndexArgument2Context {
        return this.getRuleContext(0, DatabaseCreateIndexArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public databaseCreateIndexArgument3(): DatabaseCreateIndexArgument3Context | null {
        return this.getRuleContext(0, DatabaseCreateIndexArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateIndexMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateIndexMethod) {
            return visitor.visitDatabaseCreateIndexMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateIndexArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateIndexArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateIndexArgument3) {
            return visitor.visitDatabaseCreateIndexArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateIndexArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateIndexArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateIndexArgument2) {
            return visitor.visitDatabaseCreateIndexArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateIndexArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateIndexArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateIndexArgument1) {
            return visitor.visitDatabaseCreateIndexArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseDropDatabaseMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_DATABASE(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP_DATABASE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public databaseDropDatabaseArgument(): DatabaseDropDatabaseArgumentContext | null {
        return this.getRuleContext(0, DatabaseDropDatabaseArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseDropDatabaseMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseDropDatabaseMethod) {
            return visitor.visitDatabaseDropDatabaseMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseDropDatabaseArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseDropDatabaseArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseDropDatabaseArgument) {
            return visitor.visitDatabaseDropDatabaseArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseDropCollectionMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_COLLECTION(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP_COLLECTION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseDropCollectionArgument1(): DatabaseDropCollectionArgument1Context {
        return this.getRuleContext(0, DatabaseDropCollectionArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public databaseDropCollectionArgument2(): DatabaseDropCollectionArgument2Context | null {
        return this.getRuleContext(0, DatabaseDropCollectionArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseDropCollectionMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseDropCollectionMethod) {
            return visitor.visitDatabaseDropCollectionMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseDropCollectionArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public quotedCollectionName(): QuotedCollectionNameContext {
        return this.getRuleContext(0, QuotedCollectionNameContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseDropCollectionArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseDropCollectionArgument1) {
            return visitor.visitDatabaseDropCollectionArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseDropCollectionArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseDropCollectionArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseDropCollectionArgument2) {
            return visitor.visitDatabaseDropCollectionArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRenameCollectionMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME_COLLECTION(): antlr.TerminalNode {
        return this.getToken(MongoParser.RENAME_COLLECTION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseRenameCollectionArgument1(): DatabaseRenameCollectionArgument1Context {
        return this.getRuleContext(0, DatabaseRenameCollectionArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public databaseRenameCollectionArgument2(): DatabaseRenameCollectionArgument2Context {
        return this.getRuleContext(0, DatabaseRenameCollectionArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public databaseRenameCollectionArgument3(): DatabaseRenameCollectionArgument3Context | null {
        return this.getRuleContext(0, DatabaseRenameCollectionArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRenameCollectionMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRenameCollectionMethod) {
            return visitor.visitDatabaseRenameCollectionMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRenameCollectionArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public quotedCollectionName(): QuotedCollectionNameContext {
        return this.getRuleContext(0, QuotedCollectionNameContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRenameCollectionArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRenameCollectionArgument1) {
            return visitor.visitDatabaseRenameCollectionArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRenameCollectionArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRenameCollectionArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRenameCollectionArgument2) {
            return visitor.visitDatabaseRenameCollectionArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseRenameCollectionArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseRenameCollectionArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseRenameCollectionArgument3) {
            return visitor.visitDatabaseRenameCollectionArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseListCollectionsMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIST_COLLECTIONS(): antlr.TerminalNode {
        return this.getToken(MongoParser.LIST_COLLECTIONS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public databaseListCollectionsArgument1(): DatabaseListCollectionsArgument1Context | null {
        return this.getRuleContext(0, DatabaseListCollectionsArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public databaseListCollectionsArgument2(): DatabaseListCollectionsArgument2Context | null {
        return this.getRuleContext(0, DatabaseListCollectionsArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseListCollectionsMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseListCollectionsMethod) {
            return visitor.visitDatabaseListCollectionsMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseListCollectionsArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseListCollectionsArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseListCollectionsArgument1) {
            return visitor.visitDatabaseListCollectionsArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseListCollectionsArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseListCollectionsArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseListCollectionsArgument2) {
            return visitor.visitDatabaseListCollectionsArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCommandMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMAND(): antlr.TerminalNode {
        return this.getToken(MongoParser.COMMAND, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseCommandArgument1(): DatabaseCommandArgument1Context {
        return this.getRuleContext(0, DatabaseCommandArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public databaseCommandArgument2(): DatabaseCommandArgument2Context | null {
        return this.getRuleContext(0, DatabaseCommandArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCommandMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCommandMethod) {
            return visitor.visitDatabaseCommandMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCommandArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCommandArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCommandArgument1) {
            return visitor.visitDatabaseCommandArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCommandArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCommandArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCommandArgument2) {
            return visitor.visitDatabaseCommandArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateCollectionMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_COLLECTION(): antlr.TerminalNode {
        return this.getToken(MongoParser.CREATE_COLLECTION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public databaseCreateCollectionArgument1(): DatabaseCreateCollectionArgument1Context {
        return this.getRuleContext(0, DatabaseCreateCollectionArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public databaseCreateCollectionArgument2(): DatabaseCreateCollectionArgument2Context | null {
        return this.getRuleContext(0, DatabaseCreateCollectionArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateCollectionMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateCollectionMethod) {
            return visitor.visitDatabaseCreateCollectionMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateCollectionArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateCollectionArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateCollectionArgument1) {
            return visitor.visitDatabaseCreateCollectionArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCreateCollectionArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCreateCollectionArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCreateCollectionArgument2) {
            return visitor.visitDatabaseCreateCollectionArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCollectionMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLECTION(): antlr.TerminalNode {
        return this.getToken(MongoParser.COLLECTION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public quotedCollectionName(): QuotedCollectionNameContext {
        return this.getRuleContext(0, QuotedCollectionNameContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DOT, 0)!;
    }
    public collectionMethod(): CollectionMethodContext {
        return this.getRuleContext(0, CollectionMethodContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_databaseCollectionMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseCollectionMethod) {
            return visitor.visitDatabaseCollectionMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotedCollectionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_quotedCollectionName;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitQuotedCollectionName) {
            return visitor.visitQuotedCollectionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionOperationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DB(): antlr.TerminalNode {
        return this.getToken(MongoParser.DB, 0)!;
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.DOT);
    	} else {
    		return this.getToken(MongoParser.DOT, i);
    	}
    }
    public collectionName(): CollectionNameContext {
        return this.getRuleContext(0, CollectionNameContext)!;
    }
    public collectionMethod(): CollectionMethodContext {
        return this.getRuleContext(0, CollectionMethodContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionOperation;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionOperation) {
            return visitor.visitCollectionOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(MongoParser.IDENTIFIER, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionName;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionName) {
            return visitor.visitCollectionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collectionFindMethod(): CollectionFindMethodContext | null {
        return this.getRuleContext(0, CollectionFindMethodContext);
    }
    public collectionFindOneMethod(): CollectionFindOneMethodContext | null {
        return this.getRuleContext(0, CollectionFindOneMethodContext);
    }
    public collectionFindOneAndDeleteMethod(): CollectionFindOneAndDeleteMethodContext | null {
        return this.getRuleContext(0, CollectionFindOneAndDeleteMethodContext);
    }
    public collectionFindOneAndReplaceMethod(): CollectionFindOneAndReplaceMethodContext | null {
        return this.getRuleContext(0, CollectionFindOneAndReplaceMethodContext);
    }
    public collectionFindOneAndUpdateMethod(): CollectionFindOneAndUpdateMethodContext | null {
        return this.getRuleContext(0, CollectionFindOneAndUpdateMethodContext);
    }
    public collectionInsertOneMethod(): CollectionInsertOneMethodContext | null {
        return this.getRuleContext(0, CollectionInsertOneMethodContext);
    }
    public collectionInsertManyMethod(): CollectionInsertManyMethodContext | null {
        return this.getRuleContext(0, CollectionInsertManyMethodContext);
    }
    public collectionBulkWriteMethod(): CollectionBulkWriteMethodContext | null {
        return this.getRuleContext(0, CollectionBulkWriteMethodContext);
    }
    public collectionUpdateOneMethod(): CollectionUpdateOneMethodContext | null {
        return this.getRuleContext(0, CollectionUpdateOneMethodContext);
    }
    public collectionUpdateManyMethod(): CollectionUpdateManyMethodContext | null {
        return this.getRuleContext(0, CollectionUpdateManyMethodContext);
    }
    public collectionReplaceOneMethod(): CollectionReplaceOneMethodContext | null {
        return this.getRuleContext(0, CollectionReplaceOneMethodContext);
    }
    public collectionDeleteOneMethod(): CollectionDeleteOneMethodContext | null {
        return this.getRuleContext(0, CollectionDeleteOneMethodContext);
    }
    public collectionDeleteManyMethod(): CollectionDeleteManyMethodContext | null {
        return this.getRuleContext(0, CollectionDeleteManyMethodContext);
    }
    public collectionRenameMethod(): CollectionRenameMethodContext | null {
        return this.getRuleContext(0, CollectionRenameMethodContext);
    }
    public collectionDropMethod(): CollectionDropMethodContext | null {
        return this.getRuleContext(0, CollectionDropMethodContext);
    }
    public collectionIsCappedMethod(): CollectionIsCappedMethodContext | null {
        return this.getRuleContext(0, CollectionIsCappedMethodContext);
    }
    public collectionCreateIndexMethod(): CollectionCreateIndexMethodContext | null {
        return this.getRuleContext(0, CollectionCreateIndexMethodContext);
    }
    public collectionCreateIndexesMethod(): CollectionCreateIndexesMethodContext | null {
        return this.getRuleContext(0, CollectionCreateIndexesMethodContext);
    }
    public collectionDropIndexMethod(): CollectionDropIndexMethodContext | null {
        return this.getRuleContext(0, CollectionDropIndexMethodContext);
    }
    public collectionDropIndexesMethod(): CollectionDropIndexesMethodContext | null {
        return this.getRuleContext(0, CollectionDropIndexesMethodContext);
    }
    public collectionListIndexesMethod(): CollectionListIndexesMethodContext | null {
        return this.getRuleContext(0, CollectionListIndexesMethodContext);
    }
    public collectionIndexesMethod(): CollectionIndexesMethodContext | null {
        return this.getRuleContext(0, CollectionIndexesMethodContext);
    }
    public collectionIndexExistsMethod(): CollectionIndexExistsMethodContext | null {
        return this.getRuleContext(0, CollectionIndexExistsMethodContext);
    }
    public collectionIndexInformationMethod(): CollectionIndexInformationMethodContext | null {
        return this.getRuleContext(0, CollectionIndexInformationMethodContext);
    }
    public collectionEstimatedDocumentCountMethod(): CollectionEstimatedDocumentCountMethodContext | null {
        return this.getRuleContext(0, CollectionEstimatedDocumentCountMethodContext);
    }
    public collectionCountDocumentsMethod(): CollectionCountDocumentsMethodContext | null {
        return this.getRuleContext(0, CollectionCountDocumentsMethodContext);
    }
    public collectionDistinctMethod(): CollectionDistinctMethodContext | null {
        return this.getRuleContext(0, CollectionDistinctMethodContext);
    }
    public aggregateMethod(): AggregateMethodContext | null {
        return this.getRuleContext(0, AggregateMethodContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionMethod) {
            return visitor.visitCollectionMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregateMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AGGREGATE(): antlr.TerminalNode {
        return this.getToken(MongoParser.AGGREGATE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public aggregateArgument1(): AggregateArgument1Context | null {
        return this.getRuleContext(0, AggregateArgument1Context);
    }
    public explainMethod(): ExplainMethodContext | null {
        return this.getRuleContext(0, ExplainMethodContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public aggregateArgument2(): AggregateArgument2Context | null {
        return this.getRuleContext(0, AggregateArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_aggregateMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitAggregateMethod) {
            return visitor.visitAggregateMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregateArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_aggregateArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitAggregateArgument2) {
            return visitor.visitAggregateArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregateArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array(): ArrayContext {
        return this.getRuleContext(0, ArrayContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_aggregateArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitAggregateArgument1) {
            return visitor.visitAggregateArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDistinctMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISTINCT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DISTINCT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionDistinctArgument1(): CollectionDistinctArgument1Context {
        return this.getRuleContext(0, CollectionDistinctArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public collectionDistinctArgument2(): CollectionDistinctArgument2Context | null {
        return this.getRuleContext(0, CollectionDistinctArgument2Context);
    }
    public collectionDistinctArgument3(): CollectionDistinctArgument3Context | null {
        return this.getRuleContext(0, CollectionDistinctArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDistinctMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDistinctMethod) {
            return visitor.visitCollectionDistinctMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDistinctArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDistinctArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDistinctArgument1) {
            return visitor.visitCollectionDistinctArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDistinctArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDistinctArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDistinctArgument2) {
            return visitor.visitCollectionDistinctArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDistinctArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDistinctArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDistinctArgument3) {
            return visitor.visitCollectionDistinctArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCountDocumentsMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COUNT_DOCUMENTS(): antlr.TerminalNode {
        return this.getToken(MongoParser.COUNT_DOCUMENTS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionCountDocumentsArgument1(): CollectionCountDocumentsArgument1Context | null {
        return this.getRuleContext(0, CollectionCountDocumentsArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionCountDocumentsArgument2(): CollectionCountDocumentsArgument2Context | null {
        return this.getRuleContext(0, CollectionCountDocumentsArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCountDocumentsMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCountDocumentsMethod) {
            return visitor.visitCollectionCountDocumentsMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCountDocumentsArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCountDocumentsArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCountDocumentsArgument2) {
            return visitor.visitCollectionCountDocumentsArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCountDocumentsArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCountDocumentsArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCountDocumentsArgument1) {
            return visitor.visitCollectionCountDocumentsArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionEstimatedDocumentCountMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ESTIMATED_DOCUMENT_COUNT(): antlr.TerminalNode {
        return this.getToken(MongoParser.ESTIMATED_DOCUMENT_COUNT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionEstimatedDocumentCountArgument(): CollectionEstimatedDocumentCountArgumentContext | null {
        return this.getRuleContext(0, CollectionEstimatedDocumentCountArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionEstimatedDocumentCountMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionEstimatedDocumentCountMethod) {
            return visitor.visitCollectionEstimatedDocumentCountMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionEstimatedDocumentCountArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionEstimatedDocumentCountArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionEstimatedDocumentCountArgument) {
            return visitor.visitCollectionEstimatedDocumentCountArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexInformationMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX_INFORMATION(): antlr.TerminalNode {
        return this.getToken(MongoParser.INDEX_INFORMATION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionIndexInformationArgument(): CollectionIndexInformationArgumentContext | null {
        return this.getRuleContext(0, CollectionIndexInformationArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexInformationMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexInformationMethod) {
            return visitor.visitCollectionIndexInformationMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexInformationArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexInformationArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexInformationArgument) {
            return visitor.visitCollectionIndexInformationArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexExistsMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX_EXISTS(): antlr.TerminalNode {
        return this.getToken(MongoParser.INDEX_EXISTS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionIndexExistsArgument1(): CollectionIndexExistsArgument1Context {
        return this.getRuleContext(0, CollectionIndexExistsArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionIndexExistsArgument2(): CollectionIndexExistsArgument2Context | null {
        return this.getRuleContext(0, CollectionIndexExistsArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexExistsMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexExistsMethod) {
            return visitor.visitCollectionIndexExistsMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexExistsArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexExistsArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexExistsArgument2) {
            return visitor.visitCollectionIndexExistsArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexExistsArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indexName(): IndexNameContext[];
    public indexName(i: number): IndexNameContext | null;
    public indexName(i?: number): IndexNameContext[] | IndexNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IndexNameContext);
        }

        return this.getRuleContext(i, IndexNameContext);
    }
    public LBRACKET(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.LBRACKET, 0);
    }
    public RBRACKET(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.RBRACKET, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexExistsArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexExistsArgument1) {
            return visitor.visitCollectionIndexExistsArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_indexName;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIndexName) {
            return visitor.visitIndexName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEXES(): antlr.TerminalNode {
        return this.getToken(MongoParser.INDEXES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionIndexesArgument(): CollectionIndexesArgumentContext | null {
        return this.getRuleContext(0, CollectionIndexesArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexesMethod) {
            return visitor.visitCollectionIndexesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIndexesArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIndexesArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIndexesArgument) {
            return visitor.visitCollectionIndexesArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionListIndexesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIST_INDEXES(): antlr.TerminalNode {
        return this.getToken(MongoParser.LIST_INDEXES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionListIndexesArgument(): CollectionListIndexesArgumentContext | null {
        return this.getRuleContext(0, CollectionListIndexesArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionListIndexesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionListIndexesMethod) {
            return visitor.visitCollectionListIndexesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionListIndexesArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionListIndexesArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionListIndexesArgument) {
            return visitor.visitCollectionListIndexesArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropIndexesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_INDEXES(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP_INDEXES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionDropIndexesArgument(): CollectionDropIndexesArgumentContext | null {
        return this.getRuleContext(0, CollectionDropIndexesArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropIndexesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropIndexesMethod) {
            return visitor.visitCollectionDropIndexesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropIndexesArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropIndexesArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropIndexesArgument) {
            return visitor.visitCollectionDropIndexesArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropIndexMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP_INDEX(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP_INDEX, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionDropIndexArgument1(): CollectionDropIndexArgument1Context {
        return this.getRuleContext(0, CollectionDropIndexArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionDropIndexArgument2(): CollectionDropIndexArgument2Context | null {
        return this.getRuleContext(0, CollectionDropIndexArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropIndexMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropIndexMethod) {
            return visitor.visitCollectionDropIndexMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropIndexArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropIndexArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropIndexArgument2) {
            return visitor.visitCollectionDropIndexArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropIndexArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropIndexArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropIndexArgument1) {
            return visitor.visitCollectionDropIndexArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCreateIndexesMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_INDEXES(): antlr.TerminalNode {
        return this.getToken(MongoParser.CREATE_INDEXES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionCreateIndexesArgument1(): CollectionCreateIndexesArgument1Context {
        return this.getRuleContext(0, CollectionCreateIndexesArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionCreateIndexesArgument2(): CollectionCreateIndexesArgument2Context | null {
        return this.getRuleContext(0, CollectionCreateIndexesArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCreateIndexesMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCreateIndexesMethod) {
            return visitor.visitCollectionCreateIndexesMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCreateIndexesArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCreateIndexesArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCreateIndexesArgument2) {
            return visitor.visitCollectionCreateIndexesArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCreateIndexesArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array(): ArrayContext {
        return this.getRuleContext(0, ArrayContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCreateIndexesArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCreateIndexesArgument1) {
            return visitor.visitCollectionCreateIndexesArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCreateIndexMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_INDEX(): antlr.TerminalNode {
        return this.getToken(MongoParser.CREATE_INDEX, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionCreateIndexArgument1(): CollectionCreateIndexArgument1Context {
        return this.getRuleContext(0, CollectionCreateIndexArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionCreateIndexArgument2(): CollectionCreateIndexArgument2Context | null {
        return this.getRuleContext(0, CollectionCreateIndexArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCreateIndexMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCreateIndexMethod) {
            return visitor.visitCollectionCreateIndexMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCreateIndexArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCreateIndexArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCreateIndexArgument2) {
            return visitor.visitCollectionCreateIndexArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionCreateIndexArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionCreateIndexArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionCreateIndexArgument1) {
            return visitor.visitCollectionCreateIndexArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIsCappedMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IS_CAPPED(): antlr.TerminalNode {
        return this.getToken(MongoParser.IS_CAPPED, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionIsCappedArgument(): CollectionIsCappedArgumentContext | null {
        return this.getRuleContext(0, CollectionIsCappedArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIsCappedMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIsCappedMethod) {
            return visitor.visitCollectionIsCappedMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionIsCappedArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionIsCappedArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionIsCappedArgument) {
            return visitor.visitCollectionIsCappedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(MongoParser.DROP, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionDropArgument(): CollectionDropArgumentContext | null {
        return this.getRuleContext(0, CollectionDropArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropMethod) {
            return visitor.visitCollectionDropMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDropArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDropArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDropArgument) {
            return visitor.visitCollectionDropArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionRenameMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(MongoParser.RENAME, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionRenameArgument1(): CollectionRenameArgument1Context {
        return this.getRuleContext(0, CollectionRenameArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionRenameArgument2(): CollectionRenameArgument2Context | null {
        return this.getRuleContext(0, CollectionRenameArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionRenameMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionRenameMethod) {
            return visitor.visitCollectionRenameMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionRenameArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionRenameArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionRenameArgument1) {
            return visitor.visitCollectionRenameArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionRenameArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionRenameArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionRenameArgument2) {
            return visitor.visitCollectionRenameArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDeleteManyMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE_MANY(): antlr.TerminalNode {
        return this.getToken(MongoParser.DELETE_MANY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionDeleteManyArgument1(): CollectionDeleteManyArgument1Context | null {
        return this.getRuleContext(0, CollectionDeleteManyArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionDeleteManyArgument2(): CollectionDeleteManyArgument2Context | null {
        return this.getRuleContext(0, CollectionDeleteManyArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDeleteManyMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDeleteManyMethod) {
            return visitor.visitCollectionDeleteManyMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDeleteManyArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDeleteManyArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDeleteManyArgument1) {
            return visitor.visitCollectionDeleteManyArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDeleteManyArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDeleteManyArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDeleteManyArgument2) {
            return visitor.visitCollectionDeleteManyArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDeleteOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.DELETE_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionDeleteOneArgument1(): CollectionDeleteOneArgument1Context | null {
        return this.getRuleContext(0, CollectionDeleteOneArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionDeleteOneArgument2(): CollectionDeleteOneArgument2Context | null {
        return this.getRuleContext(0, CollectionDeleteOneArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDeleteOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDeleteOneMethod) {
            return visitor.visitCollectionDeleteOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDeleteOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDeleteOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDeleteOneArgument1) {
            return visitor.visitCollectionDeleteOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionDeleteOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionDeleteOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionDeleteOneArgument2) {
            return visitor.visitCollectionDeleteOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionReplaceOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPLACE_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.REPLACE_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionReplaceOneArgument1(): CollectionReplaceOneArgument1Context {
        return this.getRuleContext(0, CollectionReplaceOneArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public collectionReplaceOneArgument2(): CollectionReplaceOneArgument2Context {
        return this.getRuleContext(0, CollectionReplaceOneArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionReplaceOneArgument3(): CollectionReplaceOneArgument3Context | null {
        return this.getRuleContext(0, CollectionReplaceOneArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionReplaceOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionReplaceOneMethod) {
            return visitor.visitCollectionReplaceOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionReplaceOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionReplaceOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionReplaceOneArgument1) {
            return visitor.visitCollectionReplaceOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionReplaceOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public documentToInsert(): DocumentToInsertContext {
        return this.getRuleContext(0, DocumentToInsertContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionReplaceOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionReplaceOneArgument2) {
            return visitor.visitCollectionReplaceOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionReplaceOneArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionReplaceOneArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionReplaceOneArgument3) {
            return visitor.visitCollectionReplaceOneArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateManyMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_MANY(): antlr.TerminalNode {
        return this.getToken(MongoParser.UPDATE_MANY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionUpdateManyArgument1(): CollectionUpdateManyArgument1Context {
        return this.getRuleContext(0, CollectionUpdateManyArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public collectionUpdateManyArgument2(): CollectionUpdateManyArgument2Context {
        return this.getRuleContext(0, CollectionUpdateManyArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionUpdateManyArgument3(): CollectionUpdateManyArgument3Context | null {
        return this.getRuleContext(0, CollectionUpdateManyArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateManyMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateManyMethod) {
            return visitor.visitCollectionUpdateManyMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateManyArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateManyArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateManyArgument1) {
            return visitor.visitCollectionUpdateManyArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateManyArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateManyArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateManyArgument2) {
            return visitor.visitCollectionUpdateManyArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateManyArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateManyArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateManyArgument3) {
            return visitor.visitCollectionUpdateManyArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.UPDATE_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionUpdateOneArgument1(): CollectionUpdateOneArgument1Context {
        return this.getRuleContext(0, CollectionUpdateOneArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public collectionUpdateOneArgument2(): CollectionUpdateOneArgument2Context {
        return this.getRuleContext(0, CollectionUpdateOneArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionUpdateOneArgument3(): CollectionUpdateOneArgument3Context | null {
        return this.getRuleContext(0, CollectionUpdateOneArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateOneMethod) {
            return visitor.visitCollectionUpdateOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateOneArgument1) {
            return visitor.visitCollectionUpdateOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateOneArgument2) {
            return visitor.visitCollectionUpdateOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionUpdateOneArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionUpdateOneArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionUpdateOneArgument3) {
            return visitor.visitCollectionUpdateOneArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionBulkWriteMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BULK_WRITE(): antlr.TerminalNode {
        return this.getToken(MongoParser.BULK_WRITE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionBulkWriteArgument1(): CollectionBulkWriteArgument1Context {
        return this.getRuleContext(0, CollectionBulkWriteArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionBulkWriteArgument2(): CollectionBulkWriteArgument2Context | null {
        return this.getRuleContext(0, CollectionBulkWriteArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionBulkWriteMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionBulkWriteMethod) {
            return visitor.visitCollectionBulkWriteMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionBulkWriteArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array(): ArrayContext {
        return this.getRuleContext(0, ArrayContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionBulkWriteArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionBulkWriteArgument1) {
            return visitor.visitCollectionBulkWriteArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionBulkWriteArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionBulkWriteArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionBulkWriteArgument2) {
            return visitor.visitCollectionBulkWriteArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionInsertManyMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT_MANY(): antlr.TerminalNode {
        return this.getToken(MongoParser.INSERT_MANY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionInsertManyArgument1(): CollectionInsertManyArgument1Context {
        return this.getRuleContext(0, CollectionInsertManyArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionInsertManyArgument2(): CollectionInsertManyArgument2Context | null {
        return this.getRuleContext(0, CollectionInsertManyArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionInsertManyMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionInsertManyMethod) {
            return visitor.visitCollectionInsertManyMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionInsertManyArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(MongoParser.LBRACKET, 0)!;
    }
    public documentToInsert(): DocumentToInsertContext[];
    public documentToInsert(i: number): DocumentToInsertContext | null;
    public documentToInsert(i?: number): DocumentToInsertContext[] | DocumentToInsertContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DocumentToInsertContext);
        }

        return this.getRuleContext(i, DocumentToInsertContext);
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(MongoParser.RBRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionInsertManyArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionInsertManyArgument1) {
            return visitor.visitCollectionInsertManyArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionInsertManyArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionInsertManyArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionInsertManyArgument2) {
            return visitor.visitCollectionInsertManyArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionInsertOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.INSERT_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionInsertOneArgument1(): CollectionInsertOneArgument1Context {
        return this.getRuleContext(0, CollectionInsertOneArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionInsertOneArgument2(): CollectionInsertOneArgument2Context | null {
        return this.getRuleContext(0, CollectionInsertOneArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionInsertOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionInsertOneMethod) {
            return visitor.visitCollectionInsertOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionInsertOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public documentToInsert(): DocumentToInsertContext {
        return this.getRuleContext(0, DocumentToInsertContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionInsertOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionInsertOneArgument1) {
            return visitor.visitCollectionInsertOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionInsertOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionInsertOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionInsertOneArgument2) {
            return visitor.visitCollectionInsertOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DocumentToInsertContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_documentToInsert;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDocumentToInsert) {
            return visitor.visitDocumentToInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndUpdateMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND_ONE_AND_UPDATE(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND_ONE_AND_UPDATE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionFindOneAndUpdateArgument1(): CollectionFindOneAndUpdateArgument1Context {
        return this.getRuleContext(0, CollectionFindOneAndUpdateArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public collectionFindOneAndUpdateArgument2(): CollectionFindOneAndUpdateArgument2Context {
        return this.getRuleContext(0, CollectionFindOneAndUpdateArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionFindOneAndUpdateArgument3(): CollectionFindOneAndUpdateArgument3Context | null {
        return this.getRuleContext(0, CollectionFindOneAndUpdateArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndUpdateMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndUpdateMethod) {
            return visitor.visitCollectionFindOneAndUpdateMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndUpdateArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndUpdateArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndUpdateArgument1) {
            return visitor.visitCollectionFindOneAndUpdateArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndUpdateArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndUpdateArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndUpdateArgument2) {
            return visitor.visitCollectionFindOneAndUpdateArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndUpdateArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndUpdateArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndUpdateArgument3) {
            return visitor.visitCollectionFindOneAndUpdateArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndReplaceMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND_ONE_AND_REPLACE(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND_ONE_AND_REPLACE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionFindOneAndReplaceArgument1(): CollectionFindOneAndReplaceArgument1Context {
        return this.getRuleContext(0, CollectionFindOneAndReplaceArgument1Context)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public collectionFindOneAndReplaceArgument2(): CollectionFindOneAndReplaceArgument2Context {
        return this.getRuleContext(0, CollectionFindOneAndReplaceArgument2Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionFindOneAndReplaceArgument3(): CollectionFindOneAndReplaceArgument3Context | null {
        return this.getRuleContext(0, CollectionFindOneAndReplaceArgument3Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndReplaceMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndReplaceMethod) {
            return visitor.visitCollectionFindOneAndReplaceMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndReplaceArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndReplaceArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndReplaceArgument1) {
            return visitor.visitCollectionFindOneAndReplaceArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndReplaceArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndReplaceArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndReplaceArgument2) {
            return visitor.visitCollectionFindOneAndReplaceArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndReplaceArgument3Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndReplaceArgument3;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndReplaceArgument3) {
            return visitor.visitCollectionFindOneAndReplaceArgument3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndDeleteMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND_ONE_AND_DELETE(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND_ONE_AND_DELETE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public collectionFindOneAndDeleteArgument1(): CollectionFindOneAndDeleteArgument1Context {
        return this.getRuleContext(0, CollectionFindOneAndDeleteArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionFindOneAndDeleteArgument2(): CollectionFindOneAndDeleteArgument2Context | null {
        return this.getRuleContext(0, CollectionFindOneAndDeleteArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndDeleteMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndDeleteMethod) {
            return visitor.visitCollectionFindOneAndDeleteMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndDeleteArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndDeleteArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndDeleteArgument1) {
            return visitor.visitCollectionFindOneAndDeleteArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneAndDeleteArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneAndDeleteArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneAndDeleteArgument2) {
            return visitor.visitCollectionFindOneAndDeleteArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND_ONE(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND_ONE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionFindOneArgument1(): CollectionFindOneArgument1Context | null {
        return this.getRuleContext(0, CollectionFindOneArgument1Context);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionFindOneArgument2(): CollectionFindOneArgument2Context | null {
        return this.getRuleContext(0, CollectionFindOneArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneMethod) {
            return visitor.visitCollectionFindOneMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneArgument1) {
            return visitor.visitCollectionFindOneArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindOneArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindOneArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindOneArgument2) {
            return visitor.visitCollectionFindOneArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIND(): antlr.TerminalNode {
        return this.getToken(MongoParser.FIND, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public collectionFindMethodArgument1(): CollectionFindMethodArgument1Context | null {
        return this.getRuleContext(0, CollectionFindMethodArgument1Context);
    }
    public collectionFindMethodModifier(): CollectionFindMethodModifierContext[];
    public collectionFindMethodModifier(i: number): CollectionFindMethodModifierContext | null;
    public collectionFindMethodModifier(i?: number): CollectionFindMethodModifierContext[] | CollectionFindMethodModifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CollectionFindMethodModifierContext);
        }

        return this.getRuleContext(i, CollectionFindMethodModifierContext);
    }
    public explainMethod(): ExplainMethodContext | null {
        return this.getRuleContext(0, ExplainMethodContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public collectionFindMethodArgument2(): CollectionFindMethodArgument2Context | null {
        return this.getRuleContext(0, CollectionFindMethodArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindMethod) {
            return visitor.visitCollectionFindMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindMethodArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindMethodArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindMethodArgument1) {
            return visitor.visitCollectionFindMethodArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindMethodArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindMethodArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindMethodArgument2) {
            return visitor.visitCollectionFindMethodArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DOT, 0)!;
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(MongoParser.EXPLAIN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public explainMethodArgument(): ExplainMethodArgumentContext | null {
        return this.getRuleContext(0, ExplainMethodArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_explainMethod;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitExplainMethod) {
            return visitor.visitExplainMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainMethodArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public boolean(): BooleanContext | null {
        return this.getRuleContext(0, BooleanContext);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_explainMethodArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitExplainMethodArgument) {
            return visitor.visitExplainMethodArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFindMethodModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(MongoParser.DOT, 0)!;
    }
    public skipModifier(): SkipModifierContext | null {
        return this.getRuleContext(0, SkipModifierContext);
    }
    public limitModifier(): LimitModifierContext | null {
        return this.getRuleContext(0, LimitModifierContext);
    }
    public filterModifier(): FilterModifierContext | null {
        return this.getRuleContext(0, FilterModifierContext);
    }
    public minModifier(): MinModifierContext | null {
        return this.getRuleContext(0, MinModifierContext);
    }
    public maxModifier(): MaxModifierContext | null {
        return this.getRuleContext(0, MaxModifierContext);
    }
    public hintModifier(): HintModifierContext | null {
        return this.getRuleContext(0, HintModifierContext);
    }
    public returnKeyModifier(): ReturnKeyModifierContext | null {
        return this.getRuleContext(0, ReturnKeyModifierContext);
    }
    public showRecordIdModifier(): ShowRecordIdModifierContext | null {
        return this.getRuleContext(0, ShowRecordIdModifierContext);
    }
    public sortModifier(): SortModifierContext | null {
        return this.getRuleContext(0, SortModifierContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_collectionFindMethodModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFindMethodModifier) {
            return visitor.visitCollectionFindMethodModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkipModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SKIP_(): antlr.TerminalNode {
        return this.getToken(MongoParser.SKIP_, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public skipModifierArgument(): SkipModifierArgumentContext {
        return this.getRuleContext(0, SkipModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_skipModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSkipModifier) {
            return visitor.visitSkipModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkipModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_skipModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSkipModifierArgument) {
            return visitor.visitSkipModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(MongoParser.LIMIT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public limitModifierArgument(): LimitModifierArgumentContext {
        return this.getRuleContext(0, LimitModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_limitModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitLimitModifier) {
            return visitor.visitLimitModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_limitModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitLimitModifierArgument) {
            return visitor.visitLimitModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(MongoParser.FILTER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public filterModifierArgument(): FilterModifierArgumentContext {
        return this.getRuleContext(0, FilterModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_filterModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFilterModifier) {
            return visitor.visitFilterModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_filterModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitFilterModifierArgument) {
            return visitor.visitFilterModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MinModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MIN(): antlr.TerminalNode {
        return this.getToken(MongoParser.MIN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public minModifierArgument(): MinModifierArgumentContext {
        return this.getRuleContext(0, MinModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_minModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMinModifier) {
            return visitor.visitMinModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MinModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_minModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMinModifierArgument) {
            return visitor.visitMinModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MaxModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAX(): antlr.TerminalNode {
        return this.getToken(MongoParser.MAX, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public maxModifierArgument(): MaxModifierArgumentContext {
        return this.getRuleContext(0, MaxModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_maxModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMaxModifier) {
            return visitor.visitMaxModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MaxModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext {
        return this.getRuleContext(0, ObjectContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_maxModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMaxModifierArgument) {
            return visitor.visitMaxModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HINT(): antlr.TerminalNode {
        return this.getToken(MongoParser.HINT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public hintModifierArgument(): HintModifierArgumentContext {
        return this.getRuleContext(0, HintModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_hintModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitHintModifier) {
            return visitor.visitHintModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_hintModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitHintModifierArgument) {
            return visitor.visitHintModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnKeyModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURN_KEY(): antlr.TerminalNode {
        return this.getToken(MongoParser.RETURN_KEY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public returnKeyModifierArgument(): ReturnKeyModifierArgumentContext {
        return this.getRuleContext(0, ReturnKeyModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_returnKeyModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReturnKeyModifier) {
            return visitor.visitReturnKeyModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnKeyModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public boolean(): BooleanContext {
        return this.getRuleContext(0, BooleanContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_returnKeyModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReturnKeyModifierArgument) {
            return visitor.visitReturnKeyModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRecordIdModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_RECORD_ID(): antlr.TerminalNode {
        return this.getToken(MongoParser.SHOW_RECORD_ID, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public showRecordIdModifierArgument(): ShowRecordIdModifierArgumentContext {
        return this.getRuleContext(0, ShowRecordIdModifierArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_showRecordIdModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitShowRecordIdModifier) {
            return visitor.visitShowRecordIdModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRecordIdModifierArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public boolean(): BooleanContext {
        return this.getRuleContext(0, BooleanContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_showRecordIdModifierArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitShowRecordIdModifierArgument) {
            return visitor.visitShowRecordIdModifierArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortModifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SORT(): antlr.TerminalNode {
        return this.getToken(MongoParser.SORT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public sortModifierArgument1(): SortModifierArgument1Context {
        return this.getRuleContext(0, SortModifierArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public sortModifierArgument2(): SortModifierArgument2Context | null {
        return this.getRuleContext(0, SortModifierArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_sortModifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSortModifier) {
            return visitor.visitSortModifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortModifierArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public value(): ValueContext | null {
        return this.getRuleContext(0, ValueContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_sortModifierArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSortModifierArgument1) {
            return visitor.visitSortModifierArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortModifierArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_sortModifierArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitSortModifierArgument2) {
            return visitor.visitSortModifierArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReservedKeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DB(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DB, 0);
    }
    public FIND(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND, 0);
    }
    public FIND_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND_ONE, 0);
    }
    public FIND_ONE_AND_DELETE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND_ONE_AND_DELETE, 0);
    }
    public FIND_ONE_AND_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND_ONE_AND_REPLACE, 0);
    }
    public FIND_ONE_AND_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FIND_ONE_AND_UPDATE, 0);
    }
    public SHOW_RECORD_ID(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SHOW_RECORD_ID, 0);
    }
    public RETURN_KEY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.RETURN_KEY, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FILTER, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.MAX, 0);
    }
    public SORT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SORT, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.LIMIT, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.EXPLAIN, 0);
    }
    public HINT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.HINT, 0);
    }
    public SKIP_(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SKIP_, 0);
    }
    public INSERT_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INSERT_ONE, 0);
    }
    public INSERT_MANY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INSERT_MANY, 0);
    }
    public BULK_WRITE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.BULK_WRITE, 0);
    }
    public UPDATE_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.UPDATE_ONE, 0);
    }
    public UPDATE_MANY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.UPDATE_MANY, 0);
    }
    public REPLACE_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.REPLACE_ONE, 0);
    }
    public DELETE_ONE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DELETE_ONE, 0);
    }
    public DELETE_MANY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DELETE_MANY, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.RENAME, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP, 0);
    }
    public IS_CAPPED(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.IS_CAPPED, 0);
    }
    public CREATE_INDEX(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.CREATE_INDEX, 0);
    }
    public CREATE_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.CREATE_INDEXES, 0);
    }
    public DROP_INDEX(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP_INDEX, 0);
    }
    public DROP_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP_INDEXES, 0);
    }
    public LIST_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.LIST_INDEXES, 0);
    }
    public INDEXES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INDEXES, 0);
    }
    public INDEX_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INDEX_EXISTS, 0);
    }
    public INDEX_INFORMATION(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.INDEX_INFORMATION, 0);
    }
    public ESTIMATED_DOCUMENT_COUNT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.ESTIMATED_DOCUMENT_COUNT, 0);
    }
    public COUNT_DOCUMENTS(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COUNT_DOCUMENTS, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DISTINCT, 0);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.AGGREGATE, 0);
    }
    public COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COLLECTION, 0);
    }
    public CREATE_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.CREATE_COLLECTION, 0);
    }
    public COMMAND(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMAND, 0);
    }
    public LIST_COLLECTIONS(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.LIST_COLLECTIONS, 0);
    }
    public RENAME_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.RENAME_COLLECTION, 0);
    }
    public DROP_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP_COLLECTION, 0);
    }
    public DROP_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DROP_DATABASE, 0);
    }
    public REMOVE_USER(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.REMOVE_USER, 0);
    }
    public RUN_CURSOR_COMMAND(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.RUN_CURSOR_COMMAND, 0);
    }
    public STATS(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.STATS, 0);
    }
    public PROFILING_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.PROFILING_LEVEL, 0);
    }
    public SET_PROFILING_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SET_PROFILING_LEVEL, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.ADMIN, 0);
    }
    public BUILD_INFO(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.BUILD_INFO, 0);
    }
    public SERVER_INFO(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SERVER_INFO, 0);
    }
    public SERVER_STATUS(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SERVER_STATUS, 0);
    }
    public PING(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.PING, 0);
    }
    public VALIDATE_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.VALIDATE_COLLECTION, 0);
    }
    public LIST_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.LIST_DATABASES, 0);
    }
    public REPL_SET_GET_STATUS(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.REPL_SET_GET_STATUS, 0);
    }
    public OBJECT_ID(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.OBJECT_ID, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.DATE, 0);
    }
    public UUID(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.UUID, 0);
    }
    public MIN_KEY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.MIN_KEY, 0);
    }
    public MAX_KEY(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.MAX_KEY, 0);
    }
    public NUMBER_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NUMBER_DECIMAL, 0);
    }
    public NUMBER_INT(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NUMBER_INT, 0);
    }
    public NUMBER_LONG(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NUMBER_LONG, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_reservedKeyword;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitReservedKeyword) {
            return visitor.visitReservedKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACE(): antlr.TerminalNode {
        return this.getToken(MongoParser.LBRACE, 0)!;
    }
    public pair(): PairContext[];
    public pair(i: number): PairContext | null;
    public pair(i?: number): PairContext[] | PairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PairContext);
        }

        return this.getRuleContext(i, PairContext);
    }
    public RBRACE(): antlr.TerminalNode {
        return this.getToken(MongoParser.RBRACE, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_object;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitObject) {
            return visitor.visitObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PairContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public key(): KeyContext {
        return this.getRuleContext(0, KeyContext)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(MongoParser.COLON, 0)!;
    }
    public value(): ValueContext {
        return this.getRuleContext(0, ValueContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_pair;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitPair) {
            return visitor.visitPair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_boolean;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitBoolean) {
            return visitor.visitBoolean(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public NUMERIC_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NUMERIC_LITERAL, 0);
    }
    public boolean(): BooleanContext | null {
        return this.getRuleContext(0, BooleanContext);
    }
    public null(): NullContext | null {
        return this.getRuleContext(0, NullContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_key;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitKey) {
            return visitor.visitKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.IDENTIFIER, 0);
    }
    public reservedKeyword(): ReservedKeywordContext | null {
        return this.getRuleContext(0, ReservedKeywordContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_identifier;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public object(): ObjectContext | null {
        return this.getRuleContext(0, ObjectContext);
    }
    public array(): ArrayContext | null {
        return this.getRuleContext(0, ArrayContext);
    }
    public boolean(): BooleanContext | null {
        return this.getRuleContext(0, BooleanContext);
    }
    public null(): NullContext | null {
        return this.getRuleContext(0, NullContext);
    }
    public objectIdFunction(): ObjectIdFunctionContext | null {
        return this.getRuleContext(0, ObjectIdFunctionContext);
    }
    public dateFunction(): DateFunctionContext | null {
        return this.getRuleContext(0, DateFunctionContext);
    }
    public uuidFunction(): UuidFunctionContext | null {
        return this.getRuleContext(0, UuidFunctionContext);
    }
    public minKeyFunction(): MinKeyFunctionContext | null {
        return this.getRuleContext(0, MinKeyFunctionContext);
    }
    public maxKeyFunction(): MaxKeyFunctionContext | null {
        return this.getRuleContext(0, MaxKeyFunctionContext);
    }
    public numberIntFunction(): NumberIntFunctionContext | null {
        return this.getRuleContext(0, NumberIntFunctionContext);
    }
    public numberDecimalFunction(): NumberDecimalFunctionContext | null {
        return this.getRuleContext(0, NumberDecimalFunctionContext);
    }
    public numberLongFunction(): NumberLongFunctionContext | null {
        return this.getRuleContext(0, NumberLongFunctionContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_value;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitValue) {
            return visitor.visitValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberLongFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NUMBER_LONG(): antlr.TerminalNode {
        return this.getToken(MongoParser.NUMBER_LONG, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public numberLongFunctionArgument1(): NumberLongFunctionArgument1Context {
        return this.getRuleContext(0, NumberLongFunctionArgument1Context)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.COMMA, 0);
    }
    public numberLongFunctionArgument2(): NumberLongFunctionArgument2Context | null {
        return this.getRuleContext(0, NumberLongFunctionArgument2Context);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_numberLongFunction;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitNumberLongFunction) {
            return visitor.visitNumberLongFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberLongFunctionArgument1Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_numberLongFunctionArgument1;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitNumberLongFunctionArgument1) {
            return visitor.visitNumberLongFunctionArgument1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberLongFunctionArgument2Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_numberLongFunctionArgument2;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitNumberLongFunctionArgument2) {
            return visitor.visitNumberLongFunctionArgument2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberDecimalFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NUMBER_DECIMAL(): antlr.TerminalNode {
        return this.getToken(MongoParser.NUMBER_DECIMAL, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public numberDecimalFunctionArgument(): NumberDecimalFunctionArgumentContext {
        return this.getRuleContext(0, NumberDecimalFunctionArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_numberDecimalFunction;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitNumberDecimalFunction) {
            return visitor.visitNumberDecimalFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberDecimalFunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_numberDecimalFunctionArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitNumberDecimalFunctionArgument) {
            return visitor.visitNumberDecimalFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberIntFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NUMBER_INT(): antlr.TerminalNode {
        return this.getToken(MongoParser.NUMBER_INT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public numberIntFunctionArgument(): NumberIntFunctionArgumentContext {
        return this.getRuleContext(0, NumberIntFunctionArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_numberIntFunction;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitNumberIntFunction) {
            return visitor.visitNumberIntFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberIntFunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_numberIntFunctionArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitNumberIntFunctionArgument) {
            return visitor.visitNumberIntFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MaxKeyFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAX_KEY(): antlr.TerminalNode {
        return this.getToken(MongoParser.MAX_KEY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_maxKeyFunction;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMaxKeyFunction) {
            return visitor.visitMaxKeyFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MinKeyFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MIN_KEY(): antlr.TerminalNode {
        return this.getToken(MongoParser.MIN_KEY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_minKeyFunction;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitMinKeyFunction) {
            return visitor.visitMinKeyFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UuidFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UUID(): antlr.TerminalNode {
        return this.getToken(MongoParser.UUID, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public uuidFunctionArgument(): UuidFunctionArgumentContext | null {
        return this.getRuleContext(0, UuidFunctionArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_uuidFunction;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitUuidFunction) {
            return visitor.visitUuidFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UuidFunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_uuidFunctionArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitUuidFunctionArgument) {
            return visitor.visitUuidFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectIdFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OBJECT_ID(): antlr.TerminalNode {
        return this.getToken(MongoParser.OBJECT_ID, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public objectIdFunctionArgument(): ObjectIdFunctionArgumentContext {
        return this.getRuleContext(0, ObjectIdFunctionArgumentContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_objectIdFunction;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitObjectIdFunction) {
            return visitor.visitObjectIdFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ObjectIdFunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_objectIdFunctionArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitObjectIdFunctionArgument) {
            return visitor.visitObjectIdFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE(): antlr.TerminalNode {
        return this.getToken(MongoParser.DATE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(MongoParser.RPAREN, 0)!;
    }
    public dateFunctionArgument(): DateFunctionArgumentContext | null {
        return this.getRuleContext(0, DateFunctionArgumentContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_dateFunction;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDateFunction) {
            return visitor.visitDateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateFunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_dateFunctionArgument;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitDateFunctionArgument) {
            return visitor.visitDateFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(MongoParser.STRING, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_string;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitString) {
            return visitor.visitString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL(): antlr.TerminalNode {
        return this.getToken(MongoParser.NULL, 0)!;
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_null;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitNull) {
            return visitor.visitNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(MongoParser.LBRACKET, 0)!;
    }
    public value(): ValueContext[];
    public value(i: number): ValueContext | null;
    public value(i?: number): ValueContext[] | ValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueContext);
        }

        return this.getRuleContext(i, ValueContext);
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(MongoParser.RBRACKET, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(MongoParser.COMMA);
    	} else {
    		return this.getToken(MongoParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_array;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitArray) {
            return visitor.visitArray(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NUMERIC_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NUMERIC_LITERAL, 0);
    }
    public NUMBER(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.NUMBER, 0);
    }
    public SYMBOL(): antlr.TerminalNode | null {
        return this.getToken(MongoParser.SYMBOL, 0);
    }
    public override get ruleIndex(): number {
        return MongoParser.RULE_number;
    }
    public override accept<Result>(visitor: MongoParserVisitor<Result>): Result | null {
        if (visitor.visitNumber) {
            return visitor.visitNumber(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
