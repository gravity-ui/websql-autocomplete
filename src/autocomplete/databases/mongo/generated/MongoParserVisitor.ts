////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/mongo/grammar/MongoParser.g4 by ANTLR 4.13.1

import { AbstractParseTreeVisitor } from "antlr4ng";


import { RootContext } from "./MongoParser.js";
import { CommandsContext } from "./MongoParser.js";
import { CommandContext } from "./MongoParser.js";
import { DatabaseOperationContext } from "./MongoParser.js";
import { DatabaseMethodContext } from "./MongoParser.js";
import { DatabaseAdminMethodContext } from "./MongoParser.js";
import { AdminMethodContext } from "./MongoParser.js";
import { ValidateCollectionMethodContext } from "./MongoParser.js";
import { ValidateCollectionArgument1Context } from "./MongoParser.js";
import { ValidateCollectionArgument2Context } from "./MongoParser.js";
import { ServerStatusMethodContext } from "./MongoParser.js";
import { ServerStatusArgumentContext } from "./MongoParser.js";
import { PingMethodContext } from "./MongoParser.js";
import { PingArgumentContext } from "./MongoParser.js";
import { ListDatabasesMethodContext } from "./MongoParser.js";
import { ListDatabasesArgumentContext } from "./MongoParser.js";
import { ReplSetGetStatusMethodContext } from "./MongoParser.js";
import { ReplSetGetStatusArgumentContext } from "./MongoParser.js";
import { ServerInfoMethodContext } from "./MongoParser.js";
import { ServerInfoArgumentContext } from "./MongoParser.js";
import { BuildInfoMethodContext } from "./MongoParser.js";
import { BuildInfoArgumentContext } from "./MongoParser.js";
import { DatabaseSetProfilingLevelMethodContext } from "./MongoParser.js";
import { DatabaseSetProfilingLevelArgument1Context } from "./MongoParser.js";
import { DatabaseSetProfilingLevelArgument2Context } from "./MongoParser.js";
import { DatabaseProfilingLevelMethodContext } from "./MongoParser.js";
import { DatabaseProfilingLevelArgumentContext } from "./MongoParser.js";
import { DatabaseStatsMethodContext } from "./MongoParser.js";
import { DatabaseStatsArgumentContext } from "./MongoParser.js";
import { DatabaseRunCursorCommandMethodContext } from "./MongoParser.js";
import { DatabaseRunCursorCommandArgument1Context } from "./MongoParser.js";
import { DatabaseRunCursorCommandArgument2Context } from "./MongoParser.js";
import { DatabaseIndexInformationMethodContext } from "./MongoParser.js";
import { DatabaseIndexInformationArgument1Context } from "./MongoParser.js";
import { DatabaseIndexInformationArgument2Context } from "./MongoParser.js";
import { DatabaseRemoveUserMethodContext } from "./MongoParser.js";
import { DatabaseRemoveUserArgument1Context } from "./MongoParser.js";
import { QuotedUsernameContext } from "./MongoParser.js";
import { DatabaseRemoveUserArgument2Context } from "./MongoParser.js";
import { DatabaseCreateIndexMethodContext } from "./MongoParser.js";
import { DatabaseCreateIndexArgument3Context } from "./MongoParser.js";
import { DatabaseCreateIndexArgument2Context } from "./MongoParser.js";
import { DatabaseCreateIndexArgument1Context } from "./MongoParser.js";
import { DatabaseDropDatabaseMethodContext } from "./MongoParser.js";
import { DatabaseDropDatabaseArgumentContext } from "./MongoParser.js";
import { DatabaseDropCollectionMethodContext } from "./MongoParser.js";
import { DatabaseDropCollectionArgument1Context } from "./MongoParser.js";
import { DatabaseDropCollectionArgument2Context } from "./MongoParser.js";
import { DatabaseRenameCollectionMethodContext } from "./MongoParser.js";
import { DatabaseRenameCollectionArgument1Context } from "./MongoParser.js";
import { DatabaseRenameCollectionArgument2Context } from "./MongoParser.js";
import { DatabaseRenameCollectionArgument3Context } from "./MongoParser.js";
import { DatabaseListCollectionsMethodContext } from "./MongoParser.js";
import { DatabaseListCollectionsArgument1Context } from "./MongoParser.js";
import { DatabaseListCollectionsArgument2Context } from "./MongoParser.js";
import { DatabaseCommandMethodContext } from "./MongoParser.js";
import { DatabaseCommandArgument1Context } from "./MongoParser.js";
import { DatabaseCommandArgument2Context } from "./MongoParser.js";
import { DatabaseCreateCollectionMethodContext } from "./MongoParser.js";
import { DatabaseCreateCollectionArgument1Context } from "./MongoParser.js";
import { DatabaseCreateCollectionArgument2Context } from "./MongoParser.js";
import { DatabaseCollectionMethodContext } from "./MongoParser.js";
import { QuotedCollectionNameContext } from "./MongoParser.js";
import { CollectionOperationContext } from "./MongoParser.js";
import { CollectionNameContext } from "./MongoParser.js";
import { CollectionMethodContext } from "./MongoParser.js";
import { AggregateMethodContext } from "./MongoParser.js";
import { AggregateArgument2Context } from "./MongoParser.js";
import { AggregateArgument1Context } from "./MongoParser.js";
import { CollectionDistinctMethodContext } from "./MongoParser.js";
import { CollectionDistinctArgument1Context } from "./MongoParser.js";
import { CollectionDistinctArgument2Context } from "./MongoParser.js";
import { CollectionDistinctArgument3Context } from "./MongoParser.js";
import { CollectionCountDocumentsMethodContext } from "./MongoParser.js";
import { CollectionCountDocumentsArgument2Context } from "./MongoParser.js";
import { CollectionCountDocumentsArgument1Context } from "./MongoParser.js";
import { CollectionEstimatedDocumentCountMethodContext } from "./MongoParser.js";
import { CollectionEstimatedDocumentCountArgumentContext } from "./MongoParser.js";
import { CollectionIndexInformationMethodContext } from "./MongoParser.js";
import { CollectionIndexInformationArgumentContext } from "./MongoParser.js";
import { CollectionIndexExistsMethodContext } from "./MongoParser.js";
import { CollectionIndexExistsArgument2Context } from "./MongoParser.js";
import { CollectionIndexExistsArgument1Context } from "./MongoParser.js";
import { IndexNameContext } from "./MongoParser.js";
import { CollectionIndexesMethodContext } from "./MongoParser.js";
import { CollectionIndexesArgumentContext } from "./MongoParser.js";
import { CollectionListIndexesMethodContext } from "./MongoParser.js";
import { CollectionListIndexesArgumentContext } from "./MongoParser.js";
import { CollectionDropIndexesMethodContext } from "./MongoParser.js";
import { CollectionDropIndexesArgumentContext } from "./MongoParser.js";
import { CollectionDropIndexMethodContext } from "./MongoParser.js";
import { CollectionDropIndexArgument2Context } from "./MongoParser.js";
import { CollectionDropIndexArgument1Context } from "./MongoParser.js";
import { CollectionCreateIndexesMethodContext } from "./MongoParser.js";
import { CollectionCreateIndexesArgument2Context } from "./MongoParser.js";
import { CollectionCreateIndexesArgument1Context } from "./MongoParser.js";
import { CollectionCreateIndexMethodContext } from "./MongoParser.js";
import { CollectionCreateIndexArgument2Context } from "./MongoParser.js";
import { CollectionCreateIndexArgument1Context } from "./MongoParser.js";
import { CollectionIsCappedMethodContext } from "./MongoParser.js";
import { CollectionIsCappedArgumentContext } from "./MongoParser.js";
import { CollectionDropMethodContext } from "./MongoParser.js";
import { CollectionDropArgumentContext } from "./MongoParser.js";
import { CollectionRenameMethodContext } from "./MongoParser.js";
import { CollectionRenameArgument1Context } from "./MongoParser.js";
import { CollectionRenameArgument2Context } from "./MongoParser.js";
import { CollectionDeleteManyMethodContext } from "./MongoParser.js";
import { CollectionDeleteManyArgument1Context } from "./MongoParser.js";
import { CollectionDeleteManyArgument2Context } from "./MongoParser.js";
import { CollectionDeleteOneMethodContext } from "./MongoParser.js";
import { CollectionDeleteOneArgument1Context } from "./MongoParser.js";
import { CollectionDeleteOneArgument2Context } from "./MongoParser.js";
import { CollectionReplaceOneMethodContext } from "./MongoParser.js";
import { CollectionReplaceOneArgument1Context } from "./MongoParser.js";
import { CollectionReplaceOneArgument2Context } from "./MongoParser.js";
import { CollectionReplaceOneArgument3Context } from "./MongoParser.js";
import { CollectionUpdateManyMethodContext } from "./MongoParser.js";
import { CollectionUpdateManyArgument1Context } from "./MongoParser.js";
import { CollectionUpdateManyArgument2Context } from "./MongoParser.js";
import { CollectionUpdateManyArgument3Context } from "./MongoParser.js";
import { CollectionUpdateOneMethodContext } from "./MongoParser.js";
import { CollectionUpdateOneArgument1Context } from "./MongoParser.js";
import { CollectionUpdateOneArgument2Context } from "./MongoParser.js";
import { CollectionUpdateOneArgument3Context } from "./MongoParser.js";
import { CollectionBulkWriteMethodContext } from "./MongoParser.js";
import { CollectionBulkWriteArgument1Context } from "./MongoParser.js";
import { CollectionBulkWriteArgument2Context } from "./MongoParser.js";
import { CollectionInsertManyMethodContext } from "./MongoParser.js";
import { CollectionInsertManyArgument1Context } from "./MongoParser.js";
import { CollectionInsertManyArgument2Context } from "./MongoParser.js";
import { CollectionInsertOneMethodContext } from "./MongoParser.js";
import { CollectionInsertOneArgument1Context } from "./MongoParser.js";
import { CollectionInsertOneArgument2Context } from "./MongoParser.js";
import { DocumentToInsertContext } from "./MongoParser.js";
import { CollectionFindOneAndUpdateMethodContext } from "./MongoParser.js";
import { CollectionFindOneAndUpdateArgument1Context } from "./MongoParser.js";
import { CollectionFindOneAndUpdateArgument2Context } from "./MongoParser.js";
import { CollectionFindOneAndUpdateArgument3Context } from "./MongoParser.js";
import { CollectionFindOneAndReplaceMethodContext } from "./MongoParser.js";
import { CollectionFindOneAndReplaceArgument1Context } from "./MongoParser.js";
import { CollectionFindOneAndReplaceArgument2Context } from "./MongoParser.js";
import { CollectionFindOneAndReplaceArgument3Context } from "./MongoParser.js";
import { CollectionFindOneAndDeleteMethodContext } from "./MongoParser.js";
import { CollectionFindOneAndDeleteArgument1Context } from "./MongoParser.js";
import { CollectionFindOneAndDeleteArgument2Context } from "./MongoParser.js";
import { CollectionFindOneMethodContext } from "./MongoParser.js";
import { CollectionFindOneArgument1Context } from "./MongoParser.js";
import { CollectionFindOneArgument2Context } from "./MongoParser.js";
import { CollectionFindMethodContext } from "./MongoParser.js";
import { CollectionFindMethodArgument1Context } from "./MongoParser.js";
import { CollectionFindMethodArgument2Context } from "./MongoParser.js";
import { ExplainMethodContext } from "./MongoParser.js";
import { ExplainMethodArgumentContext } from "./MongoParser.js";
import { CollectionFindMethodModifierContext } from "./MongoParser.js";
import { SkipModifierContext } from "./MongoParser.js";
import { SkipModifierArgumentContext } from "./MongoParser.js";
import { LimitModifierContext } from "./MongoParser.js";
import { LimitModifierArgumentContext } from "./MongoParser.js";
import { FilterModifierContext } from "./MongoParser.js";
import { FilterModifierArgumentContext } from "./MongoParser.js";
import { MinModifierContext } from "./MongoParser.js";
import { MinModifierArgumentContext } from "./MongoParser.js";
import { MaxModifierContext } from "./MongoParser.js";
import { MaxModifierArgumentContext } from "./MongoParser.js";
import { HintModifierContext } from "./MongoParser.js";
import { HintModifierArgumentContext } from "./MongoParser.js";
import { ReturnKeyModifierContext } from "./MongoParser.js";
import { ReturnKeyModifierArgumentContext } from "./MongoParser.js";
import { ShowRecordIdModifierContext } from "./MongoParser.js";
import { ShowRecordIdModifierArgumentContext } from "./MongoParser.js";
import { SortModifierContext } from "./MongoParser.js";
import { SortModifierArgument1Context } from "./MongoParser.js";
import { SortModifierArgument2Context } from "./MongoParser.js";
import { ReservedKeywordContext } from "./MongoParser.js";
import { ObjectContext } from "./MongoParser.js";
import { PairContext } from "./MongoParser.js";
import { BooleanContext } from "./MongoParser.js";
import { KeyContext } from "./MongoParser.js";
import { IdentifierContext } from "./MongoParser.js";
import { ValueContext } from "./MongoParser.js";
import { NumberLongFunctionContext } from "./MongoParser.js";
import { NumberLongFunctionArgument1Context } from "./MongoParser.js";
import { NumberLongFunctionArgument2Context } from "./MongoParser.js";
import { NumberDecimalFunctionContext } from "./MongoParser.js";
import { NumberDecimalFunctionArgumentContext } from "./MongoParser.js";
import { NumberIntFunctionContext } from "./MongoParser.js";
import { NumberIntFunctionArgumentContext } from "./MongoParser.js";
import { MaxKeyFunctionContext } from "./MongoParser.js";
import { MinKeyFunctionContext } from "./MongoParser.js";
import { UuidFunctionContext } from "./MongoParser.js";
import { UuidFunctionArgumentContext } from "./MongoParser.js";
import { ObjectIdFunctionContext } from "./MongoParser.js";
import { ObjectIdFunctionArgumentContext } from "./MongoParser.js";
import { DateFunctionContext } from "./MongoParser.js";
import { DateFunctionArgumentContext } from "./MongoParser.js";
import { StringContext } from "./MongoParser.js";
import { NullContext } from "./MongoParser.js";
import { ArrayContext } from "./MongoParser.js";
import { NumberContext } from "./MongoParser.js";


/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by `MongoParser`.
 *
 * @param <Result> The return type of the visit operation. Use `void` for
 * operations with no return type.
 */
export class MongoParserVisitor<Result> extends AbstractParseTreeVisitor<Result> {
    /**
     * Visit a parse tree produced by `MongoParser.root`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRoot?: (ctx: RootContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.commands`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommands?: (ctx: CommandsContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.command`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommand?: (ctx: CommandContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseOperation`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseOperation?: (ctx: DatabaseOperationContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseMethod?: (ctx: DatabaseMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseAdminMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseAdminMethod?: (ctx: DatabaseAdminMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.adminMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAdminMethod?: (ctx: AdminMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.validateCollectionMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitValidateCollectionMethod?: (ctx: ValidateCollectionMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.validateCollectionArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitValidateCollectionArgument1?: (ctx: ValidateCollectionArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.validateCollectionArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitValidateCollectionArgument2?: (ctx: ValidateCollectionArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.serverStatusMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitServerStatusMethod?: (ctx: ServerStatusMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.serverStatusArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitServerStatusArgument?: (ctx: ServerStatusArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.pingMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPingMethod?: (ctx: PingMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.pingArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPingArgument?: (ctx: PingArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.listDatabasesMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitListDatabasesMethod?: (ctx: ListDatabasesMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.listDatabasesArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitListDatabasesArgument?: (ctx: ListDatabasesArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.replSetGetStatusMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReplSetGetStatusMethod?: (ctx: ReplSetGetStatusMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.replSetGetStatusArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReplSetGetStatusArgument?: (ctx: ReplSetGetStatusArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.serverInfoMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitServerInfoMethod?: (ctx: ServerInfoMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.serverInfoArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitServerInfoArgument?: (ctx: ServerInfoArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.buildInfoMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBuildInfoMethod?: (ctx: BuildInfoMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.buildInfoArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBuildInfoArgument?: (ctx: BuildInfoArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseSetProfilingLevelMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseSetProfilingLevelMethod?: (ctx: DatabaseSetProfilingLevelMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseSetProfilingLevelArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseSetProfilingLevelArgument1?: (ctx: DatabaseSetProfilingLevelArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseSetProfilingLevelArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseSetProfilingLevelArgument2?: (ctx: DatabaseSetProfilingLevelArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseProfilingLevelMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseProfilingLevelMethod?: (ctx: DatabaseProfilingLevelMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseProfilingLevelArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseProfilingLevelArgument?: (ctx: DatabaseProfilingLevelArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseStatsMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseStatsMethod?: (ctx: DatabaseStatsMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseStatsArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseStatsArgument?: (ctx: DatabaseStatsArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseRunCursorCommandMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseRunCursorCommandMethod?: (ctx: DatabaseRunCursorCommandMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseRunCursorCommandArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseRunCursorCommandArgument1?: (ctx: DatabaseRunCursorCommandArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseRunCursorCommandArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseRunCursorCommandArgument2?: (ctx: DatabaseRunCursorCommandArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseIndexInformationMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseIndexInformationMethod?: (ctx: DatabaseIndexInformationMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseIndexInformationArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseIndexInformationArgument1?: (ctx: DatabaseIndexInformationArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseIndexInformationArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseIndexInformationArgument2?: (ctx: DatabaseIndexInformationArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseRemoveUserMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseRemoveUserMethod?: (ctx: DatabaseRemoveUserMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseRemoveUserArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseRemoveUserArgument1?: (ctx: DatabaseRemoveUserArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.quotedUsername`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitQuotedUsername?: (ctx: QuotedUsernameContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseRemoveUserArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseRemoveUserArgument2?: (ctx: DatabaseRemoveUserArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseCreateIndexMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseCreateIndexMethod?: (ctx: DatabaseCreateIndexMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseCreateIndexArgument3`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseCreateIndexArgument3?: (ctx: DatabaseCreateIndexArgument3Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseCreateIndexArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseCreateIndexArgument2?: (ctx: DatabaseCreateIndexArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseCreateIndexArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseCreateIndexArgument1?: (ctx: DatabaseCreateIndexArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseDropDatabaseMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseDropDatabaseMethod?: (ctx: DatabaseDropDatabaseMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseDropDatabaseArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseDropDatabaseArgument?: (ctx: DatabaseDropDatabaseArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseDropCollectionMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseDropCollectionMethod?: (ctx: DatabaseDropCollectionMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseDropCollectionArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseDropCollectionArgument1?: (ctx: DatabaseDropCollectionArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseDropCollectionArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseDropCollectionArgument2?: (ctx: DatabaseDropCollectionArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseRenameCollectionMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseRenameCollectionMethod?: (ctx: DatabaseRenameCollectionMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseRenameCollectionArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseRenameCollectionArgument1?: (ctx: DatabaseRenameCollectionArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseRenameCollectionArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseRenameCollectionArgument2?: (ctx: DatabaseRenameCollectionArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseRenameCollectionArgument3`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseRenameCollectionArgument3?: (ctx: DatabaseRenameCollectionArgument3Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseListCollectionsMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseListCollectionsMethod?: (ctx: DatabaseListCollectionsMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseListCollectionsArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseListCollectionsArgument1?: (ctx: DatabaseListCollectionsArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseListCollectionsArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseListCollectionsArgument2?: (ctx: DatabaseListCollectionsArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseCommandMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseCommandMethod?: (ctx: DatabaseCommandMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseCommandArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseCommandArgument1?: (ctx: DatabaseCommandArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseCommandArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseCommandArgument2?: (ctx: DatabaseCommandArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseCreateCollectionMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseCreateCollectionMethod?: (ctx: DatabaseCreateCollectionMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseCreateCollectionArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseCreateCollectionArgument1?: (ctx: DatabaseCreateCollectionArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseCreateCollectionArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseCreateCollectionArgument2?: (ctx: DatabaseCreateCollectionArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.databaseCollectionMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseCollectionMethod?: (ctx: DatabaseCollectionMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.quotedCollectionName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitQuotedCollectionName?: (ctx: QuotedCollectionNameContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionOperation`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionOperation?: (ctx: CollectionOperationContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionName?: (ctx: CollectionNameContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionMethod?: (ctx: CollectionMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.aggregateMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAggregateMethod?: (ctx: AggregateMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.aggregateArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAggregateArgument2?: (ctx: AggregateArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.aggregateArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAggregateArgument1?: (ctx: AggregateArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDistinctMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDistinctMethod?: (ctx: CollectionDistinctMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDistinctArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDistinctArgument1?: (ctx: CollectionDistinctArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDistinctArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDistinctArgument2?: (ctx: CollectionDistinctArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDistinctArgument3`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDistinctArgument3?: (ctx: CollectionDistinctArgument3Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionCountDocumentsMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionCountDocumentsMethod?: (ctx: CollectionCountDocumentsMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionCountDocumentsArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionCountDocumentsArgument2?: (ctx: CollectionCountDocumentsArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionCountDocumentsArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionCountDocumentsArgument1?: (ctx: CollectionCountDocumentsArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionEstimatedDocumentCountMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionEstimatedDocumentCountMethod?: (ctx: CollectionEstimatedDocumentCountMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionEstimatedDocumentCountArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionEstimatedDocumentCountArgument?: (ctx: CollectionEstimatedDocumentCountArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionIndexInformationMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionIndexInformationMethod?: (ctx: CollectionIndexInformationMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionIndexInformationArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionIndexInformationArgument?: (ctx: CollectionIndexInformationArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionIndexExistsMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionIndexExistsMethod?: (ctx: CollectionIndexExistsMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionIndexExistsArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionIndexExistsArgument2?: (ctx: CollectionIndexExistsArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionIndexExistsArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionIndexExistsArgument1?: (ctx: CollectionIndexExistsArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.indexName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIndexName?: (ctx: IndexNameContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionIndexesMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionIndexesMethod?: (ctx: CollectionIndexesMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionIndexesArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionIndexesArgument?: (ctx: CollectionIndexesArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionListIndexesMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionListIndexesMethod?: (ctx: CollectionListIndexesMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionListIndexesArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionListIndexesArgument?: (ctx: CollectionListIndexesArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDropIndexesMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDropIndexesMethod?: (ctx: CollectionDropIndexesMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDropIndexesArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDropIndexesArgument?: (ctx: CollectionDropIndexesArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDropIndexMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDropIndexMethod?: (ctx: CollectionDropIndexMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDropIndexArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDropIndexArgument2?: (ctx: CollectionDropIndexArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDropIndexArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDropIndexArgument1?: (ctx: CollectionDropIndexArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionCreateIndexesMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionCreateIndexesMethod?: (ctx: CollectionCreateIndexesMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionCreateIndexesArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionCreateIndexesArgument2?: (ctx: CollectionCreateIndexesArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionCreateIndexesArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionCreateIndexesArgument1?: (ctx: CollectionCreateIndexesArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionCreateIndexMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionCreateIndexMethod?: (ctx: CollectionCreateIndexMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionCreateIndexArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionCreateIndexArgument2?: (ctx: CollectionCreateIndexArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionCreateIndexArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionCreateIndexArgument1?: (ctx: CollectionCreateIndexArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionIsCappedMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionIsCappedMethod?: (ctx: CollectionIsCappedMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionIsCappedArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionIsCappedArgument?: (ctx: CollectionIsCappedArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDropMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDropMethod?: (ctx: CollectionDropMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDropArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDropArgument?: (ctx: CollectionDropArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionRenameMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionRenameMethod?: (ctx: CollectionRenameMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionRenameArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionRenameArgument1?: (ctx: CollectionRenameArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionRenameArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionRenameArgument2?: (ctx: CollectionRenameArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDeleteManyMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDeleteManyMethod?: (ctx: CollectionDeleteManyMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDeleteManyArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDeleteManyArgument1?: (ctx: CollectionDeleteManyArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDeleteManyArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDeleteManyArgument2?: (ctx: CollectionDeleteManyArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDeleteOneMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDeleteOneMethod?: (ctx: CollectionDeleteOneMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDeleteOneArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDeleteOneArgument1?: (ctx: CollectionDeleteOneArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionDeleteOneArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionDeleteOneArgument2?: (ctx: CollectionDeleteOneArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionReplaceOneMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionReplaceOneMethod?: (ctx: CollectionReplaceOneMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionReplaceOneArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionReplaceOneArgument1?: (ctx: CollectionReplaceOneArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionReplaceOneArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionReplaceOneArgument2?: (ctx: CollectionReplaceOneArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionReplaceOneArgument3`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionReplaceOneArgument3?: (ctx: CollectionReplaceOneArgument3Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionUpdateManyMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionUpdateManyMethod?: (ctx: CollectionUpdateManyMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionUpdateManyArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionUpdateManyArgument1?: (ctx: CollectionUpdateManyArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionUpdateManyArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionUpdateManyArgument2?: (ctx: CollectionUpdateManyArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionUpdateManyArgument3`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionUpdateManyArgument3?: (ctx: CollectionUpdateManyArgument3Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionUpdateOneMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionUpdateOneMethod?: (ctx: CollectionUpdateOneMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionUpdateOneArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionUpdateOneArgument1?: (ctx: CollectionUpdateOneArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionUpdateOneArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionUpdateOneArgument2?: (ctx: CollectionUpdateOneArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionUpdateOneArgument3`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionUpdateOneArgument3?: (ctx: CollectionUpdateOneArgument3Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionBulkWriteMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionBulkWriteMethod?: (ctx: CollectionBulkWriteMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionBulkWriteArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionBulkWriteArgument1?: (ctx: CollectionBulkWriteArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionBulkWriteArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionBulkWriteArgument2?: (ctx: CollectionBulkWriteArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionInsertManyMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionInsertManyMethod?: (ctx: CollectionInsertManyMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionInsertManyArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionInsertManyArgument1?: (ctx: CollectionInsertManyArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionInsertManyArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionInsertManyArgument2?: (ctx: CollectionInsertManyArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionInsertOneMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionInsertOneMethod?: (ctx: CollectionInsertOneMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionInsertOneArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionInsertOneArgument1?: (ctx: CollectionInsertOneArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionInsertOneArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionInsertOneArgument2?: (ctx: CollectionInsertOneArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.documentToInsert`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDocumentToInsert?: (ctx: DocumentToInsertContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneAndUpdateMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneAndUpdateMethod?: (ctx: CollectionFindOneAndUpdateMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneAndUpdateArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneAndUpdateArgument1?: (ctx: CollectionFindOneAndUpdateArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneAndUpdateArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneAndUpdateArgument2?: (ctx: CollectionFindOneAndUpdateArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneAndUpdateArgument3`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneAndUpdateArgument3?: (ctx: CollectionFindOneAndUpdateArgument3Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneAndReplaceMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneAndReplaceMethod?: (ctx: CollectionFindOneAndReplaceMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneAndReplaceArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneAndReplaceArgument1?: (ctx: CollectionFindOneAndReplaceArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneAndReplaceArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneAndReplaceArgument2?: (ctx: CollectionFindOneAndReplaceArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneAndReplaceArgument3`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneAndReplaceArgument3?: (ctx: CollectionFindOneAndReplaceArgument3Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneAndDeleteMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneAndDeleteMethod?: (ctx: CollectionFindOneAndDeleteMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneAndDeleteArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneAndDeleteArgument1?: (ctx: CollectionFindOneAndDeleteArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneAndDeleteArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneAndDeleteArgument2?: (ctx: CollectionFindOneAndDeleteArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneMethod?: (ctx: CollectionFindOneMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneArgument1?: (ctx: CollectionFindOneArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindOneArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindOneArgument2?: (ctx: CollectionFindOneArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindMethod?: (ctx: CollectionFindMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindMethodArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindMethodArgument1?: (ctx: CollectionFindMethodArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindMethodArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindMethodArgument2?: (ctx: CollectionFindMethodArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.explainMethod`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExplainMethod?: (ctx: ExplainMethodContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.explainMethodArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExplainMethodArgument?: (ctx: ExplainMethodArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.collectionFindMethodModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCollectionFindMethodModifier?: (ctx: CollectionFindMethodModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.skipModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSkipModifier?: (ctx: SkipModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.skipModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSkipModifierArgument?: (ctx: SkipModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.limitModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLimitModifier?: (ctx: LimitModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.limitModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLimitModifierArgument?: (ctx: LimitModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.filterModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFilterModifier?: (ctx: FilterModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.filterModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFilterModifierArgument?: (ctx: FilterModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.minModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMinModifier?: (ctx: MinModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.minModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMinModifierArgument?: (ctx: MinModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.maxModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMaxModifier?: (ctx: MaxModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.maxModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMaxModifierArgument?: (ctx: MaxModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.hintModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitHintModifier?: (ctx: HintModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.hintModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitHintModifierArgument?: (ctx: HintModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.returnKeyModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReturnKeyModifier?: (ctx: ReturnKeyModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.returnKeyModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReturnKeyModifierArgument?: (ctx: ReturnKeyModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.showRecordIdModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitShowRecordIdModifier?: (ctx: ShowRecordIdModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.showRecordIdModifierArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitShowRecordIdModifierArgument?: (ctx: ShowRecordIdModifierArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.sortModifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSortModifier?: (ctx: SortModifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.sortModifierArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSortModifierArgument1?: (ctx: SortModifierArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.sortModifierArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSortModifierArgument2?: (ctx: SortModifierArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.reservedKeyword`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReservedKeyword?: (ctx: ReservedKeywordContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.object`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitObject?: (ctx: ObjectContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.pair`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPair?: (ctx: PairContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.boolean`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBoolean?: (ctx: BooleanContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.key`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitKey?: (ctx: KeyContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.identifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIdentifier?: (ctx: IdentifierContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.value`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitValue?: (ctx: ValueContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.numberLongFunction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumberLongFunction?: (ctx: NumberLongFunctionContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.numberLongFunctionArgument1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumberLongFunctionArgument1?: (ctx: NumberLongFunctionArgument1Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.numberLongFunctionArgument2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumberLongFunctionArgument2?: (ctx: NumberLongFunctionArgument2Context) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.numberDecimalFunction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumberDecimalFunction?: (ctx: NumberDecimalFunctionContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.numberDecimalFunctionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumberDecimalFunctionArgument?: (ctx: NumberDecimalFunctionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.numberIntFunction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumberIntFunction?: (ctx: NumberIntFunctionContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.numberIntFunctionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumberIntFunctionArgument?: (ctx: NumberIntFunctionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.maxKeyFunction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMaxKeyFunction?: (ctx: MaxKeyFunctionContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.minKeyFunction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMinKeyFunction?: (ctx: MinKeyFunctionContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.uuidFunction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitUuidFunction?: (ctx: UuidFunctionContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.uuidFunctionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitUuidFunctionArgument?: (ctx: UuidFunctionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.objectIdFunction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitObjectIdFunction?: (ctx: ObjectIdFunctionContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.objectIdFunctionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitObjectIdFunctionArgument?: (ctx: ObjectIdFunctionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.dateFunction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDateFunction?: (ctx: DateFunctionContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.dateFunctionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDateFunctionArgument?: (ctx: DateFunctionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.string`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitString?: (ctx: StringContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.null`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNull?: (ctx: NullContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.array`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitArray?: (ctx: ArrayContext) => Result;
    /**
     * Visit a parse tree produced by `MongoParser.number`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumber?: (ctx: NumberContext) => Result;
}
