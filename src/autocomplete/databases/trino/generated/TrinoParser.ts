////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/trino/grammar/TrinoParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { TrinoParserVisitor } from "./TrinoParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class TrinoParser extends antlr.Parser {
    public static readonly ABSENT_ = 1;
    public static readonly ADD_ = 2;
    public static readonly ADMIN_ = 3;
    public static readonly AFTER_ = 4;
    public static readonly ALL_ = 5;
    public static readonly ALTER_ = 6;
    public static readonly ANALYZE_ = 7;
    public static readonly AND_ = 8;
    public static readonly ANY_ = 9;
    public static readonly ARRAY_ = 10;
    public static readonly AS_ = 11;
    public static readonly ASC_ = 12;
    public static readonly AT_ = 13;
    public static readonly AUTHORIZATION_ = 14;
    public static readonly BEGIN_ = 15;
    public static readonly BERNOULLI_ = 16;
    public static readonly BETWEEN_ = 17;
    public static readonly BOTH_ = 18;
    public static readonly BY_ = 19;
    public static readonly CALL_ = 20;
    public static readonly CALLED_ = 21;
    public static readonly CASCADE_ = 22;
    public static readonly CASE_ = 23;
    public static readonly CAST_ = 24;
    public static readonly CATALOG_ = 25;
    public static readonly CATALOGS_ = 26;
    public static readonly COLUMN_ = 27;
    public static readonly COLUMNS_ = 28;
    public static readonly COMMENT_ = 29;
    public static readonly COMMIT_ = 30;
    public static readonly COMMITTED_ = 31;
    public static readonly CONDITIONAL_ = 32;
    public static readonly CONSTRAINT_ = 33;
    public static readonly COUNT_ = 34;
    public static readonly COPARTITION_ = 35;
    public static readonly CREATE_ = 36;
    public static readonly CROSS_ = 37;
    public static readonly CUBE_ = 38;
    public static readonly CURRENT_ = 39;
    public static readonly CURRENT_CATALOG_ = 40;
    public static readonly CURRENT_DATE_ = 41;
    public static readonly CURRENT_PATH_ = 42;
    public static readonly CURRENT_ROLE_ = 43;
    public static readonly CURRENT_SCHEMA_ = 44;
    public static readonly CURRENT_TIME_ = 45;
    public static readonly CURRENT_TIMESTAMP_ = 46;
    public static readonly CURRENT_USER_ = 47;
    public static readonly DATA_ = 48;
    public static readonly DATE_ = 49;
    public static readonly DAY_ = 50;
    public static readonly DEALLOCATE_ = 51;
    public static readonly DECLARE_ = 52;
    public static readonly DEFAULT_ = 53;
    public static readonly DEFINE_ = 54;
    public static readonly DEFINER_ = 55;
    public static readonly DELETE_ = 56;
    public static readonly DENY_ = 57;
    public static readonly DESC_ = 58;
    public static readonly DESCRIBE_ = 59;
    public static readonly DESCRIPTOR_ = 60;
    public static readonly DETERMINISTIC_ = 61;
    public static readonly DISTINCT_ = 62;
    public static readonly DISTRIBUTED_ = 63;
    public static readonly DO_ = 64;
    public static readonly DOUBLE_ = 65;
    public static readonly DROP_ = 66;
    public static readonly ELSE_ = 67;
    public static readonly EMPTY_ = 68;
    public static readonly ELSEIF_ = 69;
    public static readonly ENCODING_ = 70;
    public static readonly END_ = 71;
    public static readonly ERROR_ = 72;
    public static readonly ESCAPE_ = 73;
    public static readonly EXCEPT_ = 74;
    public static readonly EXCLUDING_ = 75;
    public static readonly EXECUTE_ = 76;
    public static readonly EXISTS_ = 77;
    public static readonly EXPLAIN_ = 78;
    public static readonly EXTRACT_ = 79;
    public static readonly FALSE_ = 80;
    public static readonly FETCH_ = 81;
    public static readonly FILTER_ = 82;
    public static readonly FINAL_ = 83;
    public static readonly FIRST_ = 84;
    public static readonly FOLLOWING_ = 85;
    public static readonly FOR_ = 86;
    public static readonly FORMAT_ = 87;
    public static readonly FROM_ = 88;
    public static readonly FULL_ = 89;
    public static readonly FUNCTION_ = 90;
    public static readonly FUNCTIONS_ = 91;
    public static readonly GRACE_ = 92;
    public static readonly GRANT_ = 93;
    public static readonly GRANTED_ = 94;
    public static readonly GRANTS_ = 95;
    public static readonly GRAPHVIZ_ = 96;
    public static readonly GROUP_ = 97;
    public static readonly GROUPING_ = 98;
    public static readonly GROUPS_ = 99;
    public static readonly HAVING_ = 100;
    public static readonly HOUR_ = 101;
    public static readonly IF_ = 102;
    public static readonly IGNORE_ = 103;
    public static readonly IMMEDIATE_ = 104;
    public static readonly IN_ = 105;
    public static readonly INCLUDING_ = 106;
    public static readonly INITIAL_ = 107;
    public static readonly INNER_ = 108;
    public static readonly INPUT_ = 109;
    public static readonly INSERT_ = 110;
    public static readonly INTERSECT_ = 111;
    public static readonly INTERVAL_ = 112;
    public static readonly INTO_ = 113;
    public static readonly INVOKER_ = 114;
    public static readonly IO_ = 115;
    public static readonly IS_ = 116;
    public static readonly ISOLATION_ = 117;
    public static readonly ITERATE_ = 118;
    public static readonly JOIN_ = 119;
    public static readonly JSON_ = 120;
    public static readonly JSON_ARRAY_ = 121;
    public static readonly JSON_EXISTS_ = 122;
    public static readonly JSON_OBJECT_ = 123;
    public static readonly JSON_QUERY_ = 124;
    public static readonly JSON_TABLE_ = 125;
    public static readonly JSON_VALUE_ = 126;
    public static readonly KEEP_ = 127;
    public static readonly KEY_ = 128;
    public static readonly KEYS_ = 129;
    public static readonly LANGUAGE_ = 130;
    public static readonly LAST_ = 131;
    public static readonly LATERAL_ = 132;
    public static readonly LEADING_ = 133;
    public static readonly LEAVE_ = 134;
    public static readonly LEFT_ = 135;
    public static readonly LEVEL_ = 136;
    public static readonly LIKE_ = 137;
    public static readonly LIMIT_ = 138;
    public static readonly LISTAGG_ = 139;
    public static readonly LOCAL_ = 140;
    public static readonly LOCALTIME_ = 141;
    public static readonly LOCALTIMESTAMP_ = 142;
    public static readonly LOGICAL_ = 143;
    public static readonly LOOP_ = 144;
    public static readonly MAP_ = 145;
    public static readonly MATCH_ = 146;
    public static readonly MATCHED_ = 147;
    public static readonly MATCHES_ = 148;
    public static readonly MATCH_RECOGNIZE_ = 149;
    public static readonly MATERIALIZED_ = 150;
    public static readonly MEASURES_ = 151;
    public static readonly MERGE_ = 152;
    public static readonly MINUTE_ = 153;
    public static readonly MONTH_ = 154;
    public static readonly NATURAL_ = 155;
    public static readonly NESTED_ = 156;
    public static readonly NEXT_ = 157;
    public static readonly NFC_ = 158;
    public static readonly NFD_ = 159;
    public static readonly NFKC_ = 160;
    public static readonly NFKD_ = 161;
    public static readonly NO_ = 162;
    public static readonly NONE_ = 163;
    public static readonly NORMALIZE_ = 164;
    public static readonly NOT_ = 165;
    public static readonly NULL_ = 166;
    public static readonly NULLIF_ = 167;
    public static readonly NULLS_ = 168;
    public static readonly OBJECT_ = 169;
    public static readonly OF_ = 170;
    public static readonly OFFSET_ = 171;
    public static readonly OMIT_ = 172;
    public static readonly ON_ = 173;
    public static readonly ONE_ = 174;
    public static readonly ONLY_ = 175;
    public static readonly OPTION_ = 176;
    public static readonly OR_ = 177;
    public static readonly ORDER_ = 178;
    public static readonly ORDINALITY_ = 179;
    public static readonly OUTER_ = 180;
    public static readonly OUTPUT_ = 181;
    public static readonly OVER_ = 182;
    public static readonly OVERFLOW_ = 183;
    public static readonly PARTITION_ = 184;
    public static readonly PARTITIONS_ = 185;
    public static readonly PASSING_ = 186;
    public static readonly PAST_ = 187;
    public static readonly PATH_ = 188;
    public static readonly PATTERN_ = 189;
    public static readonly PER_ = 190;
    public static readonly PERIOD_ = 191;
    public static readonly PERMUTE_ = 192;
    public static readonly PLAN_ = 193;
    public static readonly POSITION_ = 194;
    public static readonly PRECEDING_ = 195;
    public static readonly PRECISION_ = 196;
    public static readonly PREPARE_ = 197;
    public static readonly PRIVILEGES_ = 198;
    public static readonly PROPERTIES_ = 199;
    public static readonly PRUNE_ = 200;
    public static readonly QUOTES_ = 201;
    public static readonly RANGE_ = 202;
    public static readonly READ_ = 203;
    public static readonly RECURSIVE_ = 204;
    public static readonly REFRESH_ = 205;
    public static readonly RENAME_ = 206;
    public static readonly REPEAT_ = 207;
    public static readonly REPEATABLE_ = 208;
    public static readonly REPLACE_ = 209;
    public static readonly RESET_ = 210;
    public static readonly RESPECT_ = 211;
    public static readonly RESTRICT_ = 212;
    public static readonly RETURN_ = 213;
    public static readonly RETURNING_ = 214;
    public static readonly RETURNS_ = 215;
    public static readonly REVOKE_ = 216;
    public static readonly RIGHT_ = 217;
    public static readonly ROLE_ = 218;
    public static readonly ROLES_ = 219;
    public static readonly ROLLBACK_ = 220;
    public static readonly ROLLUP_ = 221;
    public static readonly ROW_ = 222;
    public static readonly ROWS_ = 223;
    public static readonly RUNNING_ = 224;
    public static readonly SCALAR_ = 225;
    public static readonly SCHEMA_ = 226;
    public static readonly SCHEMAS_ = 227;
    public static readonly SECOND_ = 228;
    public static readonly SECURITY_ = 229;
    public static readonly SEEK_ = 230;
    public static readonly SELECT_ = 231;
    public static readonly SERIALIZABLE_ = 232;
    public static readonly SESSION_ = 233;
    public static readonly SET_ = 234;
    public static readonly SETS_ = 235;
    public static readonly SHOW_ = 236;
    public static readonly SKIP_ = 237;
    public static readonly SOME_ = 238;
    public static readonly START_ = 239;
    public static readonly STATS_ = 240;
    public static readonly SUBSET_ = 241;
    public static readonly SUBSTRING_ = 242;
    public static readonly SYSTEM_ = 243;
    public static readonly TABLE_ = 244;
    public static readonly TABLES_ = 245;
    public static readonly TABLESAMPLE_ = 246;
    public static readonly TEXT_ = 247;
    public static readonly TEXT_STRING_ = 248;
    public static readonly THEN_ = 249;
    public static readonly TIES_ = 250;
    public static readonly TIME_ = 251;
    public static readonly TIMESTAMP_ = 252;
    public static readonly TO_ = 253;
    public static readonly TRAILING_ = 254;
    public static readonly TRANSACTION_ = 255;
    public static readonly TRIM_ = 256;
    public static readonly TRUE_ = 257;
    public static readonly TRUNCATE_ = 258;
    public static readonly TRY_CAST_ = 259;
    public static readonly TYPE_ = 260;
    public static readonly UESCAPE_ = 261;
    public static readonly UNBOUNDED_ = 262;
    public static readonly UNCOMMITTED_ = 263;
    public static readonly UNCONDITIONAL_ = 264;
    public static readonly UNION_ = 265;
    public static readonly UNIQUE_ = 266;
    public static readonly UNKNOWN_ = 267;
    public static readonly UNMATCHED_ = 268;
    public static readonly UNNEST_ = 269;
    public static readonly UNTIL_ = 270;
    public static readonly UPDATE_ = 271;
    public static readonly USE_ = 272;
    public static readonly USER_ = 273;
    public static readonly USING_ = 274;
    public static readonly UTF16_ = 275;
    public static readonly UTF32_ = 276;
    public static readonly UTF8_ = 277;
    public static readonly VALIDATE_ = 278;
    public static readonly VALUE_ = 279;
    public static readonly VALUES_ = 280;
    public static readonly VERBOSE_ = 281;
    public static readonly VERSION_ = 282;
    public static readonly VIEW_ = 283;
    public static readonly WHEN_ = 284;
    public static readonly WHERE_ = 285;
    public static readonly WHILE_ = 286;
    public static readonly WINDOW_ = 287;
    public static readonly WITH_ = 288;
    public static readonly WITHIN_ = 289;
    public static readonly WITHOUT_ = 290;
    public static readonly WORK_ = 291;
    public static readonly WRAPPER_ = 292;
    public static readonly WRITE_ = 293;
    public static readonly YEAR_ = 294;
    public static readonly ZONE_ = 295;
    public static readonly EQ_ = 296;
    public static readonly NEQ_ = 297;
    public static readonly LT_ = 298;
    public static readonly LTE_ = 299;
    public static readonly GT_ = 300;
    public static readonly GTE_ = 301;
    public static readonly PLUS_ = 302;
    public static readonly MINUS_ = 303;
    public static readonly ASTERISK_ = 304;
    public static readonly SLASH_ = 305;
    public static readonly PERCENT_ = 306;
    public static readonly CONCAT_ = 307;
    public static readonly QUESTION_MARK_ = 308;
    public static readonly SEMICOLON_ = 309;
    public static readonly DOT_ = 310;
    public static readonly COLON_ = 311;
    public static readonly COMMA_ = 312;
    public static readonly LPAREN_ = 313;
    public static readonly RPAREN_ = 314;
    public static readonly LSQUARE_ = 315;
    public static readonly RSQUARE_ = 316;
    public static readonly LCURLY_ = 317;
    public static readonly RCURLY_ = 318;
    public static readonly LCURLYHYPHEN_ = 319;
    public static readonly RCURLYHYPHEN_ = 320;
    public static readonly LARROW_ = 321;
    public static readonly RARROW_ = 322;
    public static readonly RDOUBLEARROW_ = 323;
    public static readonly VBAR_ = 324;
    public static readonly DOLLAR_ = 325;
    public static readonly CARET_ = 326;
    public static readonly STRING_ = 327;
    public static readonly UNICODE_STRING_ = 328;
    public static readonly BINARY_LITERAL_ = 329;
    public static readonly INTEGER_VALUE_ = 330;
    public static readonly DECIMAL_VALUE_ = 331;
    public static readonly DOUBLE_VALUE_ = 332;
    public static readonly IDENTIFIER_ = 333;
    public static readonly DIGIT_IDENTIFIER_ = 334;
    public static readonly QUOTED_IDENTIFIER_ = 335;
    public static readonly BACKQUOTED_IDENTIFIER_ = 336;
    public static readonly SIMPLE_COMMENT_ = 337;
    public static readonly BRACKETED_COMMENT_ = 338;
    public static readonly WS_ = 339;
    public static readonly UNRECOGNIZED_ = 340;
    public static readonly RULE_parse = 0;
    public static readonly RULE_statements = 1;
    public static readonly RULE_statement = 2;
    public static readonly RULE_insertStatement = 3;
    public static readonly RULE_updateStatement = 4;
    public static readonly RULE_rootQuery = 5;
    public static readonly RULE_withFunction = 6;
    public static readonly RULE_query = 7;
    public static readonly RULE_with = 8;
    public static readonly RULE_tableElement = 9;
    public static readonly RULE_columnDefinition = 10;
    public static readonly RULE_likeClause = 11;
    public static readonly RULE_properties = 12;
    public static readonly RULE_propertyAssignments = 13;
    public static readonly RULE_property = 14;
    public static readonly RULE_propertyValue = 15;
    public static readonly RULE_queryNoWith = 16;
    public static readonly RULE_limitRowCount = 17;
    public static readonly RULE_rowCount = 18;
    public static readonly RULE_queryTerm = 19;
    public static readonly RULE_queryPrimary = 20;
    public static readonly RULE_sortItem = 21;
    public static readonly RULE_querySpecification = 22;
    public static readonly RULE_fromClause = 23;
    public static readonly RULE_groupBy = 24;
    public static readonly RULE_groupingElement = 25;
    public static readonly RULE_groupingSet = 26;
    public static readonly RULE_windowDefinition = 27;
    public static readonly RULE_windowSpecification = 28;
    public static readonly RULE_namedQuery = 29;
    public static readonly RULE_setQuantifier = 30;
    public static readonly RULE_selectItem = 31;
    public static readonly RULE_relation = 32;
    public static readonly RULE_joinType = 33;
    public static readonly RULE_joinCriteria = 34;
    public static readonly RULE_sampledRelation = 35;
    public static readonly RULE_sampleType = 36;
    public static readonly RULE_trimsSpecification = 37;
    public static readonly RULE_listAggOverflowBehavior = 38;
    public static readonly RULE_listaggCountIndication = 39;
    public static readonly RULE_patternRecognition = 40;
    public static readonly RULE_measureDefinition = 41;
    public static readonly RULE_rowsPerMatch = 42;
    public static readonly RULE_emptyMatchHandling = 43;
    public static readonly RULE_skipTo = 44;
    public static readonly RULE_subsetDefinition = 45;
    public static readonly RULE_variableDefinition = 46;
    public static readonly RULE_aliasedRelation = 47;
    public static readonly RULE_columnAliases = 48;
    public static readonly RULE_relationPrimary = 49;
    public static readonly RULE_tableFunctionCall = 50;
    public static readonly RULE_tableFunctionArgument = 51;
    public static readonly RULE_tableArgument = 52;
    public static readonly RULE_tableArgumentRelation = 53;
    public static readonly RULE_descriptorArgument = 54;
    public static readonly RULE_descriptorField = 55;
    public static readonly RULE_copartitionTables = 56;
    public static readonly RULE_expression = 57;
    public static readonly RULE_booleanExpression = 58;
    public static readonly RULE_predicate_ = 59;
    public static readonly RULE_valueExpression = 60;
    public static readonly RULE_primaryExpression = 61;
    public static readonly RULE_jsonPathInvocation = 62;
    public static readonly RULE_jsonValueExpression = 63;
    public static readonly RULE_jsonRepresentation = 64;
    public static readonly RULE_jsonArgument = 65;
    public static readonly RULE_jsonExistsErrorBehavior = 66;
    public static readonly RULE_jsonValueBehavior = 67;
    public static readonly RULE_jsonQueryWrapperBehavior = 68;
    public static readonly RULE_jsonQueryBehavior = 69;
    public static readonly RULE_jsonObjectMember = 70;
    public static readonly RULE_processingMode = 71;
    public static readonly RULE_nullTreatment = 72;
    public static readonly RULE_string_ = 73;
    public static readonly RULE_timeZoneSpecifier = 74;
    public static readonly RULE_comparisonOperator = 75;
    public static readonly RULE_comparisonQuantifier = 76;
    public static readonly RULE_booleanValue = 77;
    public static readonly RULE_interval = 78;
    public static readonly RULE_intervalField = 79;
    public static readonly RULE_normalForm = 80;
    public static readonly RULE_type = 81;
    public static readonly RULE_rowField = 82;
    public static readonly RULE_typeParameter = 83;
    public static readonly RULE_whenClause = 84;
    public static readonly RULE_filter = 85;
    public static readonly RULE_mergeCase = 86;
    public static readonly RULE_over = 87;
    public static readonly RULE_windowFrame = 88;
    public static readonly RULE_frameExtent = 89;
    public static readonly RULE_frameBound = 90;
    public static readonly RULE_rowPattern = 91;
    public static readonly RULE_patternPrimary = 92;
    public static readonly RULE_patternQuantifier = 93;
    public static readonly RULE_updateAssignment = 94;
    public static readonly RULE_explainOption = 95;
    public static readonly RULE_transactionMode = 96;
    public static readonly RULE_levelOfIsolation = 97;
    public static readonly RULE_callArgument = 98;
    public static readonly RULE_pathElement = 99;
    public static readonly RULE_pathSpecification = 100;
    public static readonly RULE_functionSpecification = 101;
    public static readonly RULE_functionDeclaration = 102;
    public static readonly RULE_parameterDeclaration = 103;
    public static readonly RULE_returnsClause = 104;
    public static readonly RULE_routineCharacteristic = 105;
    public static readonly RULE_controlStatement = 106;
    public static readonly RULE_caseStatementWhenClause = 107;
    public static readonly RULE_elseIfClause = 108;
    public static readonly RULE_elseClause = 109;
    public static readonly RULE_variableDeclaration = 110;
    public static readonly RULE_sqlStatementList = 111;
    public static readonly RULE_privilege = 112;
    public static readonly RULE_qualifiedName = 113;
    public static readonly RULE_queryPeriod = 114;
    public static readonly RULE_rangeType = 115;
    public static readonly RULE_grantor = 116;
    public static readonly RULE_principal = 117;
    public static readonly RULE_roleIdentifierList = 118;
    public static readonly RULE_identifier = 119;
    public static readonly RULE_catalogName = 120;
    public static readonly RULE_catalogIdentifier = 121;
    public static readonly RULE_schemaName = 122;
    public static readonly RULE_schemaIdentifier = 123;
    public static readonly RULE_tableReference = 124;
    public static readonly RULE_tableName = 125;
    public static readonly RULE_tableIdentifier = 126;
    public static readonly RULE_viewIdentifier = 127;
    public static readonly RULE_columnIdentifier = 128;
    public static readonly RULE_aliasIdentifier = 129;
    public static readonly RULE_newSchemaIdentifier = 130;
    public static readonly RULE_newTableIdentifier = 131;
    public static readonly RULE_newViewIdentifier = 132;
    public static readonly RULE_roleIdentifier = 133;
    public static readonly RULE_connectorIdentifier = 134;
    public static readonly RULE_number = 135;
    public static readonly RULE_authorizationUser = 136;
    public static readonly RULE_nonReserved = 137;

    public static readonly literalNames = [
        null, "'ABSENT'", "'ADD'", "'ADMIN'", "'AFTER'", "'ALL'", "'ALTER'", 
        "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", 
        "'AUTHORIZATION'", "'BEGIN'", "'BERNOULLI'", "'BETWEEN'", "'BOTH'", 
        "'BY'", "'CALL'", "'CALLED'", "'CASCADE'", "'CASE'", "'CAST'", "'CATALOG'", 
        "'CATALOGS'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", 
        "'COMMITTED'", "'CONDITIONAL'", "'CONSTRAINT'", "'COUNT'", "'COPARTITION'", 
        "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_CATALOG'", 
        "'CURRENT_DATE'", "'CURRENT_PATH'", "'CURRENT_ROLE'", "'CURRENT_SCHEMA'", 
        "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DATA'", 
        "'DATE'", "'DAY'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULT'", "'DEFINE'", 
        "'DEFINER'", "'DELETE'", "'DENY'", "'DESC'", "'DESCRIBE'", "'DESCRIPTOR'", 
        "'DETERMINISTIC'", "'DISTINCT'", "'DISTRIBUTED'", "'DO'", "'DOUBLE'", 
        "'DROP'", "'ELSE'", "'EMPTY'", "'ELSEIF'", "'ENCODING'", "'END'", 
        "'ERROR'", "'ESCAPE'", "'EXCEPT'", "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", 
        "'EXPLAIN'", "'EXTRACT'", "'FALSE'", "'FETCH'", "'FILTER'", "'FINAL'", 
        "'FIRST'", "'FOLLOWING'", "'FOR'", "'FORMAT'", "'FROM'", "'FULL'", 
        "'FUNCTION'", "'FUNCTIONS'", "'GRACE'", "'GRANT'", "'GRANTED'", 
        "'GRANTS'", "'GRAPHVIZ'", "'GROUP'", "'GROUPING'", "'GROUPS'", "'HAVING'", 
        "'HOUR'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IN'", "'INCLUDING'", 
        "'INITIAL'", "'INNER'", "'INPUT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", 
        "'INTO'", "'INVOKER'", "'IO'", "'IS'", "'ISOLATION'", "'ITERATE'", 
        "'JOIN'", "'JSON'", "'JSON_ARRAY'", "'JSON_EXISTS'", "'JSON_OBJECT'", 
        "'JSON_QUERY'", "'JSON_TABLE'", "'JSON_VALUE'", "'KEEP'", "'KEY'", 
        "'KEYS'", "'LANGUAGE'", "'LAST'", "'LATERAL'", "'LEADING'", "'LEAVE'", 
        "'LEFT'", "'LEVEL'", "'LIKE'", "'LIMIT'", "'LISTAGG'", "'LOCAL'", 
        "'LOCALTIME'", "'LOCALTIMESTAMP'", "'LOGICAL'", "'LOOP'", "'MAP'", 
        "'MATCH'", "'MATCHED'", "'MATCHES'", "'MATCH_RECOGNIZE'", "'MATERIALIZED'", 
        "'MEASURES'", "'MERGE'", "'MINUTE'", "'MONTH'", "'NATURAL'", "'NESTED'", 
        "'NEXT'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NONE'", 
        "'NORMALIZE'", "'NOT'", "'NULL'", "'NULLIF'", "'NULLS'", "'OBJECT'", 
        "'OF'", "'OFFSET'", "'OMIT'", "'ON'", "'ONE'", "'ONLY'", "'OPTION'", 
        "'OR'", "'ORDER'", "'ORDINALITY'", "'OUTER'", "'OUTPUT'", "'OVER'", 
        "'OVERFLOW'", "'PARTITION'", "'PARTITIONS'", "'PASSING'", "'PAST'", 
        "'PATH'", "'PATTERN'", "'PER'", "'PERIOD'", "'PERMUTE'", "'PLAN'", 
        "'POSITION'", "'PRECEDING'", "'PRECISION'", "'PREPARE'", "'PRIVILEGES'", 
        "'PROPERTIES'", "'PRUNE'", "'QUOTES'", "'RANGE'", "'READ'", "'RECURSIVE'", 
        "'REFRESH'", "'RENAME'", "'REPEAT'", "'REPEATABLE'", "'REPLACE'", 
        "'RESET'", "'RESPECT'", "'RESTRICT'", "'RETURN'", "'RETURNING'", 
        "'RETURNS'", "'REVOKE'", "'RIGHT'", "'ROLE'", "'ROLES'", "'ROLLBACK'", 
        "'ROLLUP'", "'ROW'", "'ROWS'", "'RUNNING'", "'SCALAR'", "'SCHEMA'", 
        "'SCHEMAS'", "'SECOND'", "'SECURITY'", "'SEEK'", "'SELECT'", "'SERIALIZABLE'", 
        "'SESSION'", "'SET'", "'SETS'", "'SHOW'", "'SKIP'", "'SOME'", "'START'", 
        "'STATS'", "'SUBSET'", "'SUBSTRING'", "'SYSTEM'", "'TABLE'", "'TABLES'", 
        "'TABLESAMPLE'", "'TEXT'", "'STRING'", "'THEN'", "'TIES'", "'TIME'", 
        "'TIMESTAMP'", "'TO'", "'TRAILING'", "'TRANSACTION'", "'TRIM'", 
        "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UESCAPE'", "'UNBOUNDED'", 
        "'UNCOMMITTED'", "'UNCONDITIONAL'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", 
        "'UNMATCHED'", "'UNNEST'", "'UNTIL'", "'UPDATE'", "'USE'", "'USER'", 
        "'USING'", "'UTF16'", "'UTF32'", "'UTF8'", "'VALIDATE'", "'VALUE'", 
        "'VALUES'", "'VERBOSE'", "'VERSION'", "'VIEW'", "'WHEN'", "'WHERE'", 
        "'WHILE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'WITHOUT'", "'WORK'", 
        "'WRAPPER'", "'WRITE'", "'YEAR'", "'ZONE'", "'='", null, "'<'", 
        "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", 
        "'?'", "';'", "'.'", "'_:'", "','", "'('", "')'", "'['", "']'", 
        "'{'", "'}'", "'{-'", "'-}'", "'<-'", "'->'", "'=>'", "'|'", "'$'", 
        "'^'"
    ];

    public static readonly symbolicNames = [
        null, "ABSENT_", "ADD_", "ADMIN_", "AFTER_", "ALL_", "ALTER_", "ANALYZE_", 
        "AND_", "ANY_", "ARRAY_", "AS_", "ASC_", "AT_", "AUTHORIZATION_", 
        "BEGIN_", "BERNOULLI_", "BETWEEN_", "BOTH_", "BY_", "CALL_", "CALLED_", 
        "CASCADE_", "CASE_", "CAST_", "CATALOG_", "CATALOGS_", "COLUMN_", 
        "COLUMNS_", "COMMENT_", "COMMIT_", "COMMITTED_", "CONDITIONAL_", 
        "CONSTRAINT_", "COUNT_", "COPARTITION_", "CREATE_", "CROSS_", "CUBE_", 
        "CURRENT_", "CURRENT_CATALOG_", "CURRENT_DATE_", "CURRENT_PATH_", 
        "CURRENT_ROLE_", "CURRENT_SCHEMA_", "CURRENT_TIME_", "CURRENT_TIMESTAMP_", 
        "CURRENT_USER_", "DATA_", "DATE_", "DAY_", "DEALLOCATE_", "DECLARE_", 
        "DEFAULT_", "DEFINE_", "DEFINER_", "DELETE_", "DENY_", "DESC_", 
        "DESCRIBE_", "DESCRIPTOR_", "DETERMINISTIC_", "DISTINCT_", "DISTRIBUTED_", 
        "DO_", "DOUBLE_", "DROP_", "ELSE_", "EMPTY_", "ELSEIF_", "ENCODING_", 
        "END_", "ERROR_", "ESCAPE_", "EXCEPT_", "EXCLUDING_", "EXECUTE_", 
        "EXISTS_", "EXPLAIN_", "EXTRACT_", "FALSE_", "FETCH_", "FILTER_", 
        "FINAL_", "FIRST_", "FOLLOWING_", "FOR_", "FORMAT_", "FROM_", "FULL_", 
        "FUNCTION_", "FUNCTIONS_", "GRACE_", "GRANT_", "GRANTED_", "GRANTS_", 
        "GRAPHVIZ_", "GROUP_", "GROUPING_", "GROUPS_", "HAVING_", "HOUR_", 
        "IF_", "IGNORE_", "IMMEDIATE_", "IN_", "INCLUDING_", "INITIAL_", 
        "INNER_", "INPUT_", "INSERT_", "INTERSECT_", "INTERVAL_", "INTO_", 
        "INVOKER_", "IO_", "IS_", "ISOLATION_", "ITERATE_", "JOIN_", "JSON_", 
        "JSON_ARRAY_", "JSON_EXISTS_", "JSON_OBJECT_", "JSON_QUERY_", "JSON_TABLE_", 
        "JSON_VALUE_", "KEEP_", "KEY_", "KEYS_", "LANGUAGE_", "LAST_", "LATERAL_", 
        "LEADING_", "LEAVE_", "LEFT_", "LEVEL_", "LIKE_", "LIMIT_", "LISTAGG_", 
        "LOCAL_", "LOCALTIME_", "LOCALTIMESTAMP_", "LOGICAL_", "LOOP_", 
        "MAP_", "MATCH_", "MATCHED_", "MATCHES_", "MATCH_RECOGNIZE_", "MATERIALIZED_", 
        "MEASURES_", "MERGE_", "MINUTE_", "MONTH_", "NATURAL_", "NESTED_", 
        "NEXT_", "NFC_", "NFD_", "NFKC_", "NFKD_", "NO_", "NONE_", "NORMALIZE_", 
        "NOT_", "NULL_", "NULLIF_", "NULLS_", "OBJECT_", "OF_", "OFFSET_", 
        "OMIT_", "ON_", "ONE_", "ONLY_", "OPTION_", "OR_", "ORDER_", "ORDINALITY_", 
        "OUTER_", "OUTPUT_", "OVER_", "OVERFLOW_", "PARTITION_", "PARTITIONS_", 
        "PASSING_", "PAST_", "PATH_", "PATTERN_", "PER_", "PERIOD_", "PERMUTE_", 
        "PLAN_", "POSITION_", "PRECEDING_", "PRECISION_", "PREPARE_", "PRIVILEGES_", 
        "PROPERTIES_", "PRUNE_", "QUOTES_", "RANGE_", "READ_", "RECURSIVE_", 
        "REFRESH_", "RENAME_", "REPEAT_", "REPEATABLE_", "REPLACE_", "RESET_", 
        "RESPECT_", "RESTRICT_", "RETURN_", "RETURNING_", "RETURNS_", "REVOKE_", 
        "RIGHT_", "ROLE_", "ROLES_", "ROLLBACK_", "ROLLUP_", "ROW_", "ROWS_", 
        "RUNNING_", "SCALAR_", "SCHEMA_", "SCHEMAS_", "SECOND_", "SECURITY_", 
        "SEEK_", "SELECT_", "SERIALIZABLE_", "SESSION_", "SET_", "SETS_", 
        "SHOW_", "SKIP_", "SOME_", "START_", "STATS_", "SUBSET_", "SUBSTRING_", 
        "SYSTEM_", "TABLE_", "TABLES_", "TABLESAMPLE_", "TEXT_", "TEXT_STRING_", 
        "THEN_", "TIES_", "TIME_", "TIMESTAMP_", "TO_", "TRAILING_", "TRANSACTION_", 
        "TRIM_", "TRUE_", "TRUNCATE_", "TRY_CAST_", "TYPE_", "UESCAPE_", 
        "UNBOUNDED_", "UNCOMMITTED_", "UNCONDITIONAL_", "UNION_", "UNIQUE_", 
        "UNKNOWN_", "UNMATCHED_", "UNNEST_", "UNTIL_", "UPDATE_", "USE_", 
        "USER_", "USING_", "UTF16_", "UTF32_", "UTF8_", "VALIDATE_", "VALUE_", 
        "VALUES_", "VERBOSE_", "VERSION_", "VIEW_", "WHEN_", "WHERE_", "WHILE_", 
        "WINDOW_", "WITH_", "WITHIN_", "WITHOUT_", "WORK_", "WRAPPER_", 
        "WRITE_", "YEAR_", "ZONE_", "EQ_", "NEQ_", "LT_", "LTE_", "GT_", 
        "GTE_", "PLUS_", "MINUS_", "ASTERISK_", "SLASH_", "PERCENT_", "CONCAT_", 
        "QUESTION_MARK_", "SEMICOLON_", "DOT_", "COLON_", "COMMA_", "LPAREN_", 
        "RPAREN_", "LSQUARE_", "RSQUARE_", "LCURLY_", "RCURLY_", "LCURLYHYPHEN_", 
        "RCURLYHYPHEN_", "LARROW_", "RARROW_", "RDOUBLEARROW_", "VBAR_", 
        "DOLLAR_", "CARET_", "STRING_", "UNICODE_STRING_", "BINARY_LITERAL_", 
        "INTEGER_VALUE_", "DECIMAL_VALUE_", "DOUBLE_VALUE_", "IDENTIFIER_", 
        "DIGIT_IDENTIFIER_", "QUOTED_IDENTIFIER_", "BACKQUOTED_IDENTIFIER_", 
        "SIMPLE_COMMENT_", "BRACKETED_COMMENT_", "WS_", "UNRECOGNIZED_"
    ];
    public static readonly ruleNames = [
        "parse", "statements", "statement", "insertStatement", "updateStatement", 
        "rootQuery", "withFunction", "query", "with", "tableElement", "columnDefinition", 
        "likeClause", "properties", "propertyAssignments", "property", "propertyValue", 
        "queryNoWith", "limitRowCount", "rowCount", "queryTerm", "queryPrimary", 
        "sortItem", "querySpecification", "fromClause", "groupBy", "groupingElement", 
        "groupingSet", "windowDefinition", "windowSpecification", "namedQuery", 
        "setQuantifier", "selectItem", "relation", "joinType", "joinCriteria", 
        "sampledRelation", "sampleType", "trimsSpecification", "listAggOverflowBehavior", 
        "listaggCountIndication", "patternRecognition", "measureDefinition", 
        "rowsPerMatch", "emptyMatchHandling", "skipTo", "subsetDefinition", 
        "variableDefinition", "aliasedRelation", "columnAliases", "relationPrimary", 
        "tableFunctionCall", "tableFunctionArgument", "tableArgument", "tableArgumentRelation", 
        "descriptorArgument", "descriptorField", "copartitionTables", "expression", 
        "booleanExpression", "predicate_", "valueExpression", "primaryExpression", 
        "jsonPathInvocation", "jsonValueExpression", "jsonRepresentation", 
        "jsonArgument", "jsonExistsErrorBehavior", "jsonValueBehavior", 
        "jsonQueryWrapperBehavior", "jsonQueryBehavior", "jsonObjectMember", 
        "processingMode", "nullTreatment", "string_", "timeZoneSpecifier", 
        "comparisonOperator", "comparisonQuantifier", "booleanValue", "interval", 
        "intervalField", "normalForm", "type", "rowField", "typeParameter", 
        "whenClause", "filter", "mergeCase", "over", "windowFrame", "frameExtent", 
        "frameBound", "rowPattern", "patternPrimary", "patternQuantifier", 
        "updateAssignment", "explainOption", "transactionMode", "levelOfIsolation", 
        "callArgument", "pathElement", "pathSpecification", "functionSpecification", 
        "functionDeclaration", "parameterDeclaration", "returnsClause", 
        "routineCharacteristic", "controlStatement", "caseStatementWhenClause", 
        "elseIfClause", "elseClause", "variableDeclaration", "sqlStatementList", 
        "privilege", "qualifiedName", "queryPeriod", "rangeType", "grantor", 
        "principal", "roleIdentifierList", "identifier", "catalogName", 
        "catalogIdentifier", "schemaName", "schemaIdentifier", "tableReference", 
        "tableName", "tableIdentifier", "viewIdentifier", "columnIdentifier", 
        "aliasIdentifier", "newSchemaIdentifier", "newTableIdentifier", 
        "newViewIdentifier", "roleIdentifier", "connectorIdentifier", "number", 
        "authorizationUser", "nonReserved",
    ];

    public get grammarFileName(): string { return "TrinoParser.g4"; }
    public get literalNames(): (string | null)[] { return TrinoParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return TrinoParser.symbolicNames; }
    public get ruleNames(): string[] { return TrinoParser.ruleNames; }
    public get serializedATN(): number[] { return TrinoParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, TrinoParser._ATN, TrinoParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public parse(): ParseContext {
        let localContext = new ParseContext(this.context, this.state);
        this.enterRule(localContext, 0, TrinoParser.RULE_parse);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 277;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 6)) & ~0x1F) === 0 && ((1 << (_la - 6)) & 1098924035) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 167805409) !== 0) || _la === 93 || _la === 110 || _la === 152 || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 8921345) !== 0) || ((((_la - 231)) & ~0x1F) === 0 && ((1 << (_la - 231)) & 134226217) !== 0) || ((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 131587) !== 0) || _la === 313) {
                {
                this.state = 276;
                this.statements();
                }
            }

            this.state = 279;
            this.match(TrinoParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statements(): StatementsContext {
        let localContext = new StatementsContext(this.context, this.state);
        this.enterRule(localContext, 2, TrinoParser.RULE_statements);
        let _la: number;
        try {
            this.state = 289;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 281;
                this.statement();
                this.state = 283;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 309) {
                    {
                    this.state = 282;
                    this.match(TrinoParser.SEMICOLON_);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 285;
                this.statement();
                this.state = 286;
                this.match(TrinoParser.SEMICOLON_);
                this.state = 287;
                this.statements();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 4, TrinoParser.RULE_statement);
        let _la: number;
        try {
            this.state = 1156;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 126, this.context) ) {
            case 1:
                localContext = new StatementDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 291;
                this.rootQuery();
                }
                break;
            case 2:
                localContext = new UseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 292;
                this.match(TrinoParser.USE_);
                this.state = 293;
                this.schemaIdentifier();
                }
                break;
            case 3:
                localContext = new UseCatalogContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 294;
                this.match(TrinoParser.USE_);
                this.state = 295;
                this.catalogIdentifier();
                }
                break;
            case 4:
                localContext = new CreateCatalogContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 296;
                this.match(TrinoParser.CREATE_);
                this.state = 297;
                this.match(TrinoParser.CATALOG_);
                this.state = 301;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
                case 1:
                    {
                    this.state = 298;
                    this.match(TrinoParser.IF_);
                    this.state = 299;
                    this.match(TrinoParser.NOT_);
                    this.state = 300;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 303;
                (localContext as CreateCatalogContext)._catalog = this.identifier();
                this.state = 304;
                this.match(TrinoParser.USING_);
                this.state = 305;
                this.connectorIdentifier();
                this.state = 308;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 306;
                    this.match(TrinoParser.COMMENT_);
                    this.state = 307;
                    this.string_();
                    }
                }

                this.state = 312;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 14) {
                    {
                    this.state = 310;
                    this.match(TrinoParser.AUTHORIZATION_);
                    this.state = 311;
                    this.principal();
                    }
                }

                this.state = 316;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 314;
                    this.match(TrinoParser.WITH_);
                    this.state = 315;
                    this.properties();
                    }
                }

                }
                break;
            case 5:
                localContext = new DropCatalogContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 318;
                this.match(TrinoParser.DROP_);
                this.state = 319;
                this.match(TrinoParser.CATALOG_);
                this.state = 322;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context) ) {
                case 1:
                    {
                    this.state = 320;
                    this.match(TrinoParser.IF_);
                    this.state = 321;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 324;
                this.catalogIdentifier();
                this.state = 326;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 22 || _la === 212) {
                    {
                    this.state = 325;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 22 || _la === 212)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 6:
                localContext = new CreateSchemaContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 328;
                this.match(TrinoParser.CREATE_);
                this.state = 329;
                this.match(TrinoParser.SCHEMA_);
                this.state = 333;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
                case 1:
                    {
                    this.state = 330;
                    this.match(TrinoParser.IF_);
                    this.state = 331;
                    this.match(TrinoParser.NOT_);
                    this.state = 332;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 335;
                this.newSchemaIdentifier();
                this.state = 338;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 14) {
                    {
                    this.state = 336;
                    this.match(TrinoParser.AUTHORIZATION_);
                    this.state = 337;
                    this.principal();
                    }
                }

                this.state = 342;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 340;
                    this.match(TrinoParser.WITH_);
                    this.state = 341;
                    this.properties();
                    }
                }

                }
                break;
            case 7:
                localContext = new DropSchemaContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 344;
                this.match(TrinoParser.DROP_);
                this.state = 345;
                this.match(TrinoParser.SCHEMA_);
                this.state = 348;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 12, this.context) ) {
                case 1:
                    {
                    this.state = 346;
                    this.match(TrinoParser.IF_);
                    this.state = 347;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 350;
                this.schemaIdentifier();
                this.state = 352;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 22 || _la === 212) {
                    {
                    this.state = 351;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 22 || _la === 212)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 8:
                localContext = new RenameSchemaContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 354;
                this.match(TrinoParser.ALTER_);
                this.state = 355;
                this.match(TrinoParser.SCHEMA_);
                this.state = 356;
                this.schemaIdentifier();
                this.state = 357;
                this.match(TrinoParser.RENAME_);
                this.state = 358;
                this.match(TrinoParser.TO_);
                this.state = 359;
                this.identifier();
                }
                break;
            case 9:
                localContext = new SetSchemaAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 361;
                this.match(TrinoParser.ALTER_);
                this.state = 362;
                this.match(TrinoParser.SCHEMA_);
                this.state = 363;
                this.schemaIdentifier();
                this.state = 364;
                this.match(TrinoParser.SET_);
                this.state = 365;
                this.match(TrinoParser.AUTHORIZATION_);
                this.state = 366;
                this.principal();
                }
                break;
            case 10:
                localContext = new CreateTableAsSelectContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 368;
                this.match(TrinoParser.CREATE_);
                this.state = 371;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 369;
                    this.match(TrinoParser.OR_);
                    this.state = 370;
                    this.match(TrinoParser.REPLACE_);
                    }
                }

                this.state = 373;
                this.match(TrinoParser.TABLE_);
                this.state = 377;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
                case 1:
                    {
                    this.state = 374;
                    this.match(TrinoParser.IF_);
                    this.state = 375;
                    this.match(TrinoParser.NOT_);
                    this.state = 376;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 379;
                this.newTableIdentifier();
                this.state = 381;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 380;
                    this.columnAliases();
                    }
                }

                this.state = 385;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 383;
                    this.match(TrinoParser.COMMENT_);
                    this.state = 384;
                    this.string_();
                    }
                }

                this.state = 389;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 387;
                    this.match(TrinoParser.WITH_);
                    this.state = 388;
                    this.properties();
                    }
                }

                this.state = 391;
                this.match(TrinoParser.AS_);
                this.state = 397;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 19, this.context) ) {
                case 1:
                    {
                    this.state = 392;
                    this.rootQuery();
                    }
                    break;
                case 2:
                    {
                    this.state = 393;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 394;
                    this.rootQuery();
                    this.state = 395;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                this.state = 404;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 399;
                    this.match(TrinoParser.WITH_);
                    this.state = 401;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 162) {
                        {
                        this.state = 400;
                        this.match(TrinoParser.NO_);
                        }
                    }

                    this.state = 403;
                    this.match(TrinoParser.DATA_);
                    }
                }

                }
                break;
            case 11:
                localContext = new CreateTableContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 406;
                this.match(TrinoParser.CREATE_);
                this.state = 409;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 407;
                    this.match(TrinoParser.OR_);
                    this.state = 408;
                    this.match(TrinoParser.REPLACE_);
                    }
                }

                this.state = 411;
                this.match(TrinoParser.TABLE_);
                this.state = 415;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context) ) {
                case 1:
                    {
                    this.state = 412;
                    this.match(TrinoParser.IF_);
                    this.state = 413;
                    this.match(TrinoParser.NOT_);
                    this.state = 414;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 417;
                this.newTableIdentifier();
                this.state = 418;
                this.match(TrinoParser.LPAREN_);
                this.state = 419;
                this.tableElement();
                this.state = 424;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 420;
                    this.match(TrinoParser.COMMA_);
                    this.state = 421;
                    this.tableElement();
                    }
                    }
                    this.state = 426;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 427;
                this.match(TrinoParser.RPAREN_);
                this.state = 430;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 428;
                    this.match(TrinoParser.COMMENT_);
                    this.state = 429;
                    this.string_();
                    }
                }

                this.state = 434;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 432;
                    this.match(TrinoParser.WITH_);
                    this.state = 433;
                    this.properties();
                    }
                }

                }
                break;
            case 12:
                localContext = new DropTableContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 436;
                this.match(TrinoParser.DROP_);
                this.state = 437;
                this.match(TrinoParser.TABLE_);
                this.state = 440;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
                case 1:
                    {
                    this.state = 438;
                    this.match(TrinoParser.IF_);
                    this.state = 439;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 442;
                this.tableIdentifier();
                }
                break;
            case 13:
                localContext = new InsertContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 443;
                this.insertStatement();
                }
                break;
            case 14:
                localContext = new UpdateContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 444;
                this.updateStatement();
                }
                break;
            case 15:
                localContext = new DeleteContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 445;
                this.match(TrinoParser.DELETE_);
                this.state = 446;
                this.match(TrinoParser.FROM_);
                this.state = 447;
                this.tableIdentifier();
                this.state = 450;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 285) {
                    {
                    this.state = 448;
                    this.match(TrinoParser.WHERE_);
                    this.state = 449;
                    this.booleanExpression(0);
                    }
                }

                }
                break;
            case 16:
                localContext = new TruncateTableContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 452;
                this.match(TrinoParser.TRUNCATE_);
                this.state = 453;
                this.match(TrinoParser.TABLE_);
                this.state = 454;
                this.tableIdentifier();
                }
                break;
            case 17:
                localContext = new CommentTableContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 455;
                this.match(TrinoParser.COMMENT_);
                this.state = 456;
                this.match(TrinoParser.ON_);
                this.state = 457;
                this.match(TrinoParser.TABLE_);
                this.state = 458;
                this.tableIdentifier();
                this.state = 459;
                this.match(TrinoParser.IS_);
                this.state = 462;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.STRING_:
                case TrinoParser.UNICODE_STRING_:
                    {
                    this.state = 460;
                    this.string_();
                    }
                    break;
                case TrinoParser.NULL_:
                    {
                    this.state = 461;
                    this.match(TrinoParser.NULL_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 18:
                localContext = new CommentViewContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 464;
                this.match(TrinoParser.COMMENT_);
                this.state = 465;
                this.match(TrinoParser.ON_);
                this.state = 466;
                this.match(TrinoParser.VIEW_);
                this.state = 467;
                this.viewIdentifier();
                this.state = 468;
                this.match(TrinoParser.IS_);
                this.state = 471;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.STRING_:
                case TrinoParser.UNICODE_STRING_:
                    {
                    this.state = 469;
                    this.string_();
                    }
                    break;
                case TrinoParser.NULL_:
                    {
                    this.state = 470;
                    this.match(TrinoParser.NULL_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 19:
                localContext = new CommentColumnContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 473;
                this.match(TrinoParser.COMMENT_);
                this.state = 474;
                this.match(TrinoParser.ON_);
                this.state = 475;
                this.match(TrinoParser.COLUMN_);
                this.state = 476;
                this.qualifiedName();
                this.state = 477;
                this.match(TrinoParser.IS_);
                this.state = 480;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.STRING_:
                case TrinoParser.UNICODE_STRING_:
                    {
                    this.state = 478;
                    this.string_();
                    }
                    break;
                case TrinoParser.NULL_:
                    {
                    this.state = 479;
                    this.match(TrinoParser.NULL_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 20:
                localContext = new RenameTableContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 482;
                this.match(TrinoParser.ALTER_);
                this.state = 483;
                this.match(TrinoParser.TABLE_);
                this.state = 486;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
                case 1:
                    {
                    this.state = 484;
                    this.match(TrinoParser.IF_);
                    this.state = 485;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 488;
                this.tableIdentifier();
                this.state = 489;
                this.match(TrinoParser.RENAME_);
                this.state = 490;
                this.match(TrinoParser.TO_);
                this.state = 491;
                (localContext as RenameTableContext)._to = this.qualifiedName();
                }
                break;
            case 21:
                localContext = new AddColumnContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 493;
                this.match(TrinoParser.ALTER_);
                this.state = 494;
                this.match(TrinoParser.TABLE_);
                this.state = 497;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 33, this.context) ) {
                case 1:
                    {
                    this.state = 495;
                    this.match(TrinoParser.IF_);
                    this.state = 496;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 499;
                this.tableIdentifier();
                this.state = 500;
                this.match(TrinoParser.ADD_);
                this.state = 501;
                this.match(TrinoParser.COLUMN_);
                this.state = 505;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
                case 1:
                    {
                    this.state = 502;
                    this.match(TrinoParser.IF_);
                    this.state = 503;
                    this.match(TrinoParser.NOT_);
                    this.state = 504;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 507;
                (localContext as AddColumnContext)._column = this.columnDefinition();
                }
                break;
            case 22:
                localContext = new RenameColumnContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 509;
                this.match(TrinoParser.ALTER_);
                this.state = 510;
                this.match(TrinoParser.TABLE_);
                this.state = 513;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 35, this.context) ) {
                case 1:
                    {
                    this.state = 511;
                    this.match(TrinoParser.IF_);
                    this.state = 512;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 515;
                this.tableIdentifier();
                this.state = 516;
                this.match(TrinoParser.RENAME_);
                this.state = 517;
                this.match(TrinoParser.COLUMN_);
                this.state = 520;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 36, this.context) ) {
                case 1:
                    {
                    this.state = 518;
                    this.match(TrinoParser.IF_);
                    this.state = 519;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 522;
                (localContext as RenameColumnContext)._from_ = this.qualifiedName();
                this.state = 523;
                this.match(TrinoParser.TO_);
                this.state = 524;
                (localContext as RenameColumnContext)._to = this.identifier();
                }
                break;
            case 23:
                localContext = new DropColumnContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 526;
                this.match(TrinoParser.ALTER_);
                this.state = 527;
                this.match(TrinoParser.TABLE_);
                this.state = 530;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
                case 1:
                    {
                    this.state = 528;
                    this.match(TrinoParser.IF_);
                    this.state = 529;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 532;
                this.tableIdentifier();
                this.state = 533;
                this.match(TrinoParser.DROP_);
                this.state = 534;
                this.match(TrinoParser.COLUMN_);
                this.state = 537;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 38, this.context) ) {
                case 1:
                    {
                    this.state = 535;
                    this.match(TrinoParser.IF_);
                    this.state = 536;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 539;
                (localContext as DropColumnContext)._column = this.qualifiedName();
                }
                break;
            case 24:
                localContext = new SetColumnTypeContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 541;
                this.match(TrinoParser.ALTER_);
                this.state = 542;
                this.match(TrinoParser.TABLE_);
                this.state = 545;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
                case 1:
                    {
                    this.state = 543;
                    this.match(TrinoParser.IF_);
                    this.state = 544;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 547;
                this.tableIdentifier();
                this.state = 548;
                this.match(TrinoParser.ALTER_);
                this.state = 549;
                this.match(TrinoParser.COLUMN_);
                this.state = 550;
                (localContext as SetColumnTypeContext)._columnName = this.qualifiedName();
                this.state = 551;
                this.match(TrinoParser.SET_);
                this.state = 552;
                this.match(TrinoParser.DATA_);
                this.state = 553;
                this.match(TrinoParser.TYPE_);
                this.state = 554;
                this.type_(0);
                }
                break;
            case 25:
                localContext = new SetTableAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 556;
                this.match(TrinoParser.ALTER_);
                this.state = 557;
                this.match(TrinoParser.TABLE_);
                this.state = 558;
                this.tableIdentifier();
                this.state = 559;
                this.match(TrinoParser.SET_);
                this.state = 560;
                this.match(TrinoParser.AUTHORIZATION_);
                this.state = 561;
                this.principal();
                }
                break;
            case 26:
                localContext = new SetTablePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 563;
                this.match(TrinoParser.ALTER_);
                this.state = 564;
                this.match(TrinoParser.TABLE_);
                this.state = 565;
                this.tableIdentifier();
                this.state = 566;
                this.match(TrinoParser.SET_);
                this.state = 567;
                this.match(TrinoParser.PROPERTIES_);
                this.state = 568;
                this.propertyAssignments();
                }
                break;
            case 27:
                localContext = new TableExecuteContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 570;
                this.match(TrinoParser.ALTER_);
                this.state = 571;
                this.match(TrinoParser.TABLE_);
                this.state = 572;
                this.tableIdentifier();
                this.state = 573;
                this.match(TrinoParser.EXECUTE_);
                this.state = 574;
                (localContext as TableExecuteContext)._procedureName = this.identifier();
                this.state = 587;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 575;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 584;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                        {
                        this.state = 576;
                        this.callArgument();
                        this.state = 581;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 312) {
                            {
                            {
                            this.state = 577;
                            this.match(TrinoParser.COMMA_);
                            this.state = 578;
                            this.callArgument();
                            }
                            }
                            this.state = 583;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 586;
                    this.match(TrinoParser.RPAREN_);
                    }
                }

                this.state = 591;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 285) {
                    {
                    this.state = 589;
                    this.match(TrinoParser.WHERE_);
                    this.state = 590;
                    (localContext as TableExecuteContext)._where = this.booleanExpression(0);
                    }
                }

                }
                break;
            case 28:
                localContext = new AnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 593;
                this.match(TrinoParser.ANALYZE_);
                this.state = 594;
                this.tableIdentifier();
                this.state = 597;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 595;
                    this.match(TrinoParser.WITH_);
                    this.state = 596;
                    this.properties();
                    }
                }

                }
                break;
            case 29:
                localContext = new CreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 599;
                this.match(TrinoParser.CREATE_);
                this.state = 602;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 600;
                    this.match(TrinoParser.OR_);
                    this.state = 601;
                    this.match(TrinoParser.REPLACE_);
                    }
                }

                this.state = 604;
                this.match(TrinoParser.MATERIALIZED_);
                this.state = 605;
                this.match(TrinoParser.VIEW_);
                this.state = 609;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 46, this.context) ) {
                case 1:
                    {
                    this.state = 606;
                    this.match(TrinoParser.IF_);
                    this.state = 607;
                    this.match(TrinoParser.NOT_);
                    this.state = 608;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 611;
                this.newViewIdentifier();
                this.state = 615;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92) {
                    {
                    this.state = 612;
                    this.match(TrinoParser.GRACE_);
                    this.state = 613;
                    this.match(TrinoParser.PERIOD_);
                    this.state = 614;
                    this.interval();
                    }
                }

                this.state = 619;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 617;
                    this.match(TrinoParser.COMMENT_);
                    this.state = 618;
                    this.string_();
                    }
                }

                this.state = 623;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 621;
                    this.match(TrinoParser.WITH_);
                    this.state = 622;
                    this.properties();
                    }
                }

                this.state = 625;
                this.match(TrinoParser.AS_);
                this.state = 626;
                this.rootQuery();
                }
                break;
            case 30:
                localContext = new CreateViewContext(localContext);
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 628;
                this.match(TrinoParser.CREATE_);
                this.state = 631;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 629;
                    this.match(TrinoParser.OR_);
                    this.state = 630;
                    this.match(TrinoParser.REPLACE_);
                    }
                }

                this.state = 633;
                this.match(TrinoParser.VIEW_);
                this.state = 634;
                this.newViewIdentifier();
                this.state = 637;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 635;
                    this.match(TrinoParser.COMMENT_);
                    this.state = 636;
                    this.string_();
                    }
                }

                this.state = 641;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 639;
                    this.match(TrinoParser.SECURITY_);
                    this.state = 640;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 55 || _la === 114)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 643;
                this.match(TrinoParser.AS_);
                this.state = 644;
                this.rootQuery();
                }
                break;
            case 31:
                localContext = new RefreshMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 646;
                this.match(TrinoParser.REFRESH_);
                this.state = 647;
                this.match(TrinoParser.MATERIALIZED_);
                this.state = 648;
                this.match(TrinoParser.VIEW_);
                this.state = 649;
                this.viewIdentifier();
                }
                break;
            case 32:
                localContext = new DropMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 650;
                this.match(TrinoParser.DROP_);
                this.state = 651;
                this.match(TrinoParser.MATERIALIZED_);
                this.state = 652;
                this.match(TrinoParser.VIEW_);
                this.state = 655;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 53, this.context) ) {
                case 1:
                    {
                    this.state = 653;
                    this.match(TrinoParser.IF_);
                    this.state = 654;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 657;
                this.viewIdentifier();
                }
                break;
            case 33:
                localContext = new RenameMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 658;
                this.match(TrinoParser.ALTER_);
                this.state = 659;
                this.match(TrinoParser.MATERIALIZED_);
                this.state = 660;
                this.match(TrinoParser.VIEW_);
                this.state = 663;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
                case 1:
                    {
                    this.state = 661;
                    this.match(TrinoParser.IF_);
                    this.state = 662;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 665;
                this.viewIdentifier();
                this.state = 666;
                this.match(TrinoParser.RENAME_);
                this.state = 667;
                this.match(TrinoParser.TO_);
                this.state = 668;
                (localContext as RenameMaterializedViewContext)._to = this.qualifiedName();
                }
                break;
            case 34:
                localContext = new SetMaterializedViewPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 670;
                this.match(TrinoParser.ALTER_);
                this.state = 671;
                this.match(TrinoParser.MATERIALIZED_);
                this.state = 672;
                this.match(TrinoParser.VIEW_);
                this.state = 673;
                this.viewIdentifier();
                this.state = 674;
                this.match(TrinoParser.SET_);
                this.state = 675;
                this.match(TrinoParser.PROPERTIES_);
                this.state = 676;
                this.propertyAssignments();
                }
                break;
            case 35:
                localContext = new DropViewContext(localContext);
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 678;
                this.match(TrinoParser.DROP_);
                this.state = 679;
                this.match(TrinoParser.VIEW_);
                this.state = 682;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 55, this.context) ) {
                case 1:
                    {
                    this.state = 680;
                    this.match(TrinoParser.IF_);
                    this.state = 681;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 684;
                this.viewIdentifier();
                }
                break;
            case 36:
                localContext = new RenameViewContext(localContext);
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 685;
                this.match(TrinoParser.ALTER_);
                this.state = 686;
                this.match(TrinoParser.VIEW_);
                this.state = 687;
                this.viewIdentifier();
                this.state = 688;
                this.match(TrinoParser.RENAME_);
                this.state = 689;
                this.match(TrinoParser.TO_);
                this.state = 690;
                (localContext as RenameViewContext)._to = this.qualifiedName();
                }
                break;
            case 37:
                localContext = new SetViewAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 692;
                this.match(TrinoParser.ALTER_);
                this.state = 693;
                this.match(TrinoParser.VIEW_);
                this.state = 694;
                this.viewIdentifier();
                this.state = 695;
                this.match(TrinoParser.SET_);
                this.state = 696;
                this.match(TrinoParser.AUTHORIZATION_);
                this.state = 697;
                this.principal();
                }
                break;
            case 38:
                localContext = new CallContext(localContext);
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 699;
                this.match(TrinoParser.CALL_);
                this.state = 700;
                this.qualifiedName();
                this.state = 701;
                this.match(TrinoParser.LPAREN_);
                this.state = 710;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                    {
                    this.state = 702;
                    this.callArgument();
                    this.state = 707;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 703;
                        this.match(TrinoParser.COMMA_);
                        this.state = 704;
                        this.callArgument();
                        }
                        }
                        this.state = 709;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 712;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 39:
                localContext = new CreateFunctionContext(localContext);
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 714;
                this.match(TrinoParser.CREATE_);
                this.state = 717;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 715;
                    this.match(TrinoParser.OR_);
                    this.state = 716;
                    this.match(TrinoParser.REPLACE_);
                    }
                }

                this.state = 719;
                this.functionSpecification();
                }
                break;
            case 40:
                localContext = new DropFunctionContext(localContext);
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 720;
                this.match(TrinoParser.DROP_);
                this.state = 721;
                this.match(TrinoParser.FUNCTION_);
                this.state = 724;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 59, this.context) ) {
                case 1:
                    {
                    this.state = 722;
                    this.match(TrinoParser.IF_);
                    this.state = 723;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 726;
                this.functionDeclaration();
                }
                break;
            case 41:
                localContext = new CreateRoleContext(localContext);
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 727;
                this.match(TrinoParser.CREATE_);
                this.state = 728;
                this.match(TrinoParser.ROLE_);
                this.state = 729;
                this.identifier();
                this.state = 733;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 730;
                    this.match(TrinoParser.WITH_);
                    this.state = 731;
                    this.match(TrinoParser.ADMIN_);
                    this.state = 732;
                    this.grantor();
                    }
                }

                this.state = 737;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 735;
                    this.match(TrinoParser.IN_);
                    this.state = 736;
                    (localContext as CreateRoleContext)._catalog = this.catalogIdentifier();
                    }
                }

                }
                break;
            case 42:
                localContext = new DropRoleContext(localContext);
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 739;
                this.match(TrinoParser.DROP_);
                this.state = 740;
                this.match(TrinoParser.ROLE_);
                this.state = 741;
                this.roleIdentifier();
                this.state = 744;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 742;
                    this.match(TrinoParser.IN_);
                    this.state = 743;
                    (localContext as DropRoleContext)._catalog = this.catalogIdentifier();
                    }
                }

                }
                break;
            case 43:
                localContext = new GrantRolesContext(localContext);
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 746;
                this.match(TrinoParser.GRANT_);
                this.state = 747;
                this.roleIdentifierList();
                this.state = 748;
                this.match(TrinoParser.TO_);
                this.state = 749;
                this.principal();
                this.state = 754;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 750;
                    this.match(TrinoParser.COMMA_);
                    this.state = 751;
                    this.principal();
                    }
                    }
                    this.state = 756;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 760;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 757;
                    this.match(TrinoParser.WITH_);
                    this.state = 758;
                    this.match(TrinoParser.ADMIN_);
                    this.state = 759;
                    this.match(TrinoParser.OPTION_);
                    }
                }

                this.state = 765;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 94) {
                    {
                    this.state = 762;
                    this.match(TrinoParser.GRANTED_);
                    this.state = 763;
                    this.match(TrinoParser.BY_);
                    this.state = 764;
                    this.grantor();
                    }
                }

                this.state = 769;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 767;
                    this.match(TrinoParser.IN_);
                    this.state = 768;
                    (localContext as GrantRolesContext)._catalog = this.catalogIdentifier();
                    }
                }

                }
                break;
            case 44:
                localContext = new RevokeRolesContext(localContext);
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 771;
                this.match(TrinoParser.REVOKE_);
                this.state = 775;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 67, this.context) ) {
                case 1:
                    {
                    this.state = 772;
                    this.match(TrinoParser.ADMIN_);
                    this.state = 773;
                    this.match(TrinoParser.OPTION_);
                    this.state = 774;
                    this.match(TrinoParser.FOR_);
                    }
                    break;
                }
                this.state = 777;
                this.roleIdentifierList();
                this.state = 778;
                this.match(TrinoParser.FROM_);
                this.state = 779;
                this.principal();
                this.state = 784;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 780;
                    this.match(TrinoParser.COMMA_);
                    this.state = 781;
                    this.principal();
                    }
                    }
                    this.state = 786;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 790;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 94) {
                    {
                    this.state = 787;
                    this.match(TrinoParser.GRANTED_);
                    this.state = 788;
                    this.match(TrinoParser.BY_);
                    this.state = 789;
                    this.grantor();
                    }
                }

                this.state = 794;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 792;
                    this.match(TrinoParser.IN_);
                    this.state = 793;
                    (localContext as RevokeRolesContext)._catalog = this.catalogIdentifier();
                    }
                }

                }
                break;
            case 45:
                localContext = new SetRoleContext(localContext);
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 796;
                this.match(TrinoParser.SET_);
                this.state = 797;
                this.match(TrinoParser.ROLE_);
                this.state = 801;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 71, this.context) ) {
                case 1:
                    {
                    this.state = 798;
                    this.match(TrinoParser.ALL_);
                    }
                    break;
                case 2:
                    {
                    this.state = 799;
                    this.match(TrinoParser.NONE_);
                    }
                    break;
                case 3:
                    {
                    this.state = 800;
                    this.roleIdentifier();
                    }
                    break;
                }
                this.state = 805;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 803;
                    this.match(TrinoParser.IN_);
                    this.state = 804;
                    (localContext as SetRoleContext)._catalog = this.catalogIdentifier();
                    }
                }

                }
                break;
            case 46:
                localContext = new GrantContext(localContext);
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 807;
                this.match(TrinoParser.GRANT_);
                this.state = 818;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.CREATE_:
                case TrinoParser.DELETE_:
                case TrinoParser.INSERT_:
                case TrinoParser.SELECT_:
                case TrinoParser.UPDATE_:
                    {
                    this.state = 808;
                    this.privilege();
                    this.state = 813;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 809;
                        this.match(TrinoParser.COMMA_);
                        this.state = 810;
                        this.privilege();
                        }
                        }
                        this.state = 815;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case TrinoParser.ALL_:
                    {
                    this.state = 816;
                    this.match(TrinoParser.ALL_);
                    this.state = 817;
                    this.match(TrinoParser.PRIVILEGES_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 820;
                this.match(TrinoParser.ON_);
                this.state = 829;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 77, this.context) ) {
                case 1:
                    {
                    this.state = 822;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 75, this.context) ) {
                    case 1:
                        {
                        this.state = 821;
                        this.match(TrinoParser.SCHEMA_);
                        }
                        break;
                    }
                    this.state = 824;
                    this.schemaIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 826;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 244) {
                        {
                        this.state = 825;
                        this.match(TrinoParser.TABLE_);
                        }
                    }

                    this.state = 828;
                    this.tableIdentifier();
                    }
                    break;
                }
                this.state = 831;
                this.match(TrinoParser.TO_);
                this.state = 832;
                (localContext as GrantContext)._grantee = this.principal();
                this.state = 836;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 833;
                    this.match(TrinoParser.WITH_);
                    this.state = 834;
                    this.match(TrinoParser.GRANT_);
                    this.state = 835;
                    this.match(TrinoParser.OPTION_);
                    }
                }

                }
                break;
            case 47:
                localContext = new DenyContext(localContext);
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 838;
                this.match(TrinoParser.DENY_);
                this.state = 849;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.CREATE_:
                case TrinoParser.DELETE_:
                case TrinoParser.INSERT_:
                case TrinoParser.SELECT_:
                case TrinoParser.UPDATE_:
                    {
                    this.state = 839;
                    this.privilege();
                    this.state = 844;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 840;
                        this.match(TrinoParser.COMMA_);
                        this.state = 841;
                        this.privilege();
                        }
                        }
                        this.state = 846;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case TrinoParser.ALL_:
                    {
                    this.state = 847;
                    this.match(TrinoParser.ALL_);
                    this.state = 848;
                    this.match(TrinoParser.PRIVILEGES_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 851;
                this.match(TrinoParser.ON_);
                this.state = 860;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 83, this.context) ) {
                case 1:
                    {
                    this.state = 853;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 81, this.context) ) {
                    case 1:
                        {
                        this.state = 852;
                        this.match(TrinoParser.SCHEMA_);
                        }
                        break;
                    }
                    this.state = 855;
                    this.schemaIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 857;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 244) {
                        {
                        this.state = 856;
                        this.match(TrinoParser.TABLE_);
                        }
                    }

                    this.state = 859;
                    this.tableIdentifier();
                    }
                    break;
                }
                this.state = 862;
                this.match(TrinoParser.TO_);
                this.state = 863;
                (localContext as DenyContext)._grantee = this.principal();
                }
                break;
            case 48:
                localContext = new RevokeContext(localContext);
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 865;
                this.match(TrinoParser.REVOKE_);
                this.state = 869;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93) {
                    {
                    this.state = 866;
                    this.match(TrinoParser.GRANT_);
                    this.state = 867;
                    this.match(TrinoParser.OPTION_);
                    this.state = 868;
                    this.match(TrinoParser.FOR_);
                    }
                }

                this.state = 881;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.CREATE_:
                case TrinoParser.DELETE_:
                case TrinoParser.INSERT_:
                case TrinoParser.SELECT_:
                case TrinoParser.UPDATE_:
                    {
                    this.state = 871;
                    this.privilege();
                    this.state = 876;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 872;
                        this.match(TrinoParser.COMMA_);
                        this.state = 873;
                        this.privilege();
                        }
                        }
                        this.state = 878;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case TrinoParser.ALL_:
                    {
                    this.state = 879;
                    this.match(TrinoParser.ALL_);
                    this.state = 880;
                    this.match(TrinoParser.PRIVILEGES_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 883;
                this.match(TrinoParser.ON_);
                this.state = 892;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
                case 1:
                    {
                    this.state = 885;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 87, this.context) ) {
                    case 1:
                        {
                        this.state = 884;
                        this.match(TrinoParser.SCHEMA_);
                        }
                        break;
                    }
                    this.state = 887;
                    this.schemaIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 889;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 244) {
                        {
                        this.state = 888;
                        this.match(TrinoParser.TABLE_);
                        }
                    }

                    this.state = 891;
                    this.tableIdentifier();
                    }
                    break;
                }
                this.state = 894;
                this.match(TrinoParser.FROM_);
                this.state = 895;
                (localContext as RevokeContext)._grantee = this.principal();
                }
                break;
            case 49:
                localContext = new ShowGrantsContext(localContext);
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 897;
                this.match(TrinoParser.SHOW_);
                this.state = 898;
                this.match(TrinoParser.GRANTS_);
                this.state = 904;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 173) {
                    {
                    this.state = 899;
                    this.match(TrinoParser.ON_);
                    this.state = 901;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 244) {
                        {
                        this.state = 900;
                        this.match(TrinoParser.TABLE_);
                        }
                    }

                    this.state = 903;
                    this.tableIdentifier();
                    }
                }

                }
                break;
            case 50:
                localContext = new ExplainContext(localContext);
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 906;
                this.match(TrinoParser.EXPLAIN_);
                this.state = 918;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 93, this.context) ) {
                case 1:
                    {
                    this.state = 907;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 908;
                    this.explainOption();
                    this.state = 913;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 909;
                        this.match(TrinoParser.COMMA_);
                        this.state = 910;
                        this.explainOption();
                        }
                        }
                        this.state = 915;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 916;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                this.state = 920;
                this.statement();
                }
                break;
            case 51:
                localContext = new ExplainAnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 921;
                this.match(TrinoParser.EXPLAIN_);
                this.state = 922;
                this.match(TrinoParser.ANALYZE_);
                this.state = 924;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 281) {
                    {
                    this.state = 923;
                    this.match(TrinoParser.VERBOSE_);
                    }
                }

                this.state = 926;
                this.statement();
                }
                break;
            case 52:
                localContext = new ShowCreateTableContext(localContext);
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 927;
                this.match(TrinoParser.SHOW_);
                this.state = 928;
                this.match(TrinoParser.CREATE_);
                this.state = 929;
                this.match(TrinoParser.TABLE_);
                this.state = 930;
                this.tableIdentifier();
                }
                break;
            case 53:
                localContext = new ShowCreateSchemaContext(localContext);
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 931;
                this.match(TrinoParser.SHOW_);
                this.state = 932;
                this.match(TrinoParser.CREATE_);
                this.state = 933;
                this.match(TrinoParser.SCHEMA_);
                this.state = 934;
                this.schemaIdentifier();
                }
                break;
            case 54:
                localContext = new ShowCreateViewContext(localContext);
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 935;
                this.match(TrinoParser.SHOW_);
                this.state = 936;
                this.match(TrinoParser.CREATE_);
                this.state = 937;
                this.match(TrinoParser.VIEW_);
                this.state = 938;
                this.viewIdentifier();
                }
                break;
            case 55:
                localContext = new ShowCreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 939;
                this.match(TrinoParser.SHOW_);
                this.state = 940;
                this.match(TrinoParser.CREATE_);
                this.state = 941;
                this.match(TrinoParser.MATERIALIZED_);
                this.state = 942;
                this.match(TrinoParser.VIEW_);
                this.state = 943;
                this.viewIdentifier();
                }
                break;
            case 56:
                localContext = new ShowTablesContext(localContext);
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 944;
                this.match(TrinoParser.SHOW_);
                this.state = 945;
                this.match(TrinoParser.TABLES_);
                this.state = 948;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88 || _la === 105) {
                    {
                    this.state = 946;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 88 || _la === 105)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 947;
                    this.schemaIdentifier();
                    }
                }

                this.state = 956;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 950;
                    this.match(TrinoParser.LIKE_);
                    this.state = 951;
                    (localContext as ShowTablesContext)._pattern = this.string_();
                    this.state = 954;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 73) {
                        {
                        this.state = 952;
                        this.match(TrinoParser.ESCAPE_);
                        this.state = 953;
                        (localContext as ShowTablesContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 57:
                localContext = new ShowSchemasContext(localContext);
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 958;
                this.match(TrinoParser.SHOW_);
                this.state = 959;
                this.match(TrinoParser.SCHEMAS_);
                this.state = 962;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88 || _la === 105) {
                    {
                    this.state = 960;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 88 || _la === 105)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 961;
                    this.catalogIdentifier();
                    }
                }

                this.state = 970;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 964;
                    this.match(TrinoParser.LIKE_);
                    this.state = 965;
                    (localContext as ShowSchemasContext)._pattern = this.string_();
                    this.state = 968;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 73) {
                        {
                        this.state = 966;
                        this.match(TrinoParser.ESCAPE_);
                        this.state = 967;
                        (localContext as ShowSchemasContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 58:
                localContext = new ShowCatalogsContext(localContext);
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 972;
                this.match(TrinoParser.SHOW_);
                this.state = 973;
                this.match(TrinoParser.CATALOGS_);
                this.state = 980;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 974;
                    this.match(TrinoParser.LIKE_);
                    this.state = 975;
                    (localContext as ShowCatalogsContext)._pattern = this.string_();
                    this.state = 978;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 73) {
                        {
                        this.state = 976;
                        this.match(TrinoParser.ESCAPE_);
                        this.state = 977;
                        (localContext as ShowCatalogsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 59:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 982;
                this.match(TrinoParser.SHOW_);
                this.state = 983;
                this.match(TrinoParser.COLUMNS_);
                this.state = 984;
                _la = this.tokenStream.LA(1);
                if(!(_la === 88 || _la === 105)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 986;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                    {
                    this.state = 985;
                    this.tableIdentifier();
                    }
                }

                this.state = 994;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 988;
                    this.match(TrinoParser.LIKE_);
                    this.state = 989;
                    (localContext as ShowColumnsContext)._pattern = this.string_();
                    this.state = 992;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 73) {
                        {
                        this.state = 990;
                        this.match(TrinoParser.ESCAPE_);
                        this.state = 991;
                        (localContext as ShowColumnsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 60:
                localContext = new ShowStatsContext(localContext);
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 996;
                this.match(TrinoParser.SHOW_);
                this.state = 997;
                this.match(TrinoParser.STATS_);
                this.state = 998;
                this.match(TrinoParser.FOR_);
                this.state = 999;
                this.tableIdentifier();
                }
                break;
            case 61:
                localContext = new ShowStatsForQueryContext(localContext);
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 1000;
                this.match(TrinoParser.SHOW_);
                this.state = 1001;
                this.match(TrinoParser.STATS_);
                this.state = 1002;
                this.match(TrinoParser.FOR_);
                this.state = 1003;
                this.match(TrinoParser.LPAREN_);
                this.state = 1004;
                this.rootQuery();
                this.state = 1005;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 62:
                localContext = new ShowRolesContext(localContext);
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 1007;
                this.match(TrinoParser.SHOW_);
                this.state = 1009;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 39) {
                    {
                    this.state = 1008;
                    this.match(TrinoParser.CURRENT_);
                    }
                }

                this.state = 1011;
                this.match(TrinoParser.ROLES_);
                this.state = 1014;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88 || _la === 105) {
                    {
                    this.state = 1012;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 88 || _la === 105)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1013;
                    this.catalogIdentifier();
                    }
                }

                }
                break;
            case 63:
                localContext = new ShowRoleGrantsContext(localContext);
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 1016;
                this.match(TrinoParser.SHOW_);
                this.state = 1017;
                this.match(TrinoParser.ROLE_);
                this.state = 1018;
                this.match(TrinoParser.GRANTS_);
                this.state = 1021;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88 || _la === 105) {
                    {
                    this.state = 1019;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 88 || _la === 105)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1020;
                    this.catalogIdentifier();
                    }
                }

                }
                break;
            case 64:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 1023;
                this.match(TrinoParser.DESCRIBE_);
                this.state = 1024;
                this.tableIdentifier();
                }
                break;
            case 65:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 1025;
                this.match(TrinoParser.DESC_);
                this.state = 1026;
                this.tableIdentifier();
                }
                break;
            case 66:
                localContext = new ShowFunctionsContext(localContext);
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 1027;
                this.match(TrinoParser.SHOW_);
                this.state = 1028;
                this.match(TrinoParser.FUNCTIONS_);
                this.state = 1031;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88 || _la === 105) {
                    {
                    this.state = 1029;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 88 || _la === 105)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1030;
                    this.schemaIdentifier();
                    }
                }

                this.state = 1039;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 1033;
                    this.match(TrinoParser.LIKE_);
                    this.state = 1034;
                    (localContext as ShowFunctionsContext)._pattern = this.string_();
                    this.state = 1037;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 73) {
                        {
                        this.state = 1035;
                        this.match(TrinoParser.ESCAPE_);
                        this.state = 1036;
                        (localContext as ShowFunctionsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 67:
                localContext = new ShowSessionContext(localContext);
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 1041;
                this.match(TrinoParser.SHOW_);
                this.state = 1042;
                this.match(TrinoParser.SESSION_);
                this.state = 1049;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 1043;
                    this.match(TrinoParser.LIKE_);
                    this.state = 1044;
                    (localContext as ShowSessionContext)._pattern = this.string_();
                    this.state = 1047;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 73) {
                        {
                        this.state = 1045;
                        this.match(TrinoParser.ESCAPE_);
                        this.state = 1046;
                        (localContext as ShowSessionContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 68:
                localContext = new SetSessionAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 1051;
                this.match(TrinoParser.SET_);
                this.state = 1052;
                this.match(TrinoParser.SESSION_);
                this.state = 1053;
                this.match(TrinoParser.AUTHORIZATION_);
                this.state = 1054;
                this.authorizationUser();
                }
                break;
            case 69:
                localContext = new ResetSessionAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 1055;
                this.match(TrinoParser.RESET_);
                this.state = 1056;
                this.match(TrinoParser.SESSION_);
                this.state = 1057;
                this.match(TrinoParser.AUTHORIZATION_);
                }
                break;
            case 70:
                localContext = new SetSessionContext(localContext);
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1058;
                this.match(TrinoParser.SET_);
                this.state = 1059;
                this.match(TrinoParser.SESSION_);
                this.state = 1060;
                this.qualifiedName();
                this.state = 1061;
                this.match(TrinoParser.EQ_);
                this.state = 1062;
                this.expression();
                }
                break;
            case 71:
                localContext = new ResetSessionContext(localContext);
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1064;
                this.match(TrinoParser.RESET_);
                this.state = 1065;
                this.match(TrinoParser.SESSION_);
                this.state = 1066;
                this.qualifiedName();
                }
                break;
            case 72:
                localContext = new StartTransactionContext(localContext);
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1067;
                this.match(TrinoParser.START_);
                this.state = 1068;
                this.match(TrinoParser.TRANSACTION_);
                this.state = 1077;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 117 || _la === 203) {
                    {
                    this.state = 1069;
                    this.transactionMode();
                    this.state = 1074;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1070;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1071;
                        this.transactionMode();
                        }
                        }
                        this.state = 1076;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 73:
                localContext = new CommitContext(localContext);
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1079;
                this.match(TrinoParser.COMMIT_);
                this.state = 1081;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 291) {
                    {
                    this.state = 1080;
                    this.match(TrinoParser.WORK_);
                    }
                }

                }
                break;
            case 74:
                localContext = new RollbackContext(localContext);
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1083;
                this.match(TrinoParser.ROLLBACK_);
                this.state = 1085;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 291) {
                    {
                    this.state = 1084;
                    this.match(TrinoParser.WORK_);
                    }
                }

                }
                break;
            case 75:
                localContext = new PrepareContext(localContext);
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1087;
                this.match(TrinoParser.PREPARE_);
                this.state = 1088;
                this.identifier();
                this.state = 1089;
                this.match(TrinoParser.FROM_);
                this.state = 1090;
                this.statement();
                }
                break;
            case 76:
                localContext = new DeallocateContext(localContext);
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1092;
                this.match(TrinoParser.DEALLOCATE_);
                this.state = 1093;
                this.match(TrinoParser.PREPARE_);
                this.state = 1094;
                this.identifier();
                }
                break;
            case 77:
                localContext = new ExecuteContext(localContext);
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 1095;
                this.match(TrinoParser.EXECUTE_);
                this.state = 1096;
                this.identifier();
                this.state = 1106;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 274) {
                    {
                    this.state = 1097;
                    this.match(TrinoParser.USING_);
                    this.state = 1098;
                    this.expression();
                    this.state = 1103;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1099;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1100;
                        this.expression();
                        }
                        }
                        this.state = 1105;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 78:
                localContext = new ExecuteImmediateContext(localContext);
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 1108;
                this.match(TrinoParser.EXECUTE_);
                this.state = 1109;
                this.match(TrinoParser.IMMEDIATE_);
                this.state = 1110;
                this.string_();
                this.state = 1120;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 274) {
                    {
                    this.state = 1111;
                    this.match(TrinoParser.USING_);
                    this.state = 1112;
                    this.expression();
                    this.state = 1117;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1113;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1114;
                        this.expression();
                        }
                        }
                        this.state = 1119;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 79:
                localContext = new DescribeInputContext(localContext);
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 1122;
                this.match(TrinoParser.DESCRIBE_);
                this.state = 1123;
                this.match(TrinoParser.INPUT_);
                this.state = 1124;
                this.identifier();
                }
                break;
            case 80:
                localContext = new DescribeOutputContext(localContext);
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 1125;
                this.match(TrinoParser.DESCRIBE_);
                this.state = 1126;
                this.match(TrinoParser.OUTPUT_);
                this.state = 1127;
                this.identifier();
                }
                break;
            case 81:
                localContext = new SetPathContext(localContext);
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 1128;
                this.match(TrinoParser.SET_);
                this.state = 1129;
                this.match(TrinoParser.PATH_);
                this.state = 1130;
                this.pathSpecification();
                }
                break;
            case 82:
                localContext = new SetTimeZoneContext(localContext);
                this.enterOuterAlt(localContext, 82);
                {
                this.state = 1131;
                this.match(TrinoParser.SET_);
                this.state = 1132;
                this.match(TrinoParser.TIME_);
                this.state = 1133;
                this.match(TrinoParser.ZONE_);
                this.state = 1136;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 122, this.context) ) {
                case 1:
                    {
                    this.state = 1134;
                    this.match(TrinoParser.LOCAL_);
                    }
                    break;
                case 2:
                    {
                    this.state = 1135;
                    this.expression();
                    }
                    break;
                }
                }
                break;
            case 83:
                localContext = new MergeContext(localContext);
                this.enterOuterAlt(localContext, 83);
                {
                this.state = 1138;
                this.match(TrinoParser.MERGE_);
                this.state = 1139;
                this.match(TrinoParser.INTO_);
                this.state = 1140;
                this.tableIdentifier();
                this.state = 1145;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282056543) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                    {
                    this.state = 1142;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 11) {
                        {
                        this.state = 1141;
                        this.match(TrinoParser.AS_);
                        }
                    }

                    this.state = 1144;
                    this.aliasIdentifier();
                    }
                }

                this.state = 1147;
                this.match(TrinoParser.USING_);
                this.state = 1148;
                this.relation(0);
                this.state = 1149;
                this.match(TrinoParser.ON_);
                this.state = 1150;
                this.expression();
                this.state = 1152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 1151;
                    this.mergeCase();
                    }
                    }
                    this.state = 1154;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 284);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertStatement(): InsertStatementContext {
        let localContext = new InsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 6, TrinoParser.RULE_insertStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1158;
            this.match(TrinoParser.INSERT_);
            this.state = 1159;
            this.match(TrinoParser.INTO_);
            this.state = 1160;
            this.tableReference();
            this.state = 1162;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 127, this.context) ) {
            case 1:
                {
                this.state = 1161;
                this.columnAliases();
                }
                break;
            }
            this.state = 1164;
            this.rootQuery();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateStatement(): UpdateStatementContext {
        let localContext = new UpdateStatementContext(this.context, this.state);
        this.enterRule(localContext, 8, TrinoParser.RULE_updateStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1166;
            this.match(TrinoParser.UPDATE_);
            this.state = 1167;
            this.tableReference();
            this.state = 1168;
            this.match(TrinoParser.SET_);
            this.state = 1169;
            this.updateAssignment();
            this.state = 1174;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1170;
                this.match(TrinoParser.COMMA_);
                this.state = 1171;
                this.updateAssignment();
                }
                }
                this.state = 1176;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1179;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 285) {
                {
                this.state = 1177;
                this.match(TrinoParser.WHERE_);
                this.state = 1178;
                localContext._where = this.booleanExpression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rootQuery(): RootQueryContext {
        let localContext = new RootQueryContext(this.context, this.state);
        this.enterRule(localContext, 10, TrinoParser.RULE_rootQuery);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1182;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 130, this.context) ) {
            case 1:
                {
                this.state = 1181;
                this.withFunction();
                }
                break;
            }
            this.state = 1184;
            this.query();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withFunction(): WithFunctionContext {
        let localContext = new WithFunctionContext(this.context, this.state);
        this.enterRule(localContext, 12, TrinoParser.RULE_withFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1186;
            this.match(TrinoParser.WITH_);
            this.state = 1187;
            this.functionSpecification();
            this.state = 1192;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1188;
                this.match(TrinoParser.COMMA_);
                this.state = 1189;
                this.functionSpecification();
                }
                }
                this.state = 1194;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public query(): QueryContext {
        let localContext = new QueryContext(this.context, this.state);
        this.enterRule(localContext, 14, TrinoParser.RULE_query);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1196;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 288) {
                {
                this.state = 1195;
                this.with_();
                }
            }

            this.state = 1198;
            this.queryNoWith();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_(): WithContext {
        let localContext = new WithContext(this.context, this.state);
        this.enterRule(localContext, 16, TrinoParser.RULE_with);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1200;
            this.match(TrinoParser.WITH_);
            this.state = 1202;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 204) {
                {
                this.state = 1201;
                this.match(TrinoParser.RECURSIVE_);
                }
            }

            this.state = 1204;
            this.namedQuery();
            this.state = 1209;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1205;
                this.match(TrinoParser.COMMA_);
                this.state = 1206;
                this.namedQuery();
                }
                }
                this.state = 1211;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElement(): TableElementContext {
        let localContext = new TableElementContext(this.context, this.state);
        this.enterRule(localContext, 18, TrinoParser.RULE_tableElement);
        try {
            this.state = 1214;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
            case TrinoParser.IDENTIFIER_:
            case TrinoParser.DIGIT_IDENTIFIER_:
            case TrinoParser.QUOTED_IDENTIFIER_:
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1212;
                this.columnDefinition();
                }
                break;
            case TrinoParser.LIKE_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1213;
                this.likeClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnDefinition(): ColumnDefinitionContext {
        let localContext = new ColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 20, TrinoParser.RULE_columnDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1216;
            this.identifier();
            this.state = 1217;
            this.type_(0);
            this.state = 1220;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 165) {
                {
                this.state = 1218;
                this.match(TrinoParser.NOT_);
                this.state = 1219;
                this.match(TrinoParser.NULL_);
                }
            }

            this.state = 1224;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 29) {
                {
                this.state = 1222;
                this.match(TrinoParser.COMMENT_);
                this.state = 1223;
                this.string_();
                }
            }

            this.state = 1228;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 288) {
                {
                this.state = 1226;
                this.match(TrinoParser.WITH_);
                this.state = 1227;
                this.properties();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likeClause(): LikeClauseContext {
        let localContext = new LikeClauseContext(this.context, this.state);
        this.enterRule(localContext, 22, TrinoParser.RULE_likeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1230;
            this.match(TrinoParser.LIKE_);
            this.state = 1231;
            this.qualifiedName();
            this.state = 1234;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75 || _la === 106) {
                {
                this.state = 1232;
                localContext._optionType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 75 || _la === 106)) {
                    localContext._optionType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1233;
                this.match(TrinoParser.PROPERTIES_);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public properties(): PropertiesContext {
        let localContext = new PropertiesContext(this.context, this.state);
        this.enterRule(localContext, 24, TrinoParser.RULE_properties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1236;
            this.match(TrinoParser.LPAREN_);
            this.state = 1237;
            this.propertyAssignments();
            this.state = 1238;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        let localContext = new PropertyAssignmentsContext(this.context, this.state);
        this.enterRule(localContext, 26, TrinoParser.RULE_propertyAssignments);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1240;
            this.property();
            this.state = 1245;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1241;
                this.match(TrinoParser.COMMA_);
                this.state = 1242;
                this.property();
                }
                }
                this.state = 1247;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public property(): PropertyContext {
        let localContext = new PropertyContext(this.context, this.state);
        this.enterRule(localContext, 28, TrinoParser.RULE_property);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1248;
            this.identifier();
            this.state = 1249;
            this.match(TrinoParser.EQ_);
            this.state = 1250;
            this.propertyValue();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyValue(): PropertyValueContext {
        let localContext = new PropertyValueContext(this.context, this.state);
        this.enterRule(localContext, 30, TrinoParser.RULE_propertyValue);
        try {
            this.state = 1254;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 141, this.context) ) {
            case 1:
                localContext = new DefaultPropertyValueContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1252;
                this.match(TrinoParser.DEFAULT_);
                }
                break;
            case 2:
                localContext = new NonDefaultPropertyValueContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1253;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryNoWith(): QueryNoWithContext {
        let localContext = new QueryNoWithContext(this.context, this.state);
        this.enterRule(localContext, 32, TrinoParser.RULE_queryNoWith);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1256;
            this.queryTerm(0);
            this.state = 1267;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 178) {
                {
                this.state = 1257;
                this.match(TrinoParser.ORDER_);
                this.state = 1258;
                this.match(TrinoParser.BY_);
                this.state = 1259;
                this.sortItem();
                this.state = 1264;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1260;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1261;
                    this.sortItem();
                    }
                    }
                    this.state = 1266;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1274;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 171) {
                {
                this.state = 1269;
                this.match(TrinoParser.OFFSET_);
                this.state = 1270;
                localContext._offset = this.rowCount();
                this.state = 1272;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 222 || _la === 223) {
                    {
                    this.state = 1271;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 222 || _la === 223)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
            }

            this.state = 1289;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.LIMIT_:
                {
                this.state = 1276;
                this.match(TrinoParser.LIMIT_);
                this.state = 1277;
                localContext._limit = this.limitRowCount();
                }
                break;
            case TrinoParser.FETCH_:
                {
                this.state = 1278;
                this.match(TrinoParser.FETCH_);
                this.state = 1279;
                _la = this.tokenStream.LA(1);
                if(!(_la === 84 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1281;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 308 || _la === 330) {
                    {
                    this.state = 1280;
                    localContext._fetchFirst = this.rowCount();
                    }
                }

                this.state = 1283;
                _la = this.tokenStream.LA(1);
                if(!(_la === 222 || _la === 223)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1287;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.ONLY_:
                    {
                    this.state = 1284;
                    this.match(TrinoParser.ONLY_);
                    }
                    break;
                case TrinoParser.WITH_:
                    {
                    this.state = 1285;
                    this.match(TrinoParser.WITH_);
                    this.state = 1286;
                    this.match(TrinoParser.TIES_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case TrinoParser.EOF:
            case TrinoParser.WITH_:
            case TrinoParser.SEMICOLON_:
            case TrinoParser.RPAREN_:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitRowCount(): LimitRowCountContext {
        let localContext = new LimitRowCountContext(this.context, this.state);
        this.enterRule(localContext, 34, TrinoParser.RULE_limitRowCount);
        try {
            this.state = 1293;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ALL_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1291;
                this.match(TrinoParser.ALL_);
                }
                break;
            case TrinoParser.QUESTION_MARK_:
            case TrinoParser.INTEGER_VALUE_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1292;
                this.rowCount();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowCount(): RowCountContext {
        let localContext = new RowCountContext(this.context, this.state);
        this.enterRule(localContext, 36, TrinoParser.RULE_rowCount);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1295;
            _la = this.tokenStream.LA(1);
            if(!(_la === 308 || _la === 330)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public queryTerm(): QueryTermContext;
    public queryTerm(_p: number): QueryTermContext;
    public queryTerm(_p?: number): QueryTermContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new QueryTermContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 38;
        this.enterRecursionRule(localContext, 38, TrinoParser.RULE_queryTerm, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new QueryTermDefaultContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 1298;
            this.queryPrimary();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1314;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 153, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1312;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 152, this.context) ) {
                    case 1:
                        {
                        localContext = new SetOperationContext(new QueryTermContext(parentContext, parentState));
                        (localContext as SetOperationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_queryTerm);
                        this.state = 1300;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 1301;
                        (localContext as SetOperationContext)._operator = this.match(TrinoParser.INTERSECT_);
                        this.state = 1303;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 5 || _la === 62) {
                            {
                            this.state = 1302;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1305;
                        (localContext as SetOperationContext)._right = this.queryTerm(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new SetOperationContext(new QueryTermContext(parentContext, parentState));
                        (localContext as SetOperationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_queryTerm);
                        this.state = 1306;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 1307;
                        (localContext as SetOperationContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 74 || _la === 265)) {
                            (localContext as SetOperationContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1309;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 5 || _la === 62) {
                            {
                            this.state = 1308;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1311;
                        (localContext as SetOperationContext)._right = this.queryTerm(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 1316;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 153, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localContext = new QueryPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 40, TrinoParser.RULE_queryPrimary);
        try {
            let alternative: number;
            this.state = 1333;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.SELECT_:
                localContext = new QueryPrimaryDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1317;
                this.querySpecification();
                }
                break;
            case TrinoParser.TABLE_:
                localContext = new TableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1318;
                this.match(TrinoParser.TABLE_);
                this.state = 1319;
                this.qualifiedName();
                }
                break;
            case TrinoParser.VALUES_:
                localContext = new InlineTableContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1320;
                this.match(TrinoParser.VALUES_);
                this.state = 1321;
                this.expression();
                this.state = 1326;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 154, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1322;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1323;
                        this.expression();
                        }
                        }
                    }
                    this.state = 1328;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 154, this.context);
                }
                }
                break;
            case TrinoParser.LPAREN_:
                localContext = new SubqueryContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1329;
                this.match(TrinoParser.LPAREN_);
                this.state = 1330;
                this.queryNoWith();
                this.state = 1331;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortItem(): SortItemContext {
        let localContext = new SortItemContext(this.context, this.state);
        this.enterRule(localContext, 42, TrinoParser.RULE_sortItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1335;
            this.expression();
            this.state = 1337;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 12 || _la === 58) {
                {
                this.state = 1336;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 58)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1341;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 1339;
                this.match(TrinoParser.NULLS_);
                this.state = 1340;
                localContext._nullOrdering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 84 || _la === 131)) {
                    localContext._nullOrdering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecification(): QuerySpecificationContext {
        let localContext = new QuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 44, TrinoParser.RULE_querySpecification);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1343;
            this.match(TrinoParser.SELECT_);
            this.state = 1345;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 158, this.context) ) {
            case 1:
                {
                this.state = 1344;
                this.setQuantifier();
                }
                break;
            }
            this.state = 1347;
            this.selectItem();
            this.state = 1352;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 159, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1348;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1349;
                    this.selectItem();
                    }
                    }
                }
                this.state = 1354;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 159, this.context);
            }
            this.state = 1356;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 160, this.context) ) {
            case 1:
                {
                this.state = 1355;
                this.fromClause();
                }
                break;
            }
            this.state = 1360;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 161, this.context) ) {
            case 1:
                {
                this.state = 1358;
                this.match(TrinoParser.WHERE_);
                this.state = 1359;
                localContext._where = this.booleanExpression(0);
                }
                break;
            }
            this.state = 1365;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 162, this.context) ) {
            case 1:
                {
                this.state = 1362;
                this.match(TrinoParser.GROUP_);
                this.state = 1363;
                this.match(TrinoParser.BY_);
                this.state = 1364;
                this.groupBy();
                }
                break;
            }
            this.state = 1369;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 163, this.context) ) {
            case 1:
                {
                this.state = 1367;
                this.match(TrinoParser.HAVING_);
                this.state = 1368;
                localContext._having = this.booleanExpression(0);
                }
                break;
            }
            this.state = 1380;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 165, this.context) ) {
            case 1:
                {
                this.state = 1371;
                this.match(TrinoParser.WINDOW_);
                this.state = 1372;
                this.windowDefinition();
                this.state = 1377;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 164, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1373;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1374;
                        this.windowDefinition();
                        }
                        }
                    }
                    this.state = 1379;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 164, this.context);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 46, TrinoParser.RULE_fromClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1382;
            this.match(TrinoParser.FROM_);
            this.state = 1383;
            this.relation(0);
            this.state = 1388;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 166, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1384;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1385;
                    this.relation(0);
                    }
                    }
                }
                this.state = 1390;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 166, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupBy(): GroupByContext {
        let localContext = new GroupByContext(this.context, this.state);
        this.enterRule(localContext, 48, TrinoParser.RULE_groupBy);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1392;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 167, this.context) ) {
            case 1:
                {
                this.state = 1391;
                this.setQuantifier();
                }
                break;
            }
            this.state = 1394;
            this.groupingElement();
            this.state = 1399;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 168, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1395;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1396;
                    this.groupingElement();
                    }
                    }
                }
                this.state = 1401;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 168, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingElement(): GroupingElementContext {
        let localContext = new GroupingElementContext(this.context, this.state);
        this.enterRule(localContext, 50, TrinoParser.RULE_groupingElement);
        let _la: number;
        try {
            this.state = 1442;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 174, this.context) ) {
            case 1:
                localContext = new SingleGroupingSetContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1402;
                this.groupingSet();
                }
                break;
            case 2:
                localContext = new RollupContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1403;
                this.match(TrinoParser.ROLLUP_);
                this.state = 1404;
                this.match(TrinoParser.LPAREN_);
                this.state = 1413;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                    {
                    this.state = 1405;
                    this.expression();
                    this.state = 1410;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1406;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1407;
                        this.expression();
                        }
                        }
                        this.state = 1412;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1415;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 3:
                localContext = new CubeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1416;
                this.match(TrinoParser.CUBE_);
                this.state = 1417;
                this.match(TrinoParser.LPAREN_);
                this.state = 1426;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                    {
                    this.state = 1418;
                    this.expression();
                    this.state = 1423;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1419;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1420;
                        this.expression();
                        }
                        }
                        this.state = 1425;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1428;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 4:
                localContext = new MultipleGroupingSetsContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1429;
                this.match(TrinoParser.GROUPING_);
                this.state = 1430;
                this.match(TrinoParser.SETS_);
                this.state = 1431;
                this.match(TrinoParser.LPAREN_);
                this.state = 1432;
                this.groupingSet();
                this.state = 1437;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1433;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1434;
                    this.groupingSet();
                    }
                    }
                    this.state = 1439;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1440;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSet(): GroupingSetContext {
        let localContext = new GroupingSetContext(this.context, this.state);
        this.enterRule(localContext, 52, TrinoParser.RULE_groupingSet);
        let _la: number;
        try {
            this.state = 1457;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1444;
                this.match(TrinoParser.LPAREN_);
                this.state = 1453;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                    {
                    this.state = 1445;
                    this.expression();
                    this.state = 1450;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1446;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1447;
                        this.expression();
                        }
                        }
                        this.state = 1452;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1455;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1456;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowDefinition(): WindowDefinitionContext {
        let localContext = new WindowDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 54, TrinoParser.RULE_windowDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1459;
            localContext._name = this.identifier();
            this.state = 1460;
            this.match(TrinoParser.AS_);
            this.state = 1461;
            this.match(TrinoParser.LPAREN_);
            this.state = 1462;
            this.windowSpecification();
            this.state = 1463;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpecification(): WindowSpecificationContext {
        let localContext = new WindowSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 56, TrinoParser.RULE_windowSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1466;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 178, this.context) ) {
            case 1:
                {
                this.state = 1465;
                localContext._existingWindowName = this.identifier();
                }
                break;
            }
            this.state = 1478;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 1468;
                this.match(TrinoParser.PARTITION_);
                this.state = 1469;
                this.match(TrinoParser.BY_);
                this.state = 1470;
                localContext._expression = this.expression();
                localContext._partition.push(localContext._expression!);
                this.state = 1475;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1471;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1472;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression!);
                    }
                    }
                    this.state = 1477;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1490;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 178) {
                {
                this.state = 1480;
                this.match(TrinoParser.ORDER_);
                this.state = 1481;
                this.match(TrinoParser.BY_);
                this.state = 1482;
                this.sortItem();
                this.state = 1487;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1483;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1484;
                    this.sortItem();
                    }
                    }
                    this.state = 1489;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1493;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99 || _la === 151 || _la === 202 || _la === 223) {
                {
                this.state = 1492;
                this.windowFrame();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 58, TrinoParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1495;
            localContext._name = this.identifier();
            this.state = 1497;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 313) {
                {
                this.state = 1496;
                this.columnAliases();
                }
            }

            this.state = 1499;
            this.match(TrinoParser.AS_);
            this.state = 1500;
            this.match(TrinoParser.LPAREN_);
            this.state = 1501;
            this.query();
            this.state = 1502;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setQuantifier(): SetQuantifierContext {
        let localContext = new SetQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 60, TrinoParser.RULE_setQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1504;
            _la = this.tokenStream.LA(1);
            if(!(_la === 5 || _la === 62)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItem(): SelectItemContext {
        let localContext = new SelectItemContext(this.context, this.state);
        this.enterRule(localContext, 62, TrinoParser.RULE_selectItem);
        let _la: number;
        try {
            this.state = 1521;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 188, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1506;
                this.match(TrinoParser.ASTERISK_);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1507;
                this.expression();
                this.state = 1512;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 186, this.context) ) {
                case 1:
                    {
                    this.state = 1509;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 11) {
                        {
                        this.state = 1508;
                        this.match(TrinoParser.AS_);
                        }
                    }

                    this.state = 1511;
                    this.aliasIdentifier();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1514;
                this.primaryExpression(0);
                this.state = 1515;
                this.match(TrinoParser.DOT_);
                this.state = 1516;
                this.match(TrinoParser.ASTERISK_);
                this.state = 1519;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 187, this.context) ) {
                case 1:
                    {
                    this.state = 1517;
                    this.match(TrinoParser.AS_);
                    this.state = 1518;
                    this.columnAliases();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public relation(): RelationContext;
    public relation(_p: number): RelationContext;
    public relation(_p?: number): RelationContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new RelationContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 64;
        this.enterRecursionRule(localContext, 64, TrinoParser.RULE_relation, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new RelationDefaultContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 1524;
            this.sampledRelation();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1544;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 190, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new JoinRelationContext(new RelationContext(parentContext, parentState));
                    (localContext as JoinRelationContext)._left = previousContext;
                    this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_relation);
                    this.state = 1526;
                    if (!(this.precpred(this.context, 2))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                    }
                    this.state = 1540;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoParser.CROSS_:
                        {
                        this.state = 1527;
                        this.match(TrinoParser.CROSS_);
                        this.state = 1528;
                        this.match(TrinoParser.JOIN_);
                        this.state = 1529;
                        (localContext as JoinRelationContext)._right = this.sampledRelation();
                        }
                        break;
                    case TrinoParser.FULL_:
                    case TrinoParser.INNER_:
                    case TrinoParser.JOIN_:
                    case TrinoParser.LEFT_:
                    case TrinoParser.RIGHT_:
                        {
                        this.state = 1530;
                        this.joinType();
                        this.state = 1531;
                        this.match(TrinoParser.JOIN_);
                        this.state = 1532;
                        (localContext as JoinRelationContext)._rightRelation = this.relation(0);
                        this.state = 1533;
                        this.joinCriteria();
                        }
                        break;
                    case TrinoParser.NATURAL_:
                        {
                        this.state = 1535;
                        this.match(TrinoParser.NATURAL_);
                        this.state = 1536;
                        this.joinType();
                        this.state = 1537;
                        this.match(TrinoParser.JOIN_);
                        this.state = 1538;
                        (localContext as JoinRelationContext)._right = this.sampledRelation();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    }
                }
                this.state = 1546;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 190, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public joinType(): JoinTypeContext {
        let localContext = new JoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 66, TrinoParser.RULE_joinType);
        let _la: number;
        try {
            this.state = 1554;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.INNER_:
            case TrinoParser.JOIN_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1548;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 108) {
                    {
                    this.state = 1547;
                    this.match(TrinoParser.INNER_);
                    }
                }

                }
                break;
            case TrinoParser.FULL_:
            case TrinoParser.LEFT_:
            case TrinoParser.RIGHT_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1550;
                _la = this.tokenStream.LA(1);
                if(!(_la === 89 || _la === 135 || _la === 217)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1552;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 180) {
                    {
                    this.state = 1551;
                    this.match(TrinoParser.OUTER_);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCriteria(): JoinCriteriaContext {
        let localContext = new JoinCriteriaContext(this.context, this.state);
        this.enterRule(localContext, 68, TrinoParser.RULE_joinCriteria);
        let _la: number;
        try {
            this.state = 1570;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ON_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1556;
                this.match(TrinoParser.ON_);
                this.state = 1557;
                this.booleanExpression(0);
                }
                break;
            case TrinoParser.USING_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1558;
                this.match(TrinoParser.USING_);
                this.state = 1559;
                this.match(TrinoParser.LPAREN_);
                this.state = 1560;
                this.tableIdentifier();
                this.state = 1565;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1561;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1562;
                    this.tableIdentifier();
                    }
                    }
                    this.state = 1567;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1568;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampledRelation(): SampledRelationContext {
        let localContext = new SampledRelationContext(this.context, this.state);
        this.enterRule(localContext, 70, TrinoParser.RULE_sampledRelation);
        try {
            this.state = 1582;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 197, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1572;
                this.tableReference();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1573;
                this.patternRecognition();
                this.state = 1580;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 196, this.context) ) {
                case 1:
                    {
                    this.state = 1574;
                    this.match(TrinoParser.TABLESAMPLE_);
                    this.state = 1575;
                    this.sampleType();
                    this.state = 1576;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 1577;
                    localContext._percentage = this.expression();
                    this.state = 1578;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleType(): SampleTypeContext {
        let localContext = new SampleTypeContext(this.context, this.state);
        this.enterRule(localContext, 72, TrinoParser.RULE_sampleType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1584;
            _la = this.tokenStream.LA(1);
            if(!(_la === 16 || _la === 243)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimsSpecification(): TrimsSpecificationContext {
        let localContext = new TrimsSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 74, TrinoParser.RULE_trimsSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1586;
            _la = this.tokenStream.LA(1);
            if(!(_la === 18 || _la === 133 || _la === 254)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listAggOverflowBehavior(): ListAggOverflowBehaviorContext {
        let localContext = new ListAggOverflowBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 76, TrinoParser.RULE_listAggOverflowBehavior);
        let _la: number;
        try {
            this.state = 1594;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ERROR_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1588;
                this.match(TrinoParser.ERROR_);
                }
                break;
            case TrinoParser.TRUNCATE_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1589;
                this.match(TrinoParser.TRUNCATE_);
                this.state = 1591;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 327 || _la === 328) {
                    {
                    this.state = 1590;
                    this.string_();
                    }
                }

                this.state = 1593;
                this.listaggCountIndication();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listaggCountIndication(): ListaggCountIndicationContext {
        let localContext = new ListaggCountIndicationContext(this.context, this.state);
        this.enterRule(localContext, 78, TrinoParser.RULE_listaggCountIndication);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1596;
            _la = this.tokenStream.LA(1);
            if(!(_la === 288 || _la === 290)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1597;
            this.match(TrinoParser.COUNT_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternRecognition(): PatternRecognitionContext {
        let localContext = new PatternRecognitionContext(this.context, this.state);
        this.enterRule(localContext, 80, TrinoParser.RULE_patternRecognition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1599;
            this.aliasedRelation();
            this.state = 1682;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 215, this.context) ) {
            case 1:
                {
                this.state = 1600;
                this.match(TrinoParser.MATCH_RECOGNIZE_);
                this.state = 1601;
                this.match(TrinoParser.LPAREN_);
                this.state = 1612;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 184) {
                    {
                    this.state = 1602;
                    this.match(TrinoParser.PARTITION_);
                    this.state = 1603;
                    this.match(TrinoParser.BY_);
                    this.state = 1604;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression!);
                    this.state = 1609;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1605;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1606;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression!);
                        }
                        }
                        this.state = 1611;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1624;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178) {
                    {
                    this.state = 1614;
                    this.match(TrinoParser.ORDER_);
                    this.state = 1615;
                    this.match(TrinoParser.BY_);
                    this.state = 1616;
                    this.sortItem();
                    this.state = 1621;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1617;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1618;
                        this.sortItem();
                        }
                        }
                        this.state = 1623;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1635;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 1626;
                    this.match(TrinoParser.MEASURES_);
                    this.state = 1627;
                    this.measureDefinition();
                    this.state = 1632;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1628;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1629;
                        this.measureDefinition();
                        }
                        }
                        this.state = 1634;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1638;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5 || _la === 174) {
                    {
                    this.state = 1637;
                    this.rowsPerMatch();
                    }
                }

                this.state = 1643;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 1640;
                    this.match(TrinoParser.AFTER_);
                    this.state = 1641;
                    this.match(TrinoParser.MATCH_);
                    this.state = 1642;
                    this.skipTo();
                    }
                }

                this.state = 1646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 107 || _la === 230) {
                    {
                    this.state = 1645;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 107 || _la === 230)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1648;
                this.match(TrinoParser.PATTERN_);
                this.state = 1649;
                this.match(TrinoParser.LPAREN_);
                this.state = 1650;
                this.rowPattern(0);
                this.state = 1651;
                this.match(TrinoParser.RPAREN_);
                this.state = 1661;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 241) {
                    {
                    this.state = 1652;
                    this.match(TrinoParser.SUBSET_);
                    this.state = 1653;
                    this.subsetDefinition();
                    this.state = 1658;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1654;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1655;
                        this.subsetDefinition();
                        }
                        }
                        this.state = 1660;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1663;
                this.match(TrinoParser.DEFINE_);
                this.state = 1664;
                this.variableDefinition();
                this.state = 1669;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1665;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1666;
                    this.variableDefinition();
                    }
                    }
                    this.state = 1671;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1672;
                this.match(TrinoParser.RPAREN_);
                this.state = 1680;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 214, this.context) ) {
                case 1:
                    {
                    this.state = 1674;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 11) {
                        {
                        this.state = 1673;
                        this.match(TrinoParser.AS_);
                        }
                    }

                    this.state = 1676;
                    this.aliasIdentifier();
                    this.state = 1678;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 213, this.context) ) {
                    case 1:
                        {
                        this.state = 1677;
                        this.columnAliases();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public measureDefinition(): MeasureDefinitionContext {
        let localContext = new MeasureDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 82, TrinoParser.RULE_measureDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1684;
            this.expression();
            this.state = 1685;
            this.match(TrinoParser.AS_);
            this.state = 1686;
            this.aliasIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsPerMatch(): RowsPerMatchContext {
        let localContext = new RowsPerMatchContext(this.context, this.state);
        this.enterRule(localContext, 84, TrinoParser.RULE_rowsPerMatch);
        let _la: number;
        try {
            this.state = 1699;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ONE_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1688;
                this.match(TrinoParser.ONE_);
                this.state = 1689;
                this.match(TrinoParser.ROW_);
                this.state = 1690;
                this.match(TrinoParser.PER_);
                this.state = 1691;
                this.match(TrinoParser.MATCH_);
                }
                break;
            case TrinoParser.ALL_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1692;
                this.match(TrinoParser.ALL_);
                this.state = 1693;
                this.match(TrinoParser.ROWS_);
                this.state = 1694;
                this.match(TrinoParser.PER_);
                this.state = 1695;
                this.match(TrinoParser.MATCH_);
                this.state = 1697;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 172 || _la === 236 || _la === 288) {
                    {
                    this.state = 1696;
                    this.emptyMatchHandling();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public emptyMatchHandling(): EmptyMatchHandlingContext {
        let localContext = new EmptyMatchHandlingContext(this.context, this.state);
        this.enterRule(localContext, 86, TrinoParser.RULE_emptyMatchHandling);
        try {
            this.state = 1710;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.SHOW_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1701;
                this.match(TrinoParser.SHOW_);
                this.state = 1702;
                this.match(TrinoParser.EMPTY_);
                this.state = 1703;
                this.match(TrinoParser.MATCHES_);
                }
                break;
            case TrinoParser.OMIT_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1704;
                this.match(TrinoParser.OMIT_);
                this.state = 1705;
                this.match(TrinoParser.EMPTY_);
                this.state = 1706;
                this.match(TrinoParser.MATCHES_);
                }
                break;
            case TrinoParser.WITH_:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1707;
                this.match(TrinoParser.WITH_);
                this.state = 1708;
                this.match(TrinoParser.UNMATCHED_);
                this.state = 1709;
                this.match(TrinoParser.ROWS_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skipTo(): SkipToContext {
        let localContext = new SkipToContext(this.context, this.state);
        this.enterRule(localContext, 88, TrinoParser.RULE_skipTo);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1712;
            this.match(TrinoParser.SKIP_);
            this.state = 1725;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.TO_:
                {
                this.state = 1713;
                this.match(TrinoParser.TO_);
                this.state = 1720;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 220, this.context) ) {
                case 1:
                    {
                    this.state = 1714;
                    this.match(TrinoParser.NEXT_);
                    this.state = 1715;
                    this.match(TrinoParser.ROW_);
                    }
                    break;
                case 2:
                    {
                    this.state = 1717;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
                    case 1:
                        {
                        this.state = 1716;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 84 || _la === 131)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                    }
                    this.state = 1719;
                    this.identifier();
                    }
                    break;
                }
                }
                break;
            case TrinoParser.PAST_:
                {
                this.state = 1722;
                this.match(TrinoParser.PAST_);
                this.state = 1723;
                this.match(TrinoParser.LAST_);
                this.state = 1724;
                this.match(TrinoParser.ROW_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subsetDefinition(): SubsetDefinitionContext {
        let localContext = new SubsetDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 90, TrinoParser.RULE_subsetDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1727;
            localContext._name = this.identifier();
            this.state = 1728;
            this.match(TrinoParser.EQ_);
            this.state = 1729;
            this.match(TrinoParser.LPAREN_);
            this.state = 1730;
            localContext._identifier = this.identifier();
            localContext._union.push(localContext._identifier!);
            this.state = 1735;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1731;
                this.match(TrinoParser.COMMA_);
                this.state = 1732;
                localContext._identifier = this.identifier();
                localContext._union.push(localContext._identifier!);
                }
                }
                this.state = 1737;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1738;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDefinition(): VariableDefinitionContext {
        let localContext = new VariableDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 92, TrinoParser.RULE_variableDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1740;
            this.identifier();
            this.state = 1741;
            this.match(TrinoParser.AS_);
            this.state = 1742;
            this.aliasIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aliasedRelation(): AliasedRelationContext {
        let localContext = new AliasedRelationContext(this.context, this.state);
        this.enterRule(localContext, 94, TrinoParser.RULE_aliasedRelation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1744;
            this.relationPrimary();
            this.state = 1752;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 225, this.context) ) {
            case 1:
                {
                this.state = 1746;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 11) {
                    {
                    this.state = 1745;
                    this.match(TrinoParser.AS_);
                    }
                }

                this.state = 1748;
                this.aliasIdentifier();
                this.state = 1750;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 224, this.context) ) {
                case 1:
                    {
                    this.state = 1749;
                    this.columnAliases();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAliases(): ColumnAliasesContext {
        let localContext = new ColumnAliasesContext(this.context, this.state);
        this.enterRule(localContext, 96, TrinoParser.RULE_columnAliases);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1754;
            this.match(TrinoParser.LPAREN_);
            this.state = 1755;
            this.columnIdentifier();
            this.state = 1760;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1756;
                this.match(TrinoParser.COMMA_);
                this.state = 1757;
                this.columnIdentifier();
                }
                }
                this.state = 1762;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1763;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationPrimary(): RelationPrimaryContext {
        let localContext = new RelationPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 98, TrinoParser.RULE_relationPrimary);
        let _la: number;
        try {
            this.state = 1802;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 230, this.context) ) {
            case 1:
                localContext = new TableIdentifierRelationContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1765;
                this.tableIdentifier();
                this.state = 1767;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 227, this.context) ) {
                case 1:
                    {
                    this.state = 1766;
                    this.queryPeriod();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new SubqueryRelationContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1769;
                this.match(TrinoParser.LPAREN_);
                this.state = 1770;
                this.query();
                this.state = 1771;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 3:
                localContext = new UnnestContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1773;
                this.match(TrinoParser.UNNEST_);
                this.state = 1774;
                this.match(TrinoParser.LPAREN_);
                this.state = 1775;
                this.expression();
                this.state = 1780;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1776;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1777;
                    this.expression();
                    }
                    }
                    this.state = 1782;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1783;
                this.match(TrinoParser.RPAREN_);
                this.state = 1786;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 229, this.context) ) {
                case 1:
                    {
                    this.state = 1784;
                    this.match(TrinoParser.WITH_);
                    this.state = 1785;
                    this.match(TrinoParser.ORDINALITY_);
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new LateralContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1788;
                this.match(TrinoParser.LATERAL_);
                this.state = 1789;
                this.match(TrinoParser.LPAREN_);
                this.state = 1790;
                this.query();
                this.state = 1791;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 5:
                localContext = new TableFunctionInvocationContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1793;
                this.match(TrinoParser.TABLE_);
                this.state = 1794;
                this.match(TrinoParser.LPAREN_);
                this.state = 1795;
                this.tableFunctionCall();
                this.state = 1796;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 6:
                localContext = new ParenthesizedRelationContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1798;
                this.match(TrinoParser.LPAREN_);
                this.state = 1799;
                this.relation(0);
                this.state = 1800;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFunctionCall(): TableFunctionCallContext {
        let localContext = new TableFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 100, TrinoParser.RULE_tableFunctionCall);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1804;
            this.qualifiedName();
            this.state = 1805;
            this.match(TrinoParser.LPAREN_);
            this.state = 1814;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 232, this.context) ) {
            case 1:
                {
                this.state = 1806;
                this.tableFunctionArgument();
                this.state = 1811;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1807;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1808;
                    this.tableFunctionArgument();
                    }
                    }
                    this.state = 1813;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            this.state = 1825;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 1816;
                this.match(TrinoParser.COPARTITION_);
                this.state = 1817;
                this.copartitionTables();
                this.state = 1822;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1818;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1819;
                    this.copartitionTables();
                    }
                    }
                    this.state = 1824;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1827;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFunctionArgument(): TableFunctionArgumentContext {
        let localContext = new TableFunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 102, TrinoParser.RULE_tableFunctionArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1832;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 235, this.context) ) {
            case 1:
                {
                this.state = 1829;
                this.identifier();
                this.state = 1830;
                this.match(TrinoParser.RDOUBLEARROW_);
                }
                break;
            }
            this.state = 1837;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 236, this.context) ) {
            case 1:
                {
                this.state = 1834;
                this.tableArgument();
                }
                break;
            case 2:
                {
                this.state = 1835;
                this.descriptorArgument();
                }
                break;
            case 3:
                {
                this.state = 1836;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgument(): TableArgumentContext {
        let localContext = new TableArgumentContext(this.context, this.state);
        this.enterRule(localContext, 104, TrinoParser.RULE_tableArgument);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1839;
            this.tableArgumentRelation();
            this.state = 1857;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 1840;
                this.match(TrinoParser.PARTITION_);
                this.state = 1841;
                this.match(TrinoParser.BY_);
                this.state = 1855;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 239, this.context) ) {
                case 1:
                    {
                    this.state = 1842;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 1851;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                        {
                        this.state = 1843;
                        this.expression();
                        this.state = 1848;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 312) {
                            {
                            {
                            this.state = 1844;
                            this.match(TrinoParser.COMMA_);
                            this.state = 1845;
                            this.expression();
                            }
                            }
                            this.state = 1850;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 1853;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                case 2:
                    {
                    this.state = 1854;
                    this.expression();
                    }
                    break;
                }
                }
            }

            this.state = 1865;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.PRUNE_:
                {
                this.state = 1859;
                this.match(TrinoParser.PRUNE_);
                this.state = 1860;
                this.match(TrinoParser.WHEN_);
                this.state = 1861;
                this.match(TrinoParser.EMPTY_);
                }
                break;
            case TrinoParser.KEEP_:
                {
                this.state = 1862;
                this.match(TrinoParser.KEEP_);
                this.state = 1863;
                this.match(TrinoParser.WHEN_);
                this.state = 1864;
                this.match(TrinoParser.EMPTY_);
                }
                break;
            case TrinoParser.COPARTITION_:
            case TrinoParser.ORDER_:
            case TrinoParser.COMMA_:
            case TrinoParser.RPAREN_:
                break;
            default:
                break;
            }
            this.state = 1883;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 178) {
                {
                this.state = 1867;
                this.match(TrinoParser.ORDER_);
                this.state = 1868;
                this.match(TrinoParser.BY_);
                this.state = 1881;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 243, this.context) ) {
                case 1:
                    {
                    this.state = 1869;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 1870;
                    this.sortItem();
                    this.state = 1875;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1871;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1872;
                        this.sortItem();
                        }
                        }
                        this.state = 1877;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 1878;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                case 2:
                    {
                    this.state = 1880;
                    this.sortItem();
                    }
                    break;
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgumentRelation(): TableArgumentRelationContext {
        let localContext = new TableArgumentRelationContext(this.context, this.state);
        this.enterRule(localContext, 106, TrinoParser.RULE_tableArgumentRelation);
        let _la: number;
        try {
            this.state = 1911;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 251, this.context) ) {
            case 1:
                localContext = new TableArgumentTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1885;
                this.match(TrinoParser.TABLE_);
                this.state = 1886;
                this.match(TrinoParser.LPAREN_);
                this.state = 1887;
                this.tableIdentifier();
                this.state = 1888;
                this.match(TrinoParser.RPAREN_);
                this.state = 1896;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
                case 1:
                    {
                    this.state = 1890;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 11) {
                        {
                        this.state = 1889;
                        this.match(TrinoParser.AS_);
                        }
                    }

                    this.state = 1892;
                    this.aliasIdentifier();
                    this.state = 1894;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 313) {
                        {
                        this.state = 1893;
                        this.columnAliases();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new TableArgumentQueryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1898;
                this.match(TrinoParser.TABLE_);
                this.state = 1899;
                this.match(TrinoParser.LPAREN_);
                this.state = 1900;
                this.query();
                this.state = 1901;
                this.match(TrinoParser.RPAREN_);
                this.state = 1909;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 250, this.context) ) {
                case 1:
                    {
                    this.state = 1903;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 11) {
                        {
                        this.state = 1902;
                        this.match(TrinoParser.AS_);
                        }
                    }

                    this.state = 1905;
                    this.aliasIdentifier();
                    this.state = 1907;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 313) {
                        {
                        this.state = 1906;
                        this.columnAliases();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descriptorArgument(): DescriptorArgumentContext {
        let localContext = new DescriptorArgumentContext(this.context, this.state);
        this.enterRule(localContext, 108, TrinoParser.RULE_descriptorArgument);
        let _la: number;
        try {
            this.state = 1931;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.DESCRIPTOR_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1913;
                this.match(TrinoParser.DESCRIPTOR_);
                this.state = 1914;
                this.match(TrinoParser.LPAREN_);
                this.state = 1915;
                this.descriptorField();
                this.state = 1920;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1916;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1917;
                    this.descriptorField();
                    }
                    }
                    this.state = 1922;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1923;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case TrinoParser.CAST_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1925;
                this.match(TrinoParser.CAST_);
                this.state = 1926;
                this.match(TrinoParser.LPAREN_);
                this.state = 1927;
                this.match(TrinoParser.NULL_);
                this.state = 1928;
                this.match(TrinoParser.AS_);
                this.state = 1929;
                this.match(TrinoParser.DESCRIPTOR_);
                this.state = 1930;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descriptorField(): DescriptorFieldContext {
        let localContext = new DescriptorFieldContext(this.context, this.state);
        this.enterRule(localContext, 110, TrinoParser.RULE_descriptorField);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1933;
            this.identifier();
            this.state = 1935;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                {
                this.state = 1934;
                this.type_(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copartitionTables(): CopartitionTablesContext {
        let localContext = new CopartitionTablesContext(this.context, this.state);
        this.enterRule(localContext, 112, TrinoParser.RULE_copartitionTables);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1937;
            this.match(TrinoParser.LPAREN_);
            this.state = 1938;
            this.qualifiedName();
            this.state = 1939;
            this.match(TrinoParser.COMMA_);
            this.state = 1940;
            this.qualifiedName();
            this.state = 1945;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1941;
                this.match(TrinoParser.COMMA_);
                this.state = 1942;
                this.qualifiedName();
                }
                }
                this.state = 1947;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1948;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 114, TrinoParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1950;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 116;
        this.enterRecursionRule(localContext, 116, TrinoParser.RULE_booleanExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1959;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CASE_:
            case TrinoParser.CAST_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.CURRENT_CATALOG_:
            case TrinoParser.CURRENT_DATE_:
            case TrinoParser.CURRENT_PATH_:
            case TrinoParser.CURRENT_SCHEMA_:
            case TrinoParser.CURRENT_TIME_:
            case TrinoParser.CURRENT_TIMESTAMP_:
            case TrinoParser.CURRENT_USER_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXISTS_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.EXTRACT_:
            case TrinoParser.FALSE_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPING_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.JSON_ARRAY_:
            case TrinoParser.JSON_EXISTS_:
            case TrinoParser.JSON_OBJECT_:
            case TrinoParser.JSON_QUERY_:
            case TrinoParser.JSON_VALUE_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LISTAGG_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOCALTIME_:
            case TrinoParser.LOCALTIMESTAMP_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NORMALIZE_:
            case TrinoParser.NULL_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRIM_:
            case TrinoParser.TRUE_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
            case TrinoParser.PLUS_:
            case TrinoParser.MINUS_:
            case TrinoParser.QUESTION_MARK_:
            case TrinoParser.LPAREN_:
            case TrinoParser.STRING_:
            case TrinoParser.UNICODE_STRING_:
            case TrinoParser.BINARY_LITERAL_:
            case TrinoParser.INTEGER_VALUE_:
            case TrinoParser.DECIMAL_VALUE_:
            case TrinoParser.DOUBLE_VALUE_:
            case TrinoParser.IDENTIFIER_:
            case TrinoParser.DIGIT_IDENTIFIER_:
            case TrinoParser.QUOTED_IDENTIFIER_:
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                {
                localContext = new PredicatedContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 1953;
                this.valueExpression(0);
                this.state = 1955;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
                case 1:
                    {
                    this.state = 1954;
                    this.predicate_();
                    }
                    break;
                }
                }
                break;
            case TrinoParser.NOT_:
                {
                localContext = new LogicalNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1957;
                this.match(TrinoParser.NOT_);
                this.state = 1958;
                this.booleanExpression(3);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1969;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 259, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1967;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
                    case 1:
                        {
                        localContext = new AndContext(new BooleanExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_booleanExpression);
                        this.state = 1961;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 1962;
                        this.match(TrinoParser.AND_);
                        this.state = 1963;
                        this.booleanExpression(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new OrContext(new BooleanExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_booleanExpression);
                        this.state = 1964;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 1965;
                        this.match(TrinoParser.OR_);
                        this.state = 1966;
                        this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 1971;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 259, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate_(): Predicate_Context {
        let localContext = new Predicate_Context(this.context, this.state);
        this.enterRule(localContext, 118, TrinoParser.RULE_predicate_);
        let _la: number;
        try {
            this.state = 2033;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 268, this.context) ) {
            case 1:
                localContext = new ComparisonContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1972;
                this.comparisonOperator();
                this.state = 1973;
                (localContext as ComparisonContext)._right = this.valueExpression(0);
                }
                break;
            case 2:
                localContext = new QuantifiedComparisonContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1975;
                this.comparisonOperator();
                this.state = 1976;
                this.comparisonQuantifier();
                this.state = 1977;
                this.match(TrinoParser.LPAREN_);
                this.state = 1978;
                this.query();
                this.state = 1979;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 3:
                localContext = new BetweenContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1982;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 1981;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 1984;
                this.match(TrinoParser.BETWEEN_);
                this.state = 1985;
                (localContext as BetweenContext)._lower = this.valueExpression(0);
                this.state = 1986;
                this.match(TrinoParser.AND_);
                this.state = 1987;
                (localContext as BetweenContext)._upper = this.valueExpression(0);
                }
                break;
            case 4:
                localContext = new InListContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1990;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 1989;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 1992;
                this.match(TrinoParser.IN_);
                this.state = 1993;
                this.match(TrinoParser.LPAREN_);
                this.state = 1994;
                this.expression();
                this.state = 1999;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1995;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1996;
                    this.expression();
                    }
                    }
                    this.state = 2001;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2002;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 5:
                localContext = new InSubqueryContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2005;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 2004;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 2007;
                this.match(TrinoParser.IN_);
                this.state = 2008;
                this.match(TrinoParser.LPAREN_);
                this.state = 2009;
                this.query();
                this.state = 2010;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 6:
                localContext = new LikeContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2013;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 2012;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 2015;
                this.match(TrinoParser.LIKE_);
                this.state = 2016;
                (localContext as LikeContext)._pattern = this.valueExpression(0);
                this.state = 2019;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 265, this.context) ) {
                case 1:
                    {
                    this.state = 2017;
                    this.match(TrinoParser.ESCAPE_);
                    this.state = 2018;
                    (localContext as LikeContext)._escape = this.valueExpression(0);
                    }
                    break;
                }
                }
                break;
            case 7:
                localContext = new NullPredicateContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2021;
                this.match(TrinoParser.IS_);
                this.state = 2023;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 2022;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 2025;
                this.match(TrinoParser.NULL_);
                }
                break;
            case 8:
                localContext = new DistinctFromContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2026;
                this.match(TrinoParser.IS_);
                this.state = 2028;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 2027;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 2030;
                this.match(TrinoParser.DISTINCT_);
                this.state = 2031;
                this.match(TrinoParser.FROM_);
                this.state = 2032;
                (localContext as DistinctFromContext)._right = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 120;
        this.enterRecursionRule(localContext, 120, TrinoParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2039;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 269, this.context) ) {
            case 1:
                {
                localContext = new ValueExpressionDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2036;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                localContext = new ArithmeticUnaryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2037;
                (localContext as ArithmeticUnaryContext)._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 302 || _la === 303)) {
                    (localContext as ArithmeticUnaryContext)._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2038;
                this.valueExpression(4);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2055;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 271, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2053;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 270, this.context) ) {
                    case 1:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_valueExpression);
                        this.state = 2041;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 2042;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & 7) !== 0))) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2043;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_valueExpression);
                        this.state = 2044;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2045;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 302 || _la === 303)) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2046;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ConcatenationContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ConcatenationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_valueExpression);
                        this.state = 2047;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2048;
                        this.match(TrinoParser.CONCAT_);
                        this.state = 2049;
                        (localContext as ConcatenationContext)._right = this.valueExpression(2);
                        }
                        break;
                    case 4:
                        {
                        localContext = new AtTimeZoneContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_valueExpression);
                        this.state = 2050;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 2051;
                        this.match(TrinoParser.AT_);
                        this.state = 2052;
                        this.timeZoneSpecifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 2057;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 271, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 122;
        this.enterRecursionRule(localContext, 122, TrinoParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2511;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 335, this.context) ) {
            case 1:
                {
                localContext = new NullLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2059;
                this.match(TrinoParser.NULL_);
                }
                break;
            case 2:
                {
                localContext = new IntervalLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2060;
                this.interval();
                }
                break;
            case 3:
                {
                localContext = new TypeConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2061;
                this.identifier();
                this.state = 2062;
                this.string_();
                }
                break;
            case 4:
                {
                localContext = new TypeConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2064;
                this.match(TrinoParser.DOUBLE_);
                this.state = 2065;
                this.match(TrinoParser.PRECISION_);
                this.state = 2066;
                this.string_();
                }
                break;
            case 5:
                {
                localContext = new NumericLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2067;
                this.number_();
                }
                break;
            case 6:
                {
                localContext = new BooleanLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2068;
                this.booleanValue();
                }
                break;
            case 7:
                {
                localContext = new StringLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2069;
                this.string_();
                }
                break;
            case 8:
                {
                localContext = new BinaryLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2070;
                this.match(TrinoParser.BINARY_LITERAL_);
                }
                break;
            case 9:
                {
                localContext = new ParameterContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2071;
                this.match(TrinoParser.QUESTION_MARK_);
                }
                break;
            case 10:
                {
                localContext = new PositionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2072;
                this.match(TrinoParser.POSITION_);
                this.state = 2073;
                this.match(TrinoParser.LPAREN_);
                this.state = 2074;
                this.valueExpression(0);
                this.state = 2075;
                this.match(TrinoParser.IN_);
                this.state = 2076;
                this.valueExpression(0);
                this.state = 2077;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 11:
                {
                localContext = new RowConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2079;
                this.match(TrinoParser.LPAREN_);
                this.state = 2080;
                this.expression();
                this.state = 2083;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2081;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2082;
                    this.expression();
                    }
                    }
                    this.state = 2085;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 312);
                this.state = 2087;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 12:
                {
                localContext = new RowConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2089;
                this.match(TrinoParser.ROW_);
                this.state = 2090;
                this.match(TrinoParser.LPAREN_);
                this.state = 2091;
                this.expression();
                this.state = 2096;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2092;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2093;
                    this.expression();
                    }
                    }
                    this.state = 2098;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2099;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 13:
                {
                localContext = new ListaggContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2101;
                (localContext as ListaggContext)._name = this.match(TrinoParser.LISTAGG_);
                this.state = 2102;
                this.match(TrinoParser.LPAREN_);
                this.state = 2104;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 274, this.context) ) {
                case 1:
                    {
                    this.state = 2103;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2106;
                this.expression();
                this.state = 2109;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312) {
                    {
                    this.state = 2107;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2108;
                    this.string_();
                    }
                }

                this.state = 2114;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 173) {
                    {
                    this.state = 2111;
                    this.match(TrinoParser.ON_);
                    this.state = 2112;
                    this.match(TrinoParser.OVERFLOW_);
                    this.state = 2113;
                    this.listAggOverflowBehavior();
                    }
                }

                this.state = 2116;
                this.match(TrinoParser.RPAREN_);
                {
                this.state = 2117;
                this.match(TrinoParser.WITHIN_);
                this.state = 2118;
                this.match(TrinoParser.GROUP_);
                this.state = 2119;
                this.match(TrinoParser.LPAREN_);
                this.state = 2120;
                this.match(TrinoParser.ORDER_);
                this.state = 2121;
                this.match(TrinoParser.BY_);
                this.state = 2122;
                this.sortItem();
                this.state = 2127;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2123;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2124;
                    this.sortItem();
                    }
                    }
                    this.state = 2129;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2130;
                this.match(TrinoParser.RPAREN_);
                }
                this.state = 2133;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 278, this.context) ) {
                case 1:
                    {
                    this.state = 2132;
                    this.filter();
                    }
                    break;
                }
                }
                break;
            case 14:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2136;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 279, this.context) ) {
                case 1:
                    {
                    this.state = 2135;
                    this.processingMode();
                    }
                    break;
                }
                this.state = 2138;
                this.qualifiedName();
                this.state = 2139;
                this.match(TrinoParser.LPAREN_);
                this.state = 2143;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                    {
                    this.state = 2140;
                    (localContext as FunctionCallContext)._label = this.identifier();
                    this.state = 2141;
                    this.match(TrinoParser.DOT_);
                    }
                }

                this.state = 2145;
                this.match(TrinoParser.ASTERISK_);
                this.state = 2146;
                this.match(TrinoParser.RPAREN_);
                this.state = 2148;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 281, this.context) ) {
                case 1:
                    {
                    this.state = 2147;
                    this.filter();
                    }
                    break;
                }
                this.state = 2151;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 282, this.context) ) {
                case 1:
                    {
                    this.state = 2150;
                    this.over();
                    }
                    break;
                }
                }
                break;
            case 15:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2154;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 283, this.context) ) {
                case 1:
                    {
                    this.state = 2153;
                    this.processingMode();
                    }
                    break;
                }
                this.state = 2156;
                this.qualifiedName();
                this.state = 2157;
                this.match(TrinoParser.LPAREN_);
                this.state = 2169;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4143445901) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                    {
                    this.state = 2159;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 284, this.context) ) {
                    case 1:
                        {
                        this.state = 2158;
                        this.setQuantifier();
                        }
                        break;
                    }
                    this.state = 2161;
                    this.expression();
                    this.state = 2166;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2162;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2163;
                        this.expression();
                        }
                        }
                        this.state = 2168;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2181;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178) {
                    {
                    this.state = 2171;
                    this.match(TrinoParser.ORDER_);
                    this.state = 2172;
                    this.match(TrinoParser.BY_);
                    this.state = 2173;
                    this.sortItem();
                    this.state = 2178;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2174;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2175;
                        this.sortItem();
                        }
                        }
                        this.state = 2180;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2183;
                this.match(TrinoParser.RPAREN_);
                this.state = 2185;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 289, this.context) ) {
                case 1:
                    {
                    this.state = 2184;
                    this.filter();
                    }
                    break;
                }
                this.state = 2191;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
                case 1:
                    {
                    this.state = 2188;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 103 || _la === 211) {
                        {
                        this.state = 2187;
                        this.nullTreatment();
                        }
                    }

                    this.state = 2190;
                    this.over();
                    }
                    break;
                }
                }
                break;
            case 16:
                {
                localContext = new MeasureContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2193;
                this.identifier();
                this.state = 2194;
                this.over();
                }
                break;
            case 17:
                {
                localContext = new LambdaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2196;
                this.identifier();
                this.state = 2197;
                this.match(TrinoParser.RARROW_);
                this.state = 2198;
                this.expression();
                }
                break;
            case 18:
                {
                localContext = new LambdaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2200;
                this.match(TrinoParser.LPAREN_);
                this.state = 2209;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                    {
                    this.state = 2201;
                    this.identifier();
                    this.state = 2206;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2202;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2203;
                        this.identifier();
                        }
                        }
                        this.state = 2208;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2211;
                this.match(TrinoParser.RPAREN_);
                this.state = 2212;
                this.match(TrinoParser.RARROW_);
                this.state = 2213;
                this.expression();
                }
                break;
            case 19:
                {
                localContext = new SubqueryExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2214;
                this.match(TrinoParser.LPAREN_);
                this.state = 2215;
                this.query();
                this.state = 2216;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 20:
                {
                localContext = new ExistsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2218;
                this.match(TrinoParser.EXISTS_);
                this.state = 2219;
                this.match(TrinoParser.LPAREN_);
                this.state = 2220;
                this.query();
                this.state = 2221;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 21:
                {
                localContext = new SimpleCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2223;
                this.match(TrinoParser.CASE_);
                this.state = 2224;
                (localContext as SimpleCaseContext)._operand = this.expression();
                this.state = 2226;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2225;
                    this.whenClause();
                    }
                    }
                    this.state = 2228;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 284);
                this.state = 2232;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 2230;
                    this.match(TrinoParser.ELSE_);
                    this.state = 2231;
                    (localContext as SimpleCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 2234;
                this.match(TrinoParser.END_);
                }
                break;
            case 22:
                {
                localContext = new SearchedCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2236;
                this.match(TrinoParser.CASE_);
                this.state = 2238;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2237;
                    this.whenClause();
                    }
                    }
                    this.state = 2240;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 284);
                this.state = 2244;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 2242;
                    this.match(TrinoParser.ELSE_);
                    this.state = 2243;
                    (localContext as SearchedCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 2246;
                this.match(TrinoParser.END_);
                }
                break;
            case 23:
                {
                localContext = new CastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2248;
                this.match(TrinoParser.CAST_);
                this.state = 2249;
                this.match(TrinoParser.LPAREN_);
                this.state = 2250;
                this.expression();
                this.state = 2251;
                this.match(TrinoParser.AS_);
                this.state = 2252;
                this.type_(0);
                this.state = 2253;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 24:
                {
                localContext = new CastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2255;
                this.match(TrinoParser.TRY_CAST_);
                this.state = 2256;
                this.match(TrinoParser.LPAREN_);
                this.state = 2257;
                this.expression();
                this.state = 2258;
                this.match(TrinoParser.AS_);
                this.state = 2259;
                this.type_(0);
                this.state = 2260;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 25:
                {
                localContext = new ArrayConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2262;
                this.match(TrinoParser.ARRAY_);
                this.state = 2263;
                this.match(TrinoParser.LSQUARE_);
                this.state = 2272;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                    {
                    this.state = 2264;
                    this.expression();
                    this.state = 2269;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2265;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2266;
                        this.expression();
                        }
                        }
                        this.state = 2271;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2274;
                this.match(TrinoParser.RSQUARE_);
                }
                break;
            case 26:
                {
                localContext = new ColumnContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2275;
                this.columnIdentifier();
                }
                break;
            case 27:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2276;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(TrinoParser.CURRENT_DATE_);
                }
                break;
            case 28:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2277;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(TrinoParser.CURRENT_TIME_);
                this.state = 2281;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 300, this.context) ) {
                case 1:
                    {
                    this.state = 2278;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2279;
                    (localContext as SpecialDateTimeFunctionContext)._precision = this.match(TrinoParser.INTEGER_VALUE_);
                    this.state = 2280;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                }
                break;
            case 29:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2283;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(TrinoParser.CURRENT_TIMESTAMP_);
                this.state = 2287;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 301, this.context) ) {
                case 1:
                    {
                    this.state = 2284;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2285;
                    (localContext as SpecialDateTimeFunctionContext)._precision = this.match(TrinoParser.INTEGER_VALUE_);
                    this.state = 2286;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                }
                break;
            case 30:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2289;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(TrinoParser.LOCALTIME_);
                this.state = 2293;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 302, this.context) ) {
                case 1:
                    {
                    this.state = 2290;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2291;
                    (localContext as SpecialDateTimeFunctionContext)._precision = this.match(TrinoParser.INTEGER_VALUE_);
                    this.state = 2292;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                }
                break;
            case 31:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2295;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(TrinoParser.LOCALTIMESTAMP_);
                this.state = 2299;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 303, this.context) ) {
                case 1:
                    {
                    this.state = 2296;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2297;
                    (localContext as SpecialDateTimeFunctionContext)._precision = this.match(TrinoParser.INTEGER_VALUE_);
                    this.state = 2298;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                }
                break;
            case 32:
                {
                localContext = new CurrentUserContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2301;
                (localContext as CurrentUserContext)._name = this.match(TrinoParser.CURRENT_USER_);
                }
                break;
            case 33:
                {
                localContext = new CurrentCatalogContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2302;
                (localContext as CurrentCatalogContext)._name = this.match(TrinoParser.CURRENT_CATALOG_);
                }
                break;
            case 34:
                {
                localContext = new CurrentSchemaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2303;
                (localContext as CurrentSchemaContext)._name = this.match(TrinoParser.CURRENT_SCHEMA_);
                }
                break;
            case 35:
                {
                localContext = new CurrentPathContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2304;
                (localContext as CurrentPathContext)._name = this.match(TrinoParser.CURRENT_PATH_);
                }
                break;
            case 36:
                {
                localContext = new TrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2305;
                this.match(TrinoParser.TRIM_);
                this.state = 2306;
                this.match(TrinoParser.LPAREN_);
                this.state = 2314;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 306, this.context) ) {
                case 1:
                    {
                    this.state = 2308;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 304, this.context) ) {
                    case 1:
                        {
                        this.state = 2307;
                        this.trimsSpecification();
                        }
                        break;
                    }
                    this.state = 2311;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517279) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                        {
                        this.state = 2310;
                        (localContext as TrimContext)._trimChar = this.valueExpression(0);
                        }
                    }

                    this.state = 2313;
                    this.match(TrinoParser.FROM_);
                    }
                    break;
                }
                this.state = 2316;
                (localContext as TrimContext)._trimSource = this.valueExpression(0);
                this.state = 2317;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 37:
                {
                localContext = new TrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2319;
                this.match(TrinoParser.TRIM_);
                this.state = 2320;
                this.match(TrinoParser.LPAREN_);
                this.state = 2321;
                (localContext as TrimContext)._trimSource = this.valueExpression(0);
                this.state = 2322;
                this.match(TrinoParser.COMMA_);
                this.state = 2323;
                (localContext as TrimContext)._trimChar = this.valueExpression(0);
                this.state = 2324;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 38:
                {
                localContext = new SubstringContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2326;
                this.match(TrinoParser.SUBSTRING_);
                this.state = 2327;
                this.match(TrinoParser.LPAREN_);
                this.state = 2328;
                this.valueExpression(0);
                this.state = 2329;
                this.match(TrinoParser.FROM_);
                this.state = 2330;
                this.valueExpression(0);
                this.state = 2333;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 86) {
                    {
                    this.state = 2331;
                    this.match(TrinoParser.FOR_);
                    this.state = 2332;
                    this.valueExpression(0);
                    }
                }

                this.state = 2335;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 39:
                {
                localContext = new NormalizeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2337;
                this.match(TrinoParser.NORMALIZE_);
                this.state = 2338;
                this.match(TrinoParser.LPAREN_);
                this.state = 2339;
                this.valueExpression(0);
                this.state = 2342;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312) {
                    {
                    this.state = 2340;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2341;
                    this.normalForm();
                    }
                }

                this.state = 2344;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 40:
                {
                localContext = new ExtractContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2346;
                this.match(TrinoParser.EXTRACT_);
                this.state = 2347;
                this.match(TrinoParser.LPAREN_);
                this.state = 2348;
                this.identifier();
                this.state = 2349;
                this.match(TrinoParser.FROM_);
                this.state = 2350;
                this.valueExpression(0);
                this.state = 2351;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 41:
                {
                localContext = new ParenthesizedExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2353;
                this.match(TrinoParser.LPAREN_);
                this.state = 2354;
                this.expression();
                this.state = 2355;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 42:
                {
                localContext = new GroupingOperationContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2357;
                this.match(TrinoParser.GROUPING_);
                this.state = 2358;
                this.match(TrinoParser.LPAREN_);
                this.state = 2367;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                    {
                    this.state = 2359;
                    this.qualifiedName();
                    this.state = 2364;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2360;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2361;
                        this.qualifiedName();
                        }
                        }
                        this.state = 2366;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2369;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 43:
                {
                localContext = new JsonExistsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2370;
                this.match(TrinoParser.JSON_EXISTS_);
                this.state = 2371;
                this.match(TrinoParser.LPAREN_);
                this.state = 2372;
                this.jsonPathInvocation();
                this.state = 2377;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 72 || _la === 80 || _la === 257 || _la === 267) {
                    {
                    this.state = 2373;
                    this.jsonExistsErrorBehavior();
                    this.state = 2374;
                    this.match(TrinoParser.ON_);
                    this.state = 2375;
                    this.match(TrinoParser.ERROR_);
                    }
                }

                this.state = 2379;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 44:
                {
                localContext = new JsonValueContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2381;
                this.match(TrinoParser.JSON_VALUE_);
                this.state = 2382;
                this.match(TrinoParser.LPAREN_);
                this.state = 2383;
                this.jsonPathInvocation();
                this.state = 2386;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 214) {
                    {
                    this.state = 2384;
                    this.match(TrinoParser.RETURNING_);
                    this.state = 2385;
                    this.type_(0);
                    }
                }

                this.state = 2392;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 313, this.context) ) {
                case 1:
                    {
                    this.state = 2388;
                    (localContext as JsonValueContext)._emptyBehavior = this.jsonValueBehavior();
                    this.state = 2389;
                    this.match(TrinoParser.ON_);
                    this.state = 2390;
                    this.match(TrinoParser.EMPTY_);
                    }
                    break;
                }
                this.state = 2398;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53 || _la === 72 || _la === 166) {
                    {
                    this.state = 2394;
                    (localContext as JsonValueContext)._errorBehavior = this.jsonValueBehavior();
                    this.state = 2395;
                    this.match(TrinoParser.ON_);
                    this.state = 2396;
                    this.match(TrinoParser.ERROR_);
                    }
                }

                this.state = 2400;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 45:
                {
                localContext = new JsonQueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2402;
                this.match(TrinoParser.JSON_QUERY_);
                this.state = 2403;
                this.match(TrinoParser.LPAREN_);
                this.state = 2404;
                this.jsonPathInvocation();
                this.state = 2411;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 214) {
                    {
                    this.state = 2405;
                    this.match(TrinoParser.RETURNING_);
                    this.state = 2406;
                    this.type_(0);
                    this.state = 2409;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 87) {
                        {
                        this.state = 2407;
                        this.match(TrinoParser.FORMAT_);
                        this.state = 2408;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2416;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288 || _la === 290) {
                    {
                    this.state = 2413;
                    this.jsonQueryWrapperBehavior();
                    this.state = 2414;
                    this.match(TrinoParser.WRAPPER_);
                    }
                }

                this.state = 2425;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 127 || _la === 172) {
                    {
                    this.state = 2418;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 127 || _la === 172)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2419;
                    this.match(TrinoParser.QUOTES_);
                    this.state = 2423;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 173) {
                        {
                        this.state = 2420;
                        this.match(TrinoParser.ON_);
                        this.state = 2421;
                        this.match(TrinoParser.SCALAR_);
                        this.state = 2422;
                        this.match(TrinoParser.TEXT_STRING_);
                        }
                    }

                    }
                }

                this.state = 2431;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 320, this.context) ) {
                case 1:
                    {
                    this.state = 2427;
                    (localContext as JsonQueryContext)._emptyBehavior = this.jsonQueryBehavior();
                    this.state = 2428;
                    this.match(TrinoParser.ON_);
                    this.state = 2429;
                    this.match(TrinoParser.EMPTY_);
                    }
                    break;
                }
                this.state = 2437;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68 || _la === 72 || _la === 166) {
                    {
                    this.state = 2433;
                    (localContext as JsonQueryContext)._errorBehavior = this.jsonQueryBehavior();
                    this.state = 2434;
                    this.match(TrinoParser.ON_);
                    this.state = 2435;
                    this.match(TrinoParser.ERROR_);
                    }
                }

                this.state = 2439;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 46:
                {
                localContext = new JsonObjectContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2441;
                this.match(TrinoParser.JSON_OBJECT_);
                this.state = 2442;
                this.match(TrinoParser.LPAREN_);
                this.state = 2471;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 327, this.context) ) {
                case 1:
                    {
                    this.state = 2443;
                    this.jsonObjectMember();
                    this.state = 2448;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2444;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2445;
                        this.jsonObjectMember();
                        }
                        }
                        this.state = 2450;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2457;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoParser.NULL_:
                        {
                        this.state = 2451;
                        this.match(TrinoParser.NULL_);
                        this.state = 2452;
                        this.match(TrinoParser.ON_);
                        this.state = 2453;
                        this.match(TrinoParser.NULL_);
                        }
                        break;
                    case TrinoParser.ABSENT_:
                        {
                        this.state = 2454;
                        this.match(TrinoParser.ABSENT_);
                        this.state = 2455;
                        this.match(TrinoParser.ON_);
                        this.state = 2456;
                        this.match(TrinoParser.NULL_);
                        }
                        break;
                    case TrinoParser.RETURNING_:
                    case TrinoParser.WITH_:
                    case TrinoParser.WITHOUT_:
                    case TrinoParser.RPAREN_:
                        break;
                    default:
                        break;
                    }
                    this.state = 2469;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoParser.WITH_:
                        {
                        this.state = 2459;
                        this.match(TrinoParser.WITH_);
                        this.state = 2460;
                        this.match(TrinoParser.UNIQUE_);
                        this.state = 2462;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 129) {
                            {
                            this.state = 2461;
                            this.match(TrinoParser.KEYS_);
                            }
                        }

                        }
                        break;
                    case TrinoParser.WITHOUT_:
                        {
                        this.state = 2464;
                        this.match(TrinoParser.WITHOUT_);
                        this.state = 2465;
                        this.match(TrinoParser.UNIQUE_);
                        this.state = 2467;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 129) {
                            {
                            this.state = 2466;
                            this.match(TrinoParser.KEYS_);
                            }
                        }

                        }
                        break;
                    case TrinoParser.RETURNING_:
                    case TrinoParser.RPAREN_:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                }
                this.state = 2479;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 214) {
                    {
                    this.state = 2473;
                    this.match(TrinoParser.RETURNING_);
                    this.state = 2474;
                    this.type_(0);
                    this.state = 2477;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 87) {
                        {
                        this.state = 2475;
                        this.match(TrinoParser.FORMAT_);
                        this.state = 2476;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2481;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 47:
                {
                localContext = new JsonArrayContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2482;
                this.match(TrinoParser.JSON_ARRAY_);
                this.state = 2483;
                this.match(TrinoParser.LPAREN_);
                this.state = 2500;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 332, this.context) ) {
                case 1:
                    {
                    this.state = 2484;
                    this.jsonValueExpression();
                    this.state = 2489;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2485;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2486;
                        this.jsonValueExpression();
                        }
                        }
                        this.state = 2491;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2498;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoParser.NULL_:
                        {
                        this.state = 2492;
                        this.match(TrinoParser.NULL_);
                        this.state = 2493;
                        this.match(TrinoParser.ON_);
                        this.state = 2494;
                        this.match(TrinoParser.NULL_);
                        }
                        break;
                    case TrinoParser.ABSENT_:
                        {
                        this.state = 2495;
                        this.match(TrinoParser.ABSENT_);
                        this.state = 2496;
                        this.match(TrinoParser.ON_);
                        this.state = 2497;
                        this.match(TrinoParser.NULL_);
                        }
                        break;
                    case TrinoParser.RETURNING_:
                    case TrinoParser.RPAREN_:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                }
                this.state = 2508;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 214) {
                    {
                    this.state = 2502;
                    this.match(TrinoParser.RETURNING_);
                    this.state = 2503;
                    this.type_(0);
                    this.state = 2506;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 87) {
                        {
                        this.state = 2504;
                        this.match(TrinoParser.FORMAT_);
                        this.state = 2505;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2510;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2523;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 337, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2521;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 336, this.context) ) {
                    case 1:
                        {
                        localContext = new SubscriptContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as SubscriptContext)._value = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_primaryExpression);
                        this.state = 2513;
                        if (!(this.precpred(this.context, 24))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 24)");
                        }
                        this.state = 2514;
                        this.match(TrinoParser.LSQUARE_);
                        this.state = 2515;
                        (localContext as SubscriptContext)._index = this.valueExpression(0);
                        this.state = 2516;
                        this.match(TrinoParser.RSQUARE_);
                        }
                        break;
                    case 2:
                        {
                        localContext = new DereferenceContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as DereferenceContext)._base_ = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_primaryExpression);
                        this.state = 2518;
                        if (!(this.precpred(this.context, 22))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 22)");
                        }
                        this.state = 2519;
                        this.match(TrinoParser.DOT_);
                        this.state = 2520;
                        (localContext as DereferenceContext)._fieldName = this.identifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 2525;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 337, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        let localContext = new JsonPathInvocationContext(this.context, this.state);
        this.enterRule(localContext, 124, TrinoParser.RULE_jsonPathInvocation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2526;
            this.jsonValueExpression();
            this.state = 2527;
            this.match(TrinoParser.COMMA_);
            this.state = 2528;
            localContext._path = this.string_();
            this.state = 2538;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 186) {
                {
                this.state = 2529;
                this.match(TrinoParser.PASSING_);
                this.state = 2530;
                this.jsonArgument();
                this.state = 2535;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2531;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2532;
                    this.jsonArgument();
                    }
                    }
                    this.state = 2537;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        let localContext = new JsonValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 126, TrinoParser.RULE_jsonValueExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2540;
            this.expression();
            this.state = 2543;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 2541;
                this.match(TrinoParser.FORMAT_);
                this.state = 2542;
                this.jsonRepresentation();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonRepresentation(): JsonRepresentationContext {
        let localContext = new JsonRepresentationContext(this.context, this.state);
        this.enterRule(localContext, 128, TrinoParser.RULE_jsonRepresentation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2545;
            this.match(TrinoParser.JSON_);
            this.state = 2548;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 70) {
                {
                this.state = 2546;
                this.match(TrinoParser.ENCODING_);
                this.state = 2547;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 275)) & ~0x1F) === 0 && ((1 << (_la - 275)) & 7) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonArgument(): JsonArgumentContext {
        let localContext = new JsonArgumentContext(this.context, this.state);
        this.enterRule(localContext, 130, TrinoParser.RULE_jsonArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2550;
            this.jsonValueExpression();
            this.state = 2551;
            this.match(TrinoParser.AS_);
            this.state = 2552;
            this.aliasIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonExistsErrorBehavior(): JsonExistsErrorBehaviorContext {
        let localContext = new JsonExistsErrorBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 132, TrinoParser.RULE_jsonExistsErrorBehavior);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2554;
            _la = this.tokenStream.LA(1);
            if(!(_la === 72 || _la === 80 || _la === 257 || _la === 267)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonValueBehavior(): JsonValueBehaviorContext {
        let localContext = new JsonValueBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 134, TrinoParser.RULE_jsonValueBehavior);
        try {
            this.state = 2560;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ERROR_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2556;
                this.match(TrinoParser.ERROR_);
                }
                break;
            case TrinoParser.NULL_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2557;
                this.match(TrinoParser.NULL_);
                }
                break;
            case TrinoParser.DEFAULT_:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2558;
                this.match(TrinoParser.DEFAULT_);
                this.state = 2559;
                this.expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext {
        let localContext = new JsonQueryWrapperBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 136, TrinoParser.RULE_jsonQueryWrapperBehavior);
        let _la: number;
        try {
            this.state = 2573;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.WITHOUT_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2562;
                this.match(TrinoParser.WITHOUT_);
                this.state = 2564;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 10) {
                    {
                    this.state = 2563;
                    this.match(TrinoParser.ARRAY_);
                    }
                }

                }
                break;
            case TrinoParser.WITH_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2566;
                this.match(TrinoParser.WITH_);
                this.state = 2568;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 32 || _la === 264) {
                    {
                    this.state = 2567;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 32 || _la === 264)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2571;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 10) {
                    {
                    this.state = 2570;
                    this.match(TrinoParser.ARRAY_);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext {
        let localContext = new JsonQueryBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 138, TrinoParser.RULE_jsonQueryBehavior);
        let _la: number;
        try {
            this.state = 2579;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ERROR_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2575;
                this.match(TrinoParser.ERROR_);
                }
                break;
            case TrinoParser.NULL_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2576;
                this.match(TrinoParser.NULL_);
                }
                break;
            case TrinoParser.EMPTY_:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2577;
                this.match(TrinoParser.EMPTY_);
                this.state = 2578;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 169)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonObjectMember(): JsonObjectMemberContext {
        let localContext = new JsonObjectMemberContext(this.context, this.state);
        this.enterRule(localContext, 140, TrinoParser.RULE_jsonObjectMember);
        try {
            this.state = 2592;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 349, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2582;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 348, this.context) ) {
                case 1:
                    {
                    this.state = 2581;
                    this.match(TrinoParser.KEY_);
                    }
                    break;
                }
                this.state = 2584;
                this.expression();
                this.state = 2585;
                this.match(TrinoParser.VALUE_);
                this.state = 2586;
                this.jsonValueExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2588;
                this.expression();
                this.state = 2589;
                this.match(TrinoParser.COLON_);
                this.state = 2590;
                this.jsonValueExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public processingMode(): ProcessingModeContext {
        let localContext = new ProcessingModeContext(this.context, this.state);
        this.enterRule(localContext, 142, TrinoParser.RULE_processingMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2594;
            _la = this.tokenStream.LA(1);
            if(!(_la === 83 || _la === 224)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullTreatment(): NullTreatmentContext {
        let localContext = new NullTreatmentContext(this.context, this.state);
        this.enterRule(localContext, 144, TrinoParser.RULE_nullTreatment);
        try {
            this.state = 2600;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.IGNORE_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2596;
                this.match(TrinoParser.IGNORE_);
                this.state = 2597;
                this.match(TrinoParser.NULLS_);
                }
                break;
            case TrinoParser.RESPECT_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2598;
                this.match(TrinoParser.RESPECT_);
                this.state = 2599;
                this.match(TrinoParser.NULLS_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public string_(): String_Context {
        let localContext = new String_Context(this.context, this.state);
        this.enterRule(localContext, 146, TrinoParser.RULE_string_);
        try {
            this.state = 2608;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.STRING_:
                localContext = new BasicStringLiteralContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2602;
                this.match(TrinoParser.STRING_);
                }
                break;
            case TrinoParser.UNICODE_STRING_:
                localContext = new UnicodeStringLiteralContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2603;
                this.match(TrinoParser.UNICODE_STRING_);
                this.state = 2606;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 351, this.context) ) {
                case 1:
                    {
                    this.state = 2604;
                    this.match(TrinoParser.UESCAPE_);
                    this.state = 2605;
                    this.match(TrinoParser.STRING_);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeZoneSpecifier(): TimeZoneSpecifierContext {
        let localContext = new TimeZoneSpecifierContext(this.context, this.state);
        this.enterRule(localContext, 148, TrinoParser.RULE_timeZoneSpecifier);
        try {
            this.state = 2616;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 353, this.context) ) {
            case 1:
                localContext = new TimeZoneIntervalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2610;
                this.match(TrinoParser.TIME_);
                this.state = 2611;
                this.match(TrinoParser.ZONE_);
                this.state = 2612;
                this.interval();
                }
                break;
            case 2:
                localContext = new TimeZoneStringContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2613;
                this.match(TrinoParser.TIME_);
                this.state = 2614;
                this.match(TrinoParser.ZONE_);
                this.state = 2615;
                this.string_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 150, TrinoParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2618;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 296)) & ~0x1F) === 0 && ((1 << (_la - 296)) & 63) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonQuantifier(): ComparisonQuantifierContext {
        let localContext = new ComparisonQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 152, TrinoParser.RULE_comparisonQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2620;
            _la = this.tokenStream.LA(1);
            if(!(_la === 5 || _la === 9 || _la === 238)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValue(): BooleanValueContext {
        let localContext = new BooleanValueContext(this.context, this.state);
        this.enterRule(localContext, 154, TrinoParser.RULE_booleanValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2622;
            _la = this.tokenStream.LA(1);
            if(!(_la === 80 || _la === 257)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 156, TrinoParser.RULE_interval);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2624;
            this.match(TrinoParser.INTERVAL_);
            this.state = 2626;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 302 || _la === 303) {
                {
                this.state = 2625;
                localContext._sign = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 302 || _la === 303)) {
                    localContext._sign = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2628;
            this.string_();
            this.state = 2629;
            localContext._from_ = this.intervalField();
            this.state = 2632;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 355, this.context) ) {
            case 1:
                {
                this.state = 2630;
                this.match(TrinoParser.TO_);
                this.state = 2631;
                localContext._to = this.intervalField();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalField(): IntervalFieldContext {
        let localContext = new IntervalFieldContext(this.context, this.state);
        this.enterRule(localContext, 158, TrinoParser.RULE_intervalField);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2634;
            _la = this.tokenStream.LA(1);
            if(!(_la === 50 || _la === 101 || _la === 153 || _la === 154 || _la === 228 || _la === 294)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public normalForm(): NormalFormContext {
        let localContext = new NormalFormContext(this.context, this.state);
        this.enterRule(localContext, 160, TrinoParser.RULE_normalForm);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2636;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public type_(): TypeContext;
    public type_(_p: number): TypeContext;
    public type_(_p?: number): TypeContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new TypeContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 162;
        this.enterRecursionRule(localContext, 162, TrinoParser.RULE_type, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2729;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 366, this.context) ) {
            case 1:
                {
                localContext = new RowTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2639;
                this.match(TrinoParser.ROW_);
                this.state = 2640;
                this.match(TrinoParser.LPAREN_);
                this.state = 2641;
                this.rowField();
                this.state = 2646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2642;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2643;
                    this.rowField();
                    }
                    }
                    this.state = 2648;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2649;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 2:
                {
                localContext = new IntervalTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2651;
                this.match(TrinoParser.INTERVAL_);
                this.state = 2652;
                (localContext as IntervalTypeContext)._from_ = this.intervalField();
                this.state = 2655;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 357, this.context) ) {
                case 1:
                    {
                    this.state = 2653;
                    this.match(TrinoParser.TO_);
                    this.state = 2654;
                    (localContext as IntervalTypeContext)._to = this.intervalField();
                    }
                    break;
                }
                }
                break;
            case 3:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2657;
                (localContext as DateTimeTypeContext)._base_ = this.match(TrinoParser.TIMESTAMP_);
                this.state = 2662;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 358, this.context) ) {
                case 1:
                    {
                    this.state = 2658;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2659;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2660;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                this.state = 2667;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 359, this.context) ) {
                case 1:
                    {
                    this.state = 2664;
                    this.match(TrinoParser.WITHOUT_);
                    this.state = 2665;
                    this.match(TrinoParser.TIME_);
                    this.state = 2666;
                    this.match(TrinoParser.ZONE_);
                    }
                    break;
                }
                }
                break;
            case 4:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2669;
                (localContext as DateTimeTypeContext)._base_ = this.match(TrinoParser.TIMESTAMP_);
                this.state = 2674;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 2670;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2671;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2672;
                    this.match(TrinoParser.RPAREN_);
                    }
                }

                this.state = 2676;
                this.match(TrinoParser.WITH_);
                this.state = 2677;
                this.match(TrinoParser.TIME_);
                this.state = 2678;
                this.match(TrinoParser.ZONE_);
                }
                break;
            case 5:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2679;
                (localContext as DateTimeTypeContext)._base_ = this.match(TrinoParser.TIME_);
                this.state = 2684;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 361, this.context) ) {
                case 1:
                    {
                    this.state = 2680;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2681;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2682;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                this.state = 2689;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 362, this.context) ) {
                case 1:
                    {
                    this.state = 2686;
                    this.match(TrinoParser.WITHOUT_);
                    this.state = 2687;
                    this.match(TrinoParser.TIME_);
                    this.state = 2688;
                    this.match(TrinoParser.ZONE_);
                    }
                    break;
                }
                }
                break;
            case 6:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2691;
                (localContext as DateTimeTypeContext)._base_ = this.match(TrinoParser.TIME_);
                this.state = 2696;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 2692;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2693;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2694;
                    this.match(TrinoParser.RPAREN_);
                    }
                }

                this.state = 2698;
                this.match(TrinoParser.WITH_);
                this.state = 2699;
                this.match(TrinoParser.TIME_);
                this.state = 2700;
                this.match(TrinoParser.ZONE_);
                }
                break;
            case 7:
                {
                localContext = new DoublePrecisionTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2701;
                this.match(TrinoParser.DOUBLE_);
                this.state = 2702;
                this.match(TrinoParser.PRECISION_);
                }
                break;
            case 8:
                {
                localContext = new LegacyArrayTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2703;
                this.match(TrinoParser.ARRAY_);
                this.state = 2704;
                this.match(TrinoParser.LT_);
                this.state = 2705;
                this.type_(0);
                this.state = 2706;
                this.match(TrinoParser.GT_);
                }
                break;
            case 9:
                {
                localContext = new LegacyMapTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2708;
                this.match(TrinoParser.MAP_);
                this.state = 2709;
                this.match(TrinoParser.LT_);
                this.state = 2710;
                (localContext as LegacyMapTypeContext)._keyType = this.type_(0);
                this.state = 2711;
                this.match(TrinoParser.COMMA_);
                this.state = 2712;
                (localContext as LegacyMapTypeContext)._valueType = this.type_(0);
                this.state = 2713;
                this.match(TrinoParser.GT_);
                }
                break;
            case 10:
                {
                localContext = new GenericTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2715;
                this.identifier();
                this.state = 2727;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 365, this.context) ) {
                case 1:
                    {
                    this.state = 2716;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2717;
                    this.typeParameter();
                    this.state = 2722;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2718;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2719;
                        this.typeParameter();
                        }
                        }
                        this.state = 2724;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2725;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2740;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 368, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new ArrayTypeContext(new TypeContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_type);
                    this.state = 2731;
                    if (!(this.precpred(this.context, 2))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                    }
                    this.state = 2732;
                    this.match(TrinoParser.ARRAY_);
                    this.state = 2736;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 367, this.context) ) {
                    case 1:
                        {
                        this.state = 2733;
                        this.match(TrinoParser.LSQUARE_);
                        this.state = 2734;
                        this.match(TrinoParser.INTEGER_VALUE_);
                        this.state = 2735;
                        this.match(TrinoParser.RSQUARE_);
                        }
                        break;
                    }
                    }
                    }
                }
                this.state = 2742;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 368, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public rowField(): RowFieldContext {
        let localContext = new RowFieldContext(this.context, this.state);
        this.enterRule(localContext, 164, TrinoParser.RULE_rowField);
        try {
            this.state = 2747;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 369, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2743;
                this.type_(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2744;
                this.identifier();
                this.state = 2745;
                this.type_(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeParameter(): TypeParameterContext {
        let localContext = new TypeParameterContext(this.context, this.state);
        this.enterRule(localContext, 166, TrinoParser.RULE_typeParameter);
        try {
            this.state = 2751;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.INTEGER_VALUE_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2749;
                this.match(TrinoParser.INTEGER_VALUE_);
                }
                break;
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
            case TrinoParser.IDENTIFIER_:
            case TrinoParser.DIGIT_IDENTIFIER_:
            case TrinoParser.QUOTED_IDENTIFIER_:
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2750;
                this.type_(0);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClause(): WhenClauseContext {
        let localContext = new WhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 168, TrinoParser.RULE_whenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2753;
            this.match(TrinoParser.WHEN_);
            this.state = 2754;
            localContext._condition = this.expression();
            this.state = 2755;
            this.match(TrinoParser.THEN_);
            this.state = 2756;
            localContext._result = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filter(): FilterContext {
        let localContext = new FilterContext(this.context, this.state);
        this.enterRule(localContext, 170, TrinoParser.RULE_filter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2758;
            this.match(TrinoParser.FILTER_);
            this.state = 2759;
            this.match(TrinoParser.LPAREN_);
            this.state = 2760;
            this.match(TrinoParser.WHERE_);
            this.state = 2761;
            this.booleanExpression(0);
            this.state = 2762;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergeCase(): MergeCaseContext {
        let localContext = new MergeCaseContext(this.context, this.state);
        this.enterRule(localContext, 172, TrinoParser.RULE_mergeCase);
        let _la: number;
        try {
            this.state = 2828;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
            case 1:
                localContext = new MergeUpdateContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2764;
                this.match(TrinoParser.WHEN_);
                this.state = 2765;
                this.match(TrinoParser.MATCHED_);
                this.state = 2768;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 8) {
                    {
                    this.state = 2766;
                    this.match(TrinoParser.AND_);
                    this.state = 2767;
                    (localContext as MergeUpdateContext)._condition = this.expression();
                    }
                }

                this.state = 2770;
                this.match(TrinoParser.THEN_);
                this.state = 2771;
                this.match(TrinoParser.UPDATE_);
                this.state = 2772;
                this.match(TrinoParser.SET_);
                this.state = 2773;
                (localContext as MergeUpdateContext)._identifier = this.identifier();
                (localContext as MergeUpdateContext)._targets.push((localContext as MergeUpdateContext)._identifier!);
                this.state = 2774;
                this.match(TrinoParser.EQ_);
                this.state = 2775;
                (localContext as MergeUpdateContext)._expression = this.expression();
                (localContext as MergeUpdateContext)._values.push((localContext as MergeUpdateContext)._expression!);
                this.state = 2783;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2776;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2777;
                    (localContext as MergeUpdateContext)._identifier = this.identifier();
                    (localContext as MergeUpdateContext)._targets.push((localContext as MergeUpdateContext)._identifier!);
                    this.state = 2778;
                    this.match(TrinoParser.EQ_);
                    this.state = 2779;
                    (localContext as MergeUpdateContext)._expression = this.expression();
                    (localContext as MergeUpdateContext)._values.push((localContext as MergeUpdateContext)._expression!);
                    }
                    }
                    this.state = 2785;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new MergeDeleteContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2786;
                this.match(TrinoParser.WHEN_);
                this.state = 2787;
                this.match(TrinoParser.MATCHED_);
                this.state = 2790;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 8) {
                    {
                    this.state = 2788;
                    this.match(TrinoParser.AND_);
                    this.state = 2789;
                    (localContext as MergeDeleteContext)._condition = this.expression();
                    }
                }

                this.state = 2792;
                this.match(TrinoParser.THEN_);
                this.state = 2793;
                this.match(TrinoParser.DELETE_);
                }
                break;
            case 3:
                localContext = new MergeInsertContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2794;
                this.match(TrinoParser.WHEN_);
                this.state = 2795;
                this.match(TrinoParser.NOT_);
                this.state = 2796;
                this.match(TrinoParser.MATCHED_);
                this.state = 2799;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 8) {
                    {
                    this.state = 2797;
                    this.match(TrinoParser.AND_);
                    this.state = 2798;
                    (localContext as MergeInsertContext)._condition = this.expression();
                    }
                }

                this.state = 2801;
                this.match(TrinoParser.THEN_);
                this.state = 2802;
                this.match(TrinoParser.INSERT_);
                this.state = 2814;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 2803;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2804;
                    (localContext as MergeInsertContext)._identifier = this.identifier();
                    (localContext as MergeInsertContext)._targets.push((localContext as MergeInsertContext)._identifier!);
                    this.state = 2809;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2805;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2806;
                        (localContext as MergeInsertContext)._identifier = this.identifier();
                        (localContext as MergeInsertContext)._targets.push((localContext as MergeInsertContext)._identifier!);
                        }
                        }
                        this.state = 2811;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2812;
                    this.match(TrinoParser.RPAREN_);
                    }
                }

                this.state = 2816;
                this.match(TrinoParser.VALUES_);
                this.state = 2817;
                this.match(TrinoParser.LPAREN_);
                this.state = 2818;
                (localContext as MergeInsertContext)._expression = this.expression();
                (localContext as MergeInsertContext)._values.push((localContext as MergeInsertContext)._expression!);
                this.state = 2823;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2819;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2820;
                    (localContext as MergeInsertContext)._expression = this.expression();
                    (localContext as MergeInsertContext)._values.push((localContext as MergeInsertContext)._expression!);
                    }
                    }
                    this.state = 2825;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2826;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public over(): OverContext {
        let localContext = new OverContext(this.context, this.state);
        this.enterRule(localContext, 174, TrinoParser.RULE_over);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2830;
            this.match(TrinoParser.OVER_);
            this.state = 2836;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
            case TrinoParser.IDENTIFIER_:
            case TrinoParser.DIGIT_IDENTIFIER_:
            case TrinoParser.QUOTED_IDENTIFIER_:
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                {
                this.state = 2831;
                localContext._windowName = this.identifier();
                }
                break;
            case TrinoParser.LPAREN_:
                {
                this.state = 2832;
                this.match(TrinoParser.LPAREN_);
                this.state = 2833;
                this.windowSpecification();
                this.state = 2834;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrame(): WindowFrameContext {
        let localContext = new WindowFrameContext(this.context, this.state);
        this.enterRule(localContext, 176, TrinoParser.RULE_windowFrame);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2847;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 2838;
                this.match(TrinoParser.MEASURES_);
                this.state = 2839;
                this.measureDefinition();
                this.state = 2844;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2840;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2841;
                    this.measureDefinition();
                    }
                    }
                    this.state = 2846;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2849;
            this.frameExtent();
            this.state = 2853;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 4) {
                {
                this.state = 2850;
                this.match(TrinoParser.AFTER_);
                this.state = 2851;
                this.match(TrinoParser.MATCH_);
                this.state = 2852;
                this.skipTo();
                }
            }

            this.state = 2856;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 107 || _la === 230) {
                {
                this.state = 2855;
                _la = this.tokenStream.LA(1);
                if(!(_la === 107 || _la === 230)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2863;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 189) {
                {
                this.state = 2858;
                this.match(TrinoParser.PATTERN_);
                this.state = 2859;
                this.match(TrinoParser.LPAREN_);
                this.state = 2860;
                this.rowPattern(0);
                this.state = 2861;
                this.match(TrinoParser.RPAREN_);
                }
            }

            this.state = 2874;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 241) {
                {
                this.state = 2865;
                this.match(TrinoParser.SUBSET_);
                this.state = 2866;
                this.subsetDefinition();
                this.state = 2871;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2867;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2868;
                    this.subsetDefinition();
                    }
                    }
                    this.state = 2873;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2885;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 2876;
                this.match(TrinoParser.DEFINE_);
                this.state = 2877;
                this.variableDefinition();
                this.state = 2882;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2878;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2879;
                    this.variableDefinition();
                    }
                    }
                    this.state = 2884;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameExtent(): FrameExtentContext {
        let localContext = new FrameExtentContext(this.context, this.state);
        this.enterRule(localContext, 178, TrinoParser.RULE_frameExtent);
        try {
            this.state = 2911;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 389, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2887;
                localContext._frameType = this.match(TrinoParser.RANGE_);
                this.state = 2888;
                localContext._start_ = this.frameBound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2889;
                localContext._frameType = this.match(TrinoParser.ROWS_);
                this.state = 2890;
                localContext._start_ = this.frameBound();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2891;
                localContext._frameType = this.match(TrinoParser.GROUPS_);
                this.state = 2892;
                localContext._start_ = this.frameBound();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2893;
                localContext._frameType = this.match(TrinoParser.RANGE_);
                this.state = 2894;
                this.match(TrinoParser.BETWEEN_);
                this.state = 2895;
                localContext._start_ = this.frameBound();
                this.state = 2896;
                this.match(TrinoParser.AND_);
                this.state = 2897;
                localContext._end_ = this.frameBound();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2899;
                localContext._frameType = this.match(TrinoParser.ROWS_);
                this.state = 2900;
                this.match(TrinoParser.BETWEEN_);
                this.state = 2901;
                localContext._start_ = this.frameBound();
                this.state = 2902;
                this.match(TrinoParser.AND_);
                this.state = 2903;
                localContext._end_ = this.frameBound();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2905;
                localContext._frameType = this.match(TrinoParser.GROUPS_);
                this.state = 2906;
                this.match(TrinoParser.BETWEEN_);
                this.state = 2907;
                localContext._start_ = this.frameBound();
                this.state = 2908;
                this.match(TrinoParser.AND_);
                this.state = 2909;
                localContext._end_ = this.frameBound();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBound(): FrameBoundContext {
        let localContext = new FrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 180, TrinoParser.RULE_frameBound);
        let _la: number;
        try {
            this.state = 2922;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 390, this.context) ) {
            case 1:
                localContext = new UnboundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2913;
                this.match(TrinoParser.UNBOUNDED_);
                this.state = 2914;
                (localContext as UnboundedFrameContext)._boundType = this.match(TrinoParser.PRECEDING_);
                }
                break;
            case 2:
                localContext = new UnboundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2915;
                this.match(TrinoParser.UNBOUNDED_);
                this.state = 2916;
                (localContext as UnboundedFrameContext)._boundType = this.match(TrinoParser.FOLLOWING_);
                }
                break;
            case 3:
                localContext = new CurrentRowBoundContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2917;
                this.match(TrinoParser.CURRENT_);
                this.state = 2918;
                this.match(TrinoParser.ROW_);
                }
                break;
            case 4:
                localContext = new BoundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2919;
                this.expression();
                this.state = 2920;
                (localContext as BoundedFrameContext)._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 85 || _la === 195)) {
                    (localContext as BoundedFrameContext)._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public rowPattern(): RowPatternContext;
    public rowPattern(_p: number): RowPatternContext;
    public rowPattern(_p?: number): RowPatternContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new RowPatternContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 182;
        this.enterRecursionRule(localContext, 182, TrinoParser.RULE_rowPattern, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new QuantifiedPrimaryContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 2925;
            this.patternPrimary();
            this.state = 2927;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 391, this.context) ) {
            case 1:
                {
                this.state = 2926;
                this.patternQuantifier();
                }
                break;
            }
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2936;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 393, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2934;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 392, this.context) ) {
                    case 1:
                        {
                        localContext = new PatternConcatenationContext(new RowPatternContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_rowPattern);
                        this.state = 2929;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2930;
                        this.rowPattern(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PatternAlternationContext(new RowPatternContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_rowPattern);
                        this.state = 2931;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2932;
                        this.match(TrinoParser.VBAR_);
                        this.state = 2933;
                        this.rowPattern(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 2938;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 393, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public patternPrimary(): PatternPrimaryContext {
        let localContext = new PatternPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 184, TrinoParser.RULE_patternPrimary);
        let _la: number;
        try {
            this.state = 2964;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 395, this.context) ) {
            case 1:
                localContext = new PatternVariableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2939;
                this.identifier();
                }
                break;
            case 2:
                localContext = new EmptyPatternContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2940;
                this.match(TrinoParser.LPAREN_);
                this.state = 2941;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 3:
                localContext = new PatternPermutationContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2942;
                this.match(TrinoParser.PERMUTE_);
                this.state = 2943;
                this.match(TrinoParser.LPAREN_);
                this.state = 2944;
                this.rowPattern(0);
                this.state = 2949;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2945;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2946;
                    this.rowPattern(0);
                    }
                    }
                    this.state = 2951;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2952;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 4:
                localContext = new GroupedPatternContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2954;
                this.match(TrinoParser.LPAREN_);
                this.state = 2955;
                this.rowPattern(0);
                this.state = 2956;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 5:
                localContext = new PartitionStartAnchorContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2958;
                this.match(TrinoParser.CARET_);
                }
                break;
            case 6:
                localContext = new PartitionEndAnchorContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2959;
                this.match(TrinoParser.DOLLAR_);
                }
                break;
            case 7:
                localContext = new ExcludedPatternContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2960;
                this.match(TrinoParser.LCURLYHYPHEN_);
                this.state = 2961;
                this.rowPattern(0);
                this.state = 2962;
                this.match(TrinoParser.RCURLYHYPHEN_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternQuantifier(): PatternQuantifierContext {
        let localContext = new PatternQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 186, TrinoParser.RULE_patternQuantifier);
        let _la: number;
        try {
            this.state = 2996;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 403, this.context) ) {
            case 1:
                localContext = new ZeroOrMoreQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2966;
                this.match(TrinoParser.ASTERISK_);
                this.state = 2968;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 396, this.context) ) {
                case 1:
                    {
                    this.state = 2967;
                    (localContext as ZeroOrMoreQuantifierContext)._reluctant = this.match(TrinoParser.QUESTION_MARK_);
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new OneOrMoreQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2970;
                this.match(TrinoParser.PLUS_);
                this.state = 2972;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 397, this.context) ) {
                case 1:
                    {
                    this.state = 2971;
                    (localContext as OneOrMoreQuantifierContext)._reluctant = this.match(TrinoParser.QUESTION_MARK_);
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new ZeroOrOneQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2974;
                this.match(TrinoParser.QUESTION_MARK_);
                this.state = 2976;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 398, this.context) ) {
                case 1:
                    {
                    this.state = 2975;
                    (localContext as ZeroOrOneQuantifierContext)._reluctant = this.match(TrinoParser.QUESTION_MARK_);
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new RangeQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2978;
                this.match(TrinoParser.LCURLY_);
                this.state = 2979;
                (localContext as RangeQuantifierContext)._exactly = this.match(TrinoParser.INTEGER_VALUE_);
                this.state = 2980;
                this.match(TrinoParser.RCURLY_);
                this.state = 2982;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 399, this.context) ) {
                case 1:
                    {
                    this.state = 2981;
                    (localContext as RangeQuantifierContext)._reluctant = this.match(TrinoParser.QUESTION_MARK_);
                    }
                    break;
                }
                }
                break;
            case 5:
                localContext = new RangeQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2984;
                this.match(TrinoParser.LCURLY_);
                this.state = 2986;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 330) {
                    {
                    this.state = 2985;
                    (localContext as RangeQuantifierContext)._atLeast = this.match(TrinoParser.INTEGER_VALUE_);
                    }
                }

                this.state = 2988;
                this.match(TrinoParser.COMMA_);
                this.state = 2990;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 330) {
                    {
                    this.state = 2989;
                    (localContext as RangeQuantifierContext)._atMost = this.match(TrinoParser.INTEGER_VALUE_);
                    }
                }

                this.state = 2992;
                this.match(TrinoParser.RCURLY_);
                this.state = 2994;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 402, this.context) ) {
                case 1:
                    {
                    this.state = 2993;
                    (localContext as RangeQuantifierContext)._reluctant = this.match(TrinoParser.QUESTION_MARK_);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateAssignment(): UpdateAssignmentContext {
        let localContext = new UpdateAssignmentContext(this.context, this.state);
        this.enterRule(localContext, 188, TrinoParser.RULE_updateAssignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2998;
            this.columnIdentifier();
            this.state = 2999;
            this.match(TrinoParser.EQ_);
            this.state = 3000;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainOption(): ExplainOptionContext {
        let localContext = new ExplainOptionContext(this.context, this.state);
        this.enterRule(localContext, 190, TrinoParser.RULE_explainOption);
        let _la: number;
        try {
            this.state = 3006;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.FORMAT_:
                localContext = new ExplainFormatContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3002;
                this.match(TrinoParser.FORMAT_);
                this.state = 3003;
                (localContext as ExplainFormatContext)._value = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 96 || _la === 120 || _la === 247)) {
                    (localContext as ExplainFormatContext)._value = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case TrinoParser.TYPE_:
                localContext = new ExplainTypeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3004;
                this.match(TrinoParser.TYPE_);
                this.state = 3005;
                (localContext as ExplainTypeContext)._value = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 63 || _la === 115 || _la === 143 || _la === 278)) {
                    (localContext as ExplainTypeContext)._value = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionMode(): TransactionModeContext {
        let localContext = new TransactionModeContext(this.context, this.state);
        this.enterRule(localContext, 192, TrinoParser.RULE_transactionMode);
        let _la: number;
        try {
            this.state = 3013;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ISOLATION_:
                localContext = new IsolationLevelContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3008;
                this.match(TrinoParser.ISOLATION_);
                this.state = 3009;
                this.match(TrinoParser.LEVEL_);
                this.state = 3010;
                this.levelOfIsolation();
                }
                break;
            case TrinoParser.READ_:
                localContext = new TransactionAccessModeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3011;
                this.match(TrinoParser.READ_);
                this.state = 3012;
                (localContext as TransactionAccessModeContext)._accessMode = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 175 || _la === 293)) {
                    (localContext as TransactionAccessModeContext)._accessMode = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public levelOfIsolation(): LevelOfIsolationContext {
        let localContext = new LevelOfIsolationContext(this.context, this.state);
        this.enterRule(localContext, 194, TrinoParser.RULE_levelOfIsolation);
        try {
            this.state = 3022;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 406, this.context) ) {
            case 1:
                localContext = new ReadUncommittedContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3015;
                this.match(TrinoParser.READ_);
                this.state = 3016;
                this.match(TrinoParser.UNCOMMITTED_);
                }
                break;
            case 2:
                localContext = new ReadCommittedContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3017;
                this.match(TrinoParser.READ_);
                this.state = 3018;
                this.match(TrinoParser.COMMITTED_);
                }
                break;
            case 3:
                localContext = new RepeatableReadContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3019;
                this.match(TrinoParser.REPEATABLE_);
                this.state = 3020;
                this.match(TrinoParser.READ_);
                }
                break;
            case 4:
                localContext = new SerializableContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3021;
                this.match(TrinoParser.SERIALIZABLE_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callArgument(): CallArgumentContext {
        let localContext = new CallArgumentContext(this.context, this.state);
        this.enterRule(localContext, 196, TrinoParser.RULE_callArgument);
        try {
            this.state = 3029;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 407, this.context) ) {
            case 1:
                localContext = new PositionalArgumentContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3024;
                this.expression();
                }
                break;
            case 2:
                localContext = new NamedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3025;
                this.identifier();
                this.state = 3026;
                this.match(TrinoParser.RDOUBLEARROW_);
                this.state = 3027;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathElement(): PathElementContext {
        let localContext = new PathElementContext(this.context, this.state);
        this.enterRule(localContext, 198, TrinoParser.RULE_pathElement);
        try {
            this.state = 3036;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 408, this.context) ) {
            case 1:
                localContext = new QualifiedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3031;
                this.identifier();
                this.state = 3032;
                this.match(TrinoParser.DOT_);
                this.state = 3033;
                this.identifier();
                }
                break;
            case 2:
                localContext = new UnqualifiedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3035;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathSpecification(): PathSpecificationContext {
        let localContext = new PathSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 200, TrinoParser.RULE_pathSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3038;
            this.pathElement();
            this.state = 3043;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 3039;
                this.match(TrinoParser.COMMA_);
                this.state = 3040;
                this.pathElement();
                }
                }
                this.state = 3045;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionSpecification(): FunctionSpecificationContext {
        let localContext = new FunctionSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 202, TrinoParser.RULE_functionSpecification);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3046;
            this.match(TrinoParser.FUNCTION_);
            this.state = 3047;
            this.functionDeclaration();
            this.state = 3048;
            this.returnsClause();
            this.state = 3052;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 410, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3049;
                    this.routineCharacteristic();
                    }
                    }
                }
                this.state = 3054;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 410, this.context);
            }
            this.state = 3055;
            this.controlStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionDeclaration(): FunctionDeclarationContext {
        let localContext = new FunctionDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 204, TrinoParser.RULE_functionDeclaration);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3057;
            this.qualifiedName();
            this.state = 3058;
            this.match(TrinoParser.LPAREN_);
            this.state = 3067;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                {
                this.state = 3059;
                this.parameterDeclaration();
                this.state = 3064;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 3060;
                    this.match(TrinoParser.COMMA_);
                    this.state = 3061;
                    this.parameterDeclaration();
                    }
                    }
                    this.state = 3066;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3069;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public parameterDeclaration(): ParameterDeclarationContext {
        let localContext = new ParameterDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 206, TrinoParser.RULE_parameterDeclaration);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3072;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 413, this.context) ) {
            case 1:
                {
                this.state = 3071;
                this.identifier();
                }
                break;
            }
            this.state = 3074;
            this.type_(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnsClause(): ReturnsClauseContext {
        let localContext = new ReturnsClauseContext(this.context, this.state);
        this.enterRule(localContext, 208, TrinoParser.RULE_returnsClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3076;
            this.match(TrinoParser.RETURNS_);
            this.state = 3077;
            this.type_(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineCharacteristic(): RoutineCharacteristicContext {
        let localContext = new RoutineCharacteristicContext(this.context, this.state);
        this.enterRule(localContext, 210, TrinoParser.RULE_routineCharacteristic);
        let _la: number;
        try {
            this.state = 3098;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.LANGUAGE_:
                localContext = new LanguageCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3079;
                this.match(TrinoParser.LANGUAGE_);
                this.state = 3080;
                this.identifier();
                }
                break;
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.NOT_:
                localContext = new DeterministicCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3082;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 3081;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 3084;
                this.match(TrinoParser.DETERMINISTIC_);
                }
                break;
            case TrinoParser.RETURNS_:
                localContext = new ReturnsNullOnNullInputCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3085;
                this.match(TrinoParser.RETURNS_);
                this.state = 3086;
                this.match(TrinoParser.NULL_);
                this.state = 3087;
                this.match(TrinoParser.ON_);
                this.state = 3088;
                this.match(TrinoParser.NULL_);
                this.state = 3089;
                this.match(TrinoParser.INPUT_);
                }
                break;
            case TrinoParser.CALLED_:
                localContext = new CalledOnNullInputCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3090;
                this.match(TrinoParser.CALLED_);
                this.state = 3091;
                this.match(TrinoParser.ON_);
                this.state = 3092;
                this.match(TrinoParser.NULL_);
                this.state = 3093;
                this.match(TrinoParser.INPUT_);
                }
                break;
            case TrinoParser.SECURITY_:
                localContext = new SecurityCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3094;
                this.match(TrinoParser.SECURITY_);
                this.state = 3095;
                _la = this.tokenStream.LA(1);
                if(!(_la === 55 || _la === 114)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case TrinoParser.COMMENT_:
                localContext = new CommentCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3096;
                this.match(TrinoParser.COMMENT_);
                this.state = 3097;
                this.string_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public controlStatement(): ControlStatementContext {
        let localContext = new ControlStatementContext(this.context, this.state);
        this.enterRule(localContext, 212, TrinoParser.RULE_controlStatement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3199;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 427, this.context) ) {
            case 1:
                localContext = new ReturnStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3100;
                this.match(TrinoParser.RETURN_);
                this.state = 3101;
                this.valueExpression(0);
                }
                break;
            case 2:
                localContext = new AssignmentStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3102;
                this.match(TrinoParser.SET_);
                this.state = 3103;
                this.identifier();
                this.state = 3104;
                this.match(TrinoParser.EQ_);
                this.state = 3105;
                this.expression();
                }
                break;
            case 3:
                localContext = new SimpleCaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3107;
                this.match(TrinoParser.CASE_);
                this.state = 3108;
                this.expression();
                this.state = 3110;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3109;
                    this.caseStatementWhenClause();
                    }
                    }
                    this.state = 3112;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 284);
                this.state = 3115;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 3114;
                    this.elseClause();
                    }
                }

                this.state = 3117;
                this.match(TrinoParser.END_);
                this.state = 3118;
                this.match(TrinoParser.CASE_);
                }
                break;
            case 4:
                localContext = new SearchedCaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3120;
                this.match(TrinoParser.CASE_);
                this.state = 3122;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3121;
                    this.caseStatementWhenClause();
                    }
                    }
                    this.state = 3124;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 284);
                this.state = 3127;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 3126;
                    this.elseClause();
                    }
                }

                this.state = 3129;
                this.match(TrinoParser.END_);
                this.state = 3130;
                this.match(TrinoParser.CASE_);
                }
                break;
            case 5:
                localContext = new IfStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3132;
                this.match(TrinoParser.IF_);
                this.state = 3133;
                this.expression();
                this.state = 3134;
                this.match(TrinoParser.THEN_);
                this.state = 3135;
                this.sqlStatementList();
                this.state = 3139;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 69) {
                    {
                    {
                    this.state = 3136;
                    this.elseIfClause();
                    }
                    }
                    this.state = 3141;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3143;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 3142;
                    this.elseClause();
                    }
                }

                this.state = 3145;
                this.match(TrinoParser.END_);
                this.state = 3146;
                this.match(TrinoParser.IF_);
                }
                break;
            case 6:
                localContext = new IterateStatementContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3148;
                this.match(TrinoParser.ITERATE_);
                this.state = 3149;
                this.identifier();
                }
                break;
            case 7:
                localContext = new LeaveStatementContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3150;
                this.match(TrinoParser.LEAVE_);
                this.state = 3151;
                this.identifier();
                }
                break;
            case 8:
                localContext = new CompoundStatementContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3152;
                this.match(TrinoParser.BEGIN_);
                this.state = 3158;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 422, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3153;
                        this.variableDeclaration();
                        this.state = 3154;
                        this.match(TrinoParser.SEMICOLON_);
                        }
                        }
                    }
                    this.state = 3160;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 422, this.context);
                }
                this.state = 3162;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4286249823) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                    {
                    this.state = 3161;
                    this.sqlStatementList();
                    }
                }

                this.state = 3164;
                this.match(TrinoParser.END_);
                }
                break;
            case 9:
                localContext = new LoopStatementContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3168;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 424, this.context) ) {
                case 1:
                    {
                    this.state = 3165;
                    (localContext as LoopStatementContext)._label = this.identifier();
                    this.state = 3166;
                    this.match(TrinoParser.COLON_);
                    }
                    break;
                }
                this.state = 3170;
                this.match(TrinoParser.LOOP_);
                this.state = 3171;
                this.sqlStatementList();
                this.state = 3172;
                this.match(TrinoParser.END_);
                this.state = 3173;
                this.match(TrinoParser.LOOP_);
                }
                break;
            case 10:
                localContext = new WhileStatementContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3178;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 425, this.context) ) {
                case 1:
                    {
                    this.state = 3175;
                    (localContext as WhileStatementContext)._label = this.identifier();
                    this.state = 3176;
                    this.match(TrinoParser.COLON_);
                    }
                    break;
                }
                this.state = 3180;
                this.match(TrinoParser.WHILE_);
                this.state = 3181;
                this.expression();
                this.state = 3182;
                this.match(TrinoParser.DO_);
                this.state = 3183;
                this.sqlStatementList();
                this.state = 3184;
                this.match(TrinoParser.END_);
                this.state = 3185;
                this.match(TrinoParser.WHILE_);
                }
                break;
            case 11:
                localContext = new RepeatStatementContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3190;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 426, this.context) ) {
                case 1:
                    {
                    this.state = 3187;
                    (localContext as RepeatStatementContext)._label = this.identifier();
                    this.state = 3188;
                    this.match(TrinoParser.COLON_);
                    }
                    break;
                }
                this.state = 3192;
                this.match(TrinoParser.REPEAT_);
                this.state = 3193;
                this.sqlStatementList();
                this.state = 3194;
                this.match(TrinoParser.UNTIL_);
                this.state = 3195;
                this.expression();
                this.state = 3196;
                this.match(TrinoParser.END_);
                this.state = 3197;
                this.match(TrinoParser.REPEAT_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseStatementWhenClause(): CaseStatementWhenClauseContext {
        let localContext = new CaseStatementWhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 214, TrinoParser.RULE_caseStatementWhenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3201;
            this.match(TrinoParser.WHEN_);
            this.state = 3202;
            this.expression();
            this.state = 3203;
            this.match(TrinoParser.THEN_);
            this.state = 3204;
            this.sqlStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elseIfClause(): ElseIfClauseContext {
        let localContext = new ElseIfClauseContext(this.context, this.state);
        this.enterRule(localContext, 216, TrinoParser.RULE_elseIfClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3206;
            this.match(TrinoParser.ELSEIF_);
            this.state = 3207;
            this.expression();
            this.state = 3208;
            this.match(TrinoParser.THEN_);
            this.state = 3209;
            this.sqlStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elseClause(): ElseClauseContext {
        let localContext = new ElseClauseContext(this.context, this.state);
        this.enterRule(localContext, 218, TrinoParser.RULE_elseClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3211;
            this.match(TrinoParser.ELSE_);
            this.state = 3212;
            this.sqlStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDeclaration(): VariableDeclarationContext {
        let localContext = new VariableDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 220, TrinoParser.RULE_variableDeclaration);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3214;
            this.match(TrinoParser.DECLARE_);
            this.state = 3215;
            this.identifier();
            this.state = 3220;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 3216;
                this.match(TrinoParser.COMMA_);
                this.state = 3217;
                this.identifier();
                }
                }
                this.state = 3222;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3223;
            this.type_(0);
            this.state = 3226;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 3224;
                this.match(TrinoParser.DEFAULT_);
                this.state = 3225;
                this.valueExpression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlStatementList(): SqlStatementListContext {
        let localContext = new SqlStatementListContext(this.context, this.state);
        this.enterRule(localContext, 222, TrinoParser.RULE_sqlStatementList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3231;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 3228;
                    this.controlStatement();
                    this.state = 3229;
                    this.match(TrinoParser.SEMICOLON_);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3233;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 430, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 224, TrinoParser.RULE_privilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3235;
            _la = this.tokenStream.LA(1);
            if(!(_la === 36 || _la === 56 || _la === 110 || _la === 231 || _la === 271)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 226, TrinoParser.RULE_qualifiedName);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3237;
            this.identifier();
            this.state = 3242;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 431, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3238;
                    this.match(TrinoParser.DOT_);
                    this.state = 3239;
                    this.identifier();
                    }
                    }
                }
                this.state = 3244;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 431, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryPeriod(): QueryPeriodContext {
        let localContext = new QueryPeriodContext(this.context, this.state);
        this.enterRule(localContext, 228, TrinoParser.RULE_queryPeriod);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3245;
            this.match(TrinoParser.FOR_);
            this.state = 3246;
            this.rangeType();
            this.state = 3247;
            this.match(TrinoParser.AS_);
            this.state = 3248;
            this.match(TrinoParser.OF_);
            this.state = 3249;
            localContext._end = this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rangeType(): RangeTypeContext {
        let localContext = new RangeTypeContext(this.context, this.state);
        this.enterRule(localContext, 230, TrinoParser.RULE_rangeType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3251;
            _la = this.tokenStream.LA(1);
            if(!(_la === 252 || _la === 282)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantor(): GrantorContext {
        let localContext = new GrantorContext(this.context, this.state);
        this.enterRule(localContext, 232, TrinoParser.RULE_grantor);
        try {
            this.state = 3256;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
            case TrinoParser.IDENTIFIER_:
            case TrinoParser.DIGIT_IDENTIFIER_:
            case TrinoParser.QUOTED_IDENTIFIER_:
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                localContext = new SpecifiedPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3253;
                this.principal();
                }
                break;
            case TrinoParser.CURRENT_USER_:
                localContext = new CurrentUserGrantorContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3254;
                this.match(TrinoParser.CURRENT_USER_);
                }
                break;
            case TrinoParser.CURRENT_ROLE_:
                localContext = new CurrentRoleGrantorContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3255;
                this.match(TrinoParser.CURRENT_ROLE_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principal(): PrincipalContext {
        let localContext = new PrincipalContext(this.context, this.state);
        this.enterRule(localContext, 234, TrinoParser.RULE_principal);
        try {
            this.state = 3263;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 433, this.context) ) {
            case 1:
                localContext = new UnspecifiedPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3258;
                this.identifier();
                }
                break;
            case 2:
                localContext = new UserPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3259;
                this.match(TrinoParser.USER_);
                this.state = 3260;
                this.identifier();
                }
                break;
            case 3:
                localContext = new RolePrincipalContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3261;
                this.match(TrinoParser.ROLE_);
                this.state = 3262;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleIdentifierList(): RoleIdentifierListContext {
        let localContext = new RoleIdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 236, TrinoParser.RULE_roleIdentifierList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3265;
            this.roleIdentifier();
            this.state = 3270;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 3266;
                this.match(TrinoParser.COMMA_);
                this.state = 3267;
                this.roleIdentifier();
                }
                }
                this.state = 3272;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 238, TrinoParser.RULE_identifier);
        try {
            this.state = 3278;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.IDENTIFIER_:
                localContext = new UnquotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3273;
                this.match(TrinoParser.IDENTIFIER_);
                }
                break;
            case TrinoParser.QUOTED_IDENTIFIER_:
                localContext = new QuotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3274;
                this.match(TrinoParser.QUOTED_IDENTIFIER_);
                }
                break;
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
                localContext = new UnquotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3275;
                this.nonReserved();
                }
                break;
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                localContext = new BackQuotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3276;
                this.match(TrinoParser.BACKQUOTED_IDENTIFIER_);
                }
                break;
            case TrinoParser.DIGIT_IDENTIFIER_:
                localContext = new DigitIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3277;
                this.match(TrinoParser.DIGIT_IDENTIFIER_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public catalogName(): CatalogNameContext {
        let localContext = new CatalogNameContext(this.context, this.state);
        this.enterRule(localContext, 240, TrinoParser.RULE_catalogName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3280;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public catalogIdentifier(): CatalogIdentifierContext {
        let localContext = new CatalogIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 242, TrinoParser.RULE_catalogIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3282;
            this.catalogName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaName(): SchemaNameContext {
        let localContext = new SchemaNameContext(this.context, this.state);
        this.enterRule(localContext, 244, TrinoParser.RULE_schemaName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3284;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaIdentifier(): SchemaIdentifierContext {
        let localContext = new SchemaIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 246, TrinoParser.RULE_schemaIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3286;
            this.catalogIdentifier();
            this.state = 3287;
            this.match(TrinoParser.DOT_);
            this.state = 3288;
            this.schemaName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableReference(): TableReferenceContext {
        let localContext = new TableReferenceContext(this.context, this.state);
        this.enterRule(localContext, 248, TrinoParser.RULE_tableReference);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3290;
            this.tableIdentifier();
            this.state = 3295;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 437, this.context) ) {
            case 1:
                {
                this.state = 3292;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 11) {
                    {
                    this.state = 3291;
                    this.match(TrinoParser.AS_);
                    }
                }

                this.state = 3294;
                this.aliasIdentifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableName(): TableNameContext {
        let localContext = new TableNameContext(this.context, this.state);
        this.enterRule(localContext, 250, TrinoParser.RULE_tableName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3297;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIdentifier(): TableIdentifierContext {
        let localContext = new TableIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 252, TrinoParser.RULE_tableIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3302;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 438, this.context) ) {
            case 1:
                {
                this.state = 3299;
                this.schemaIdentifier();
                this.state = 3300;
                this.match(TrinoParser.DOT_);
                }
                break;
            }
            this.state = 3304;
            this.tableName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewIdentifier(): ViewIdentifierContext {
        let localContext = new ViewIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 254, TrinoParser.RULE_viewIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3306;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        let localContext = new ColumnIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 256, TrinoParser.RULE_columnIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3308;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aliasIdentifier(): AliasIdentifierContext {
        let localContext = new AliasIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 258, TrinoParser.RULE_aliasIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3310;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public newSchemaIdentifier(): NewSchemaIdentifierContext {
        let localContext = new NewSchemaIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 260, TrinoParser.RULE_newSchemaIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3312;
            this.schemaIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public newTableIdentifier(): NewTableIdentifierContext {
        let localContext = new NewTableIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 262, TrinoParser.RULE_newTableIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3317;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 439, this.context) ) {
            case 1:
                {
                this.state = 3314;
                this.newSchemaIdentifier();
                this.state = 3315;
                this.match(TrinoParser.DOT_);
                }
                break;
            }
            this.state = 3319;
            this.tableName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public newViewIdentifier(): NewViewIdentifierContext {
        let localContext = new NewViewIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 264, TrinoParser.RULE_newViewIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3321;
            this.newTableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleIdentifier(): RoleIdentifierContext {
        let localContext = new RoleIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 266, TrinoParser.RULE_roleIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3323;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public connectorIdentifier(): ConnectorIdentifierContext {
        let localContext = new ConnectorIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 268, TrinoParser.RULE_connectorIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3325;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 270, TrinoParser.RULE_number);
        let _la: number;
        try {
            this.state = 3339;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 443, this.context) ) {
            case 1:
                localContext = new DecimalLiteralContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3328;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 303) {
                    {
                    this.state = 3327;
                    this.match(TrinoParser.MINUS_);
                    }
                }

                this.state = 3330;
                this.match(TrinoParser.DECIMAL_VALUE_);
                }
                break;
            case 2:
                localContext = new DoubleLiteralContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3332;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 303) {
                    {
                    this.state = 3331;
                    this.match(TrinoParser.MINUS_);
                    }
                }

                this.state = 3334;
                this.match(TrinoParser.DOUBLE_VALUE_);
                }
                break;
            case 3:
                localContext = new IntegerLiteralContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3336;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 303) {
                    {
                    this.state = 3335;
                    this.match(TrinoParser.MINUS_);
                    }
                }

                this.state = 3338;
                this.match(TrinoParser.INTEGER_VALUE_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public authorizationUser(): AuthorizationUserContext {
        let localContext = new AuthorizationUserContext(this.context, this.state);
        this.enterRule(localContext, 272, TrinoParser.RULE_authorizationUser);
        try {
            this.state = 3343;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
            case TrinoParser.IDENTIFIER_:
            case TrinoParser.DIGIT_IDENTIFIER_:
            case TrinoParser.QUOTED_IDENTIFIER_:
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                localContext = new IdentifierUserContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3341;
                this.identifier();
                }
                break;
            case TrinoParser.STRING_:
            case TrinoParser.UNICODE_STRING_:
                localContext = new StringUserContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3342;
                this.string_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 274, TrinoParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3345;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 19:
            return this.queryTerm_sempred(localContext as QueryTermContext, predIndex);
        case 32:
            return this.relation_sempred(localContext as RelationContext, predIndex);
        case 58:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 60:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 61:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        case 81:
            return this.type_sempred(localContext as TypeContext, predIndex);
        case 91:
            return this.rowPattern_sempred(localContext as RowPatternContext, predIndex);
        }
        return true;
    }
    private queryTerm_sempred(localContext: QueryTermContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 2);
        case 1:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private relation_sempred(localContext: RelationContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 3:
            return this.precpred(this.context, 2);
        case 4:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return this.precpred(this.context, 3);
        case 6:
            return this.precpred(this.context, 2);
        case 7:
            return this.precpred(this.context, 1);
        case 8:
            return this.precpred(this.context, 5);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 9:
            return this.precpred(this.context, 24);
        case 10:
            return this.precpred(this.context, 22);
        }
        return true;
    }
    private type_sempred(localContext: TypeContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 11:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private rowPattern_sempred(localContext: RowPatternContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 12:
            return this.precpred(this.context, 2);
        case 13:
            return this.precpred(this.context, 1);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,340,3348,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,1,0,3,0,278,8,0,1,0,1,0,1,1,1,1,3,1,284,8,1,1,1,1,1,
        1,1,1,1,3,1,290,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        302,8,2,1,2,1,2,1,2,1,2,1,2,3,2,309,8,2,1,2,1,2,3,2,313,8,2,1,2,
        1,2,3,2,317,8,2,1,2,1,2,1,2,1,2,3,2,323,8,2,1,2,1,2,3,2,327,8,2,
        1,2,1,2,1,2,1,2,1,2,3,2,334,8,2,1,2,1,2,1,2,3,2,339,8,2,1,2,1,2,
        3,2,343,8,2,1,2,1,2,1,2,1,2,3,2,349,8,2,1,2,1,2,3,2,353,8,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        3,2,372,8,2,1,2,1,2,1,2,1,2,3,2,378,8,2,1,2,1,2,3,2,382,8,2,1,2,
        1,2,3,2,386,8,2,1,2,1,2,3,2,390,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        398,8,2,1,2,1,2,3,2,402,8,2,1,2,3,2,405,8,2,1,2,1,2,1,2,3,2,410,
        8,2,1,2,1,2,1,2,1,2,3,2,416,8,2,1,2,1,2,1,2,1,2,1,2,5,2,423,8,2,
        10,2,12,2,426,9,2,1,2,1,2,1,2,3,2,431,8,2,1,2,1,2,3,2,435,8,2,1,
        2,1,2,1,2,1,2,3,2,441,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,451,
        8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,463,8,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,3,2,472,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        481,8,2,1,2,1,2,1,2,1,2,3,2,487,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,498,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,506,8,2,1,2,1,2,
        1,2,1,2,1,2,1,2,3,2,514,8,2,1,2,1,2,1,2,1,2,1,2,3,2,521,8,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,531,8,2,1,2,1,2,1,2,1,2,1,2,3,2,
        538,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,546,8,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,580,8,2,10,2,12,
        2,583,9,2,3,2,585,8,2,1,2,3,2,588,8,2,1,2,1,2,3,2,592,8,2,1,2,1,
        2,1,2,1,2,3,2,598,8,2,1,2,1,2,1,2,3,2,603,8,2,1,2,1,2,1,2,1,2,1,
        2,3,2,610,8,2,1,2,1,2,1,2,1,2,3,2,616,8,2,1,2,1,2,3,2,620,8,2,1,
        2,1,2,3,2,624,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,632,8,2,1,2,1,2,1,
        2,1,2,3,2,638,8,2,1,2,1,2,3,2,642,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,3,2,656,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,664,
        8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,683,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,706,8,2,10,2,12,2,709,
        9,2,3,2,711,8,2,1,2,1,2,1,2,1,2,1,2,3,2,718,8,2,1,2,1,2,1,2,1,2,
        1,2,3,2,725,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,734,8,2,1,2,1,2,
        3,2,738,8,2,1,2,1,2,1,2,1,2,1,2,3,2,745,8,2,1,2,1,2,1,2,1,2,1,2,
        1,2,5,2,753,8,2,10,2,12,2,756,9,2,1,2,1,2,1,2,3,2,761,8,2,1,2,1,
        2,1,2,3,2,766,8,2,1,2,1,2,3,2,770,8,2,1,2,1,2,1,2,1,2,3,2,776,8,
        2,1,2,1,2,1,2,1,2,1,2,5,2,783,8,2,10,2,12,2,786,9,2,1,2,1,2,1,2,
        3,2,791,8,2,1,2,1,2,3,2,795,8,2,1,2,1,2,1,2,1,2,1,2,3,2,802,8,2,
        1,2,1,2,3,2,806,8,2,1,2,1,2,1,2,1,2,5,2,812,8,2,10,2,12,2,815,9,
        2,1,2,1,2,3,2,819,8,2,1,2,1,2,3,2,823,8,2,1,2,1,2,3,2,827,8,2,1,
        2,3,2,830,8,2,1,2,1,2,1,2,1,2,1,2,3,2,837,8,2,1,2,1,2,1,2,1,2,5,
        2,843,8,2,10,2,12,2,846,9,2,1,2,1,2,3,2,850,8,2,1,2,1,2,3,2,854,
        8,2,1,2,1,2,3,2,858,8,2,1,2,3,2,861,8,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,3,2,870,8,2,1,2,1,2,1,2,5,2,875,8,2,10,2,12,2,878,9,2,1,2,1,
        2,3,2,882,8,2,1,2,1,2,3,2,886,8,2,1,2,1,2,3,2,890,8,2,1,2,3,2,893,
        8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,902,8,2,1,2,3,2,905,8,2,1,2,
        1,2,1,2,1,2,1,2,5,2,912,8,2,10,2,12,2,915,9,2,1,2,1,2,3,2,919,8,
        2,1,2,1,2,1,2,1,2,3,2,925,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,949,8,
        2,1,2,1,2,1,2,1,2,3,2,955,8,2,3,2,957,8,2,1,2,1,2,1,2,1,2,3,2,963,
        8,2,1,2,1,2,1,2,1,2,3,2,969,8,2,3,2,971,8,2,1,2,1,2,1,2,1,2,1,2,
        1,2,3,2,979,8,2,3,2,981,8,2,1,2,1,2,1,2,1,2,3,2,987,8,2,1,2,1,2,
        1,2,1,2,3,2,993,8,2,3,2,995,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,3,2,1010,8,2,1,2,1,2,1,2,3,2,1015,8,2,1,2,1,
        2,1,2,1,2,1,2,3,2,1022,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1032,
        8,2,1,2,1,2,1,2,1,2,3,2,1038,8,2,3,2,1040,8,2,1,2,1,2,1,2,1,2,1,
        2,1,2,3,2,1048,8,2,3,2,1050,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,1073,8,2,
        10,2,12,2,1076,9,2,3,2,1078,8,2,1,2,1,2,3,2,1082,8,2,1,2,1,2,3,2,
        1086,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        5,2,1102,8,2,10,2,12,2,1105,9,2,3,2,1107,8,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,5,2,1116,8,2,10,2,12,2,1119,9,2,3,2,1121,8,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1137,8,2,1,2,1,2,
        1,2,1,2,3,2,1143,8,2,1,2,3,2,1146,8,2,1,2,1,2,1,2,1,2,1,2,4,2,1153,
        8,2,11,2,12,2,1154,3,2,1157,8,2,1,3,1,3,1,3,1,3,3,3,1163,8,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,1173,8,4,10,4,12,4,1176,9,4,1,4,
        1,4,3,4,1180,8,4,1,5,3,5,1183,8,5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,1191,
        8,6,10,6,12,6,1194,9,6,1,7,3,7,1197,8,7,1,7,1,7,1,8,1,8,3,8,1203,
        8,8,1,8,1,8,1,8,5,8,1208,8,8,10,8,12,8,1211,9,8,1,9,1,9,3,9,1215,
        8,9,1,10,1,10,1,10,1,10,3,10,1221,8,10,1,10,1,10,3,10,1225,8,10,
        1,10,1,10,3,10,1229,8,10,1,11,1,11,1,11,1,11,3,11,1235,8,11,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,5,13,1244,8,13,10,13,12,13,1247,9,
        13,1,14,1,14,1,14,1,14,1,15,1,15,3,15,1255,8,15,1,16,1,16,1,16,1,
        16,1,16,1,16,5,16,1263,8,16,10,16,12,16,1266,9,16,3,16,1268,8,16,
        1,16,1,16,1,16,3,16,1273,8,16,3,16,1275,8,16,1,16,1,16,1,16,1,16,
        1,16,3,16,1282,8,16,1,16,1,16,1,16,1,16,3,16,1288,8,16,3,16,1290,
        8,16,1,17,1,17,3,17,1294,8,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,3,19,1304,8,19,1,19,1,19,1,19,1,19,3,19,1310,8,19,1,19,5,19,
        1313,8,19,10,19,12,19,1316,9,19,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,5,20,1325,8,20,10,20,12,20,1328,9,20,1,20,1,20,1,20,1,20,3,20,
        1334,8,20,1,21,1,21,3,21,1338,8,21,1,21,1,21,3,21,1342,8,21,1,22,
        1,22,3,22,1346,8,22,1,22,1,22,1,22,5,22,1351,8,22,10,22,12,22,1354,
        9,22,1,22,3,22,1357,8,22,1,22,1,22,3,22,1361,8,22,1,22,1,22,1,22,
        3,22,1366,8,22,1,22,1,22,3,22,1370,8,22,1,22,1,22,1,22,1,22,5,22,
        1376,8,22,10,22,12,22,1379,9,22,3,22,1381,8,22,1,23,1,23,1,23,1,
        23,5,23,1387,8,23,10,23,12,23,1390,9,23,1,24,3,24,1393,8,24,1,24,
        1,24,1,24,5,24,1398,8,24,10,24,12,24,1401,9,24,1,25,1,25,1,25,1,
        25,1,25,1,25,5,25,1409,8,25,10,25,12,25,1412,9,25,3,25,1414,8,25,
        1,25,1,25,1,25,1,25,1,25,1,25,5,25,1422,8,25,10,25,12,25,1425,9,
        25,3,25,1427,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,1436,8,
        25,10,25,12,25,1439,9,25,1,25,1,25,3,25,1443,8,25,1,26,1,26,1,26,
        1,26,5,26,1449,8,26,10,26,12,26,1452,9,26,3,26,1454,8,26,1,26,1,
        26,3,26,1458,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,3,28,1467,8,
        28,1,28,1,28,1,28,1,28,1,28,5,28,1474,8,28,10,28,12,28,1477,9,28,
        3,28,1479,8,28,1,28,1,28,1,28,1,28,1,28,5,28,1486,8,28,10,28,12,
        28,1489,9,28,3,28,1491,8,28,1,28,3,28,1494,8,28,1,29,1,29,3,29,1498,
        8,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,3,31,1510,
        8,31,1,31,3,31,1513,8,31,1,31,1,31,1,31,1,31,1,31,3,31,1520,8,31,
        3,31,1522,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1541,8,32,5,32,1543,8,32,
        10,32,12,32,1546,9,32,1,33,3,33,1549,8,33,1,33,1,33,3,33,1553,8,
        33,3,33,1555,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,1564,8,
        34,10,34,12,34,1567,9,34,1,34,1,34,3,34,1571,8,34,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,3,35,1581,8,35,3,35,1583,8,35,1,36,1,36,
        1,37,1,37,1,38,1,38,1,38,3,38,1592,8,38,1,38,3,38,1595,8,38,1,39,
        1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,1608,8,40,
        10,40,12,40,1611,9,40,3,40,1613,8,40,1,40,1,40,1,40,1,40,1,40,5,
        40,1620,8,40,10,40,12,40,1623,9,40,3,40,1625,8,40,1,40,1,40,1,40,
        1,40,5,40,1631,8,40,10,40,12,40,1634,9,40,3,40,1636,8,40,1,40,3,
        40,1639,8,40,1,40,1,40,1,40,3,40,1644,8,40,1,40,3,40,1647,8,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,1657,8,40,10,40,12,40,
        1660,9,40,3,40,1662,8,40,1,40,1,40,1,40,1,40,5,40,1668,8,40,10,40,
        12,40,1671,9,40,1,40,1,40,3,40,1675,8,40,1,40,1,40,3,40,1679,8,40,
        3,40,1681,8,40,3,40,1683,8,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,3,42,1698,8,42,3,42,1700,8,42,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1711,8,43,1,44,1,44,
        1,44,1,44,1,44,3,44,1718,8,44,1,44,3,44,1721,8,44,1,44,1,44,1,44,
        3,44,1726,8,44,1,45,1,45,1,45,1,45,1,45,1,45,5,45,1734,8,45,10,45,
        12,45,1737,9,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,3,47,1747,
        8,47,1,47,1,47,3,47,1751,8,47,3,47,1753,8,47,1,48,1,48,1,48,1,48,
        5,48,1759,8,48,10,48,12,48,1762,9,48,1,48,1,48,1,49,1,49,3,49,1768,
        8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,1779,8,49,
        10,49,12,49,1782,9,49,1,49,1,49,1,49,3,49,1787,8,49,1,49,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1803,
        8,49,1,50,1,50,1,50,1,50,1,50,5,50,1810,8,50,10,50,12,50,1813,9,
        50,3,50,1815,8,50,1,50,1,50,1,50,1,50,5,50,1821,8,50,10,50,12,50,
        1824,9,50,3,50,1826,8,50,1,50,1,50,1,51,1,51,1,51,3,51,1833,8,51,
        1,51,1,51,1,51,3,51,1838,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        5,52,1847,8,52,10,52,12,52,1850,9,52,3,52,1852,8,52,1,52,1,52,3,
        52,1856,8,52,3,52,1858,8,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1866,
        8,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,1874,8,52,10,52,12,52,1877,
        9,52,1,52,1,52,1,52,3,52,1882,8,52,3,52,1884,8,52,1,53,1,53,1,53,
        1,53,1,53,3,53,1891,8,53,1,53,1,53,3,53,1895,8,53,3,53,1897,8,53,
        1,53,1,53,1,53,1,53,1,53,3,53,1904,8,53,1,53,1,53,3,53,1908,8,53,
        3,53,1910,8,53,3,53,1912,8,53,1,54,1,54,1,54,1,54,1,54,5,54,1919,
        8,54,10,54,12,54,1922,9,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,3,54,1932,8,54,1,55,1,55,3,55,1936,8,55,1,56,1,56,1,56,1,56,1,
        56,1,56,5,56,1944,8,56,10,56,12,56,1947,9,56,1,56,1,56,1,57,1,57,
        1,58,1,58,1,58,3,58,1956,8,58,1,58,1,58,3,58,1960,8,58,1,58,1,58,
        1,58,1,58,1,58,1,58,5,58,1968,8,58,10,58,12,58,1971,9,58,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1983,8,59,1,59,1,
        59,1,59,1,59,1,59,1,59,3,59,1991,8,59,1,59,1,59,1,59,1,59,1,59,5,
        59,1998,8,59,10,59,12,59,2001,9,59,1,59,1,59,1,59,3,59,2006,8,59,
        1,59,1,59,1,59,1,59,1,59,1,59,3,59,2014,8,59,1,59,1,59,1,59,1,59,
        3,59,2020,8,59,1,59,1,59,3,59,2024,8,59,1,59,1,59,1,59,3,59,2029,
        8,59,1,59,1,59,1,59,3,59,2034,8,59,1,60,1,60,1,60,1,60,3,60,2040,
        8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        5,60,2054,8,60,10,60,12,60,2057,9,60,1,61,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,4,61,2084,8,61,11,61,12,61,2085,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,2095,8,61,10,61,12,61,2098,
        9,61,1,61,1,61,1,61,1,61,1,61,3,61,2105,8,61,1,61,1,61,1,61,3,61,
        2110,8,61,1,61,1,61,1,61,3,61,2115,8,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,5,61,2126,8,61,10,61,12,61,2129,9,61,1,61,1,
        61,1,61,3,61,2134,8,61,1,61,3,61,2137,8,61,1,61,1,61,1,61,1,61,1,
        61,3,61,2144,8,61,1,61,1,61,1,61,3,61,2149,8,61,1,61,3,61,2152,8,
        61,1,61,3,61,2155,8,61,1,61,1,61,1,61,3,61,2160,8,61,1,61,1,61,1,
        61,5,61,2165,8,61,10,61,12,61,2168,9,61,3,61,2170,8,61,1,61,1,61,
        1,61,1,61,1,61,5,61,2177,8,61,10,61,12,61,2180,9,61,3,61,2182,8,
        61,1,61,1,61,3,61,2186,8,61,1,61,3,61,2189,8,61,1,61,3,61,2192,8,
        61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,2205,
        8,61,10,61,12,61,2208,9,61,3,61,2210,8,61,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,4,61,2227,8,
        61,11,61,12,61,2228,1,61,1,61,3,61,2233,8,61,1,61,1,61,1,61,1,61,
        4,61,2239,8,61,11,61,12,61,2240,1,61,1,61,3,61,2245,8,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,2268,8,61,10,61,12,61,2271,
        9,61,3,61,2273,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,2282,
        8,61,1,61,1,61,1,61,1,61,3,61,2288,8,61,1,61,1,61,1,61,1,61,3,61,
        2294,8,61,1,61,1,61,1,61,1,61,3,61,2300,8,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,3,61,2309,8,61,1,61,3,61,2312,8,61,1,61,3,61,2315,
        8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,3,61,2334,8,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,3,61,2343,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,2363,8,61,
        10,61,12,61,2366,9,61,3,61,2368,8,61,1,61,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,3,61,2378,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,
        61,2387,8,61,1,61,1,61,1,61,1,61,3,61,2393,8,61,1,61,1,61,1,61,1,
        61,3,61,2399,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,
        61,2410,8,61,3,61,2412,8,61,1,61,1,61,1,61,3,61,2417,8,61,1,61,1,
        61,1,61,1,61,1,61,3,61,2424,8,61,3,61,2426,8,61,1,61,1,61,1,61,1,
        61,3,61,2432,8,61,1,61,1,61,1,61,1,61,3,61,2438,8,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,5,61,2447,8,61,10,61,12,61,2450,9,61,1,61,
        1,61,1,61,1,61,1,61,1,61,3,61,2458,8,61,1,61,1,61,1,61,3,61,2463,
        8,61,1,61,1,61,1,61,3,61,2468,8,61,3,61,2470,8,61,3,61,2472,8,61,
        1,61,1,61,1,61,1,61,3,61,2478,8,61,3,61,2480,8,61,1,61,1,61,1,61,
        1,61,1,61,1,61,5,61,2488,8,61,10,61,12,61,2491,9,61,1,61,1,61,1,
        61,1,61,1,61,1,61,3,61,2499,8,61,3,61,2501,8,61,1,61,1,61,1,61,1,
        61,3,61,2507,8,61,3,61,2509,8,61,1,61,3,61,2512,8,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,5,61,2522,8,61,10,61,12,61,2525,9,61,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,2534,8,62,10,62,12,62,2537,
        9,62,3,62,2539,8,62,1,63,1,63,1,63,3,63,2544,8,63,1,64,1,64,1,64,
        3,64,2549,8,64,1,65,1,65,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,67,
        3,67,2561,8,67,1,68,1,68,3,68,2565,8,68,1,68,1,68,3,68,2569,8,68,
        1,68,3,68,2572,8,68,3,68,2574,8,68,1,69,1,69,1,69,1,69,3,69,2580,
        8,69,1,70,3,70,2583,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        3,70,2593,8,70,1,71,1,71,1,72,1,72,1,72,1,72,3,72,2601,8,72,1,73,
        1,73,1,73,1,73,3,73,2607,8,73,3,73,2609,8,73,1,74,1,74,1,74,1,74,
        1,74,1,74,3,74,2617,8,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,
        3,78,2627,8,78,1,78,1,78,1,78,1,78,3,78,2633,8,78,1,79,1,79,1,80,
        1,80,1,81,1,81,1,81,1,81,1,81,1,81,5,81,2645,8,81,10,81,12,81,2648,
        9,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2656,8,81,1,81,1,81,1,81,
        1,81,1,81,3,81,2663,8,81,1,81,1,81,1,81,3,81,2668,8,81,1,81,1,81,
        1,81,1,81,1,81,3,81,2675,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,3,81,2685,8,81,1,81,1,81,1,81,3,81,2690,8,81,1,81,1,81,1,81,
        1,81,1,81,3,81,2697,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,5,81,2721,8,81,10,81,12,81,2724,9,81,1,81,1,81,3,81,2728,8,
        81,3,81,2730,8,81,1,81,1,81,1,81,1,81,1,81,3,81,2737,8,81,5,81,2739,
        8,81,10,81,12,81,2742,9,81,1,82,1,82,1,82,1,82,3,82,2748,8,82,1,
        83,1,83,3,83,2752,8,83,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,
        85,1,85,1,85,1,86,1,86,1,86,1,86,3,86,2769,8,86,1,86,1,86,1,86,1,
        86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,5,86,2782,8,86,10,86,12,86,
        2785,9,86,1,86,1,86,1,86,1,86,3,86,2791,8,86,1,86,1,86,1,86,1,86,
        1,86,1,86,1,86,3,86,2800,8,86,1,86,1,86,1,86,1,86,1,86,1,86,5,86,
        2808,8,86,10,86,12,86,2811,9,86,1,86,1,86,3,86,2815,8,86,1,86,1,
        86,1,86,1,86,1,86,5,86,2822,8,86,10,86,12,86,2825,9,86,1,86,1,86,
        3,86,2829,8,86,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2837,8,87,1,88,
        1,88,1,88,1,88,5,88,2843,8,88,10,88,12,88,2846,9,88,3,88,2848,8,
        88,1,88,1,88,1,88,1,88,3,88,2854,8,88,1,88,3,88,2857,8,88,1,88,1,
        88,1,88,1,88,1,88,3,88,2864,8,88,1,88,1,88,1,88,1,88,5,88,2870,8,
        88,10,88,12,88,2873,9,88,3,88,2875,8,88,1,88,1,88,1,88,1,88,5,88,
        2881,8,88,10,88,12,88,2884,9,88,3,88,2886,8,88,1,89,1,89,1,89,1,
        89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,
        89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,2912,8,89,1,90,1,90,1,
        90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,2923,8,90,1,91,1,91,1,91,3,
        91,2928,8,91,1,91,1,91,1,91,1,91,1,91,5,91,2935,8,91,10,91,12,91,
        2938,9,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,5,92,2948,8,92,
        10,92,12,92,2951,9,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,3,92,2965,8,92,1,93,1,93,3,93,2969,8,93,1,93,1,
        93,3,93,2973,8,93,1,93,1,93,3,93,2977,8,93,1,93,1,93,1,93,1,93,3,
        93,2983,8,93,1,93,1,93,3,93,2987,8,93,1,93,1,93,3,93,2991,8,93,1,
        93,1,93,3,93,2995,8,93,3,93,2997,8,93,1,94,1,94,1,94,1,94,1,95,1,
        95,1,95,1,95,3,95,3007,8,95,1,96,1,96,1,96,1,96,1,96,3,96,3014,8,
        96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,3023,8,97,1,98,1,98,1,
        98,1,98,1,98,3,98,3030,8,98,1,99,1,99,1,99,1,99,1,99,3,99,3037,8,
        99,1,100,1,100,1,100,5,100,3042,8,100,10,100,12,100,3045,9,100,1,
        101,1,101,1,101,1,101,5,101,3051,8,101,10,101,12,101,3054,9,101,
        1,101,1,101,1,102,1,102,1,102,1,102,1,102,5,102,3063,8,102,10,102,
        12,102,3066,9,102,3,102,3068,8,102,1,102,1,102,1,103,3,103,3073,
        8,103,1,103,1,103,1,104,1,104,1,104,1,105,1,105,1,105,3,105,3083,
        8,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,3,105,3099,8,105,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,4,106,3111,8,106,11,106,12,106,
        3112,1,106,3,106,3116,8,106,1,106,1,106,1,106,1,106,1,106,4,106,
        3123,8,106,11,106,12,106,3124,1,106,3,106,3128,8,106,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,5,106,3138,8,106,10,106,12,106,
        3141,9,106,1,106,3,106,3144,8,106,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,5,106,3157,8,106,10,106,12,106,
        3160,9,106,1,106,3,106,3163,8,106,1,106,1,106,1,106,1,106,3,106,
        3169,8,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,
        3179,8,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
        1,106,3,106,3191,8,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
        3,106,3200,8,106,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,
        1,108,1,108,1,109,1,109,1,109,1,110,1,110,1,110,1,110,5,110,3219,
        8,110,10,110,12,110,3222,9,110,1,110,1,110,1,110,3,110,3227,8,110,
        1,111,1,111,1,111,4,111,3232,8,111,11,111,12,111,3233,1,112,1,112,
        1,113,1,113,1,113,5,113,3241,8,113,10,113,12,113,3244,9,113,1,114,
        1,114,1,114,1,114,1,114,1,114,1,115,1,115,1,116,1,116,1,116,3,116,
        3257,8,116,1,117,1,117,1,117,1,117,1,117,3,117,3264,8,117,1,118,
        1,118,1,118,5,118,3269,8,118,10,118,12,118,3272,9,118,1,119,1,119,
        1,119,1,119,1,119,3,119,3279,8,119,1,120,1,120,1,121,1,121,1,122,
        1,122,1,123,1,123,1,123,1,123,1,124,1,124,3,124,3293,8,124,1,124,
        3,124,3296,8,124,1,125,1,125,1,126,1,126,1,126,3,126,3303,8,126,
        1,126,1,126,1,127,1,127,1,128,1,128,1,129,1,129,1,130,1,130,1,131,
        1,131,1,131,3,131,3318,8,131,1,131,1,131,1,132,1,132,1,133,1,133,
        1,134,1,134,1,135,3,135,3329,8,135,1,135,1,135,3,135,3333,8,135,
        1,135,1,135,3,135,3337,8,135,1,135,3,135,3340,8,135,1,136,1,136,
        3,136,3344,8,136,1,137,1,137,1,137,0,7,38,64,116,120,122,162,182,
        138,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
        188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
        220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
        252,254,256,258,260,262,264,266,268,270,272,274,0,36,2,0,22,22,212,
        212,2,0,55,55,114,114,2,0,88,88,105,105,2,0,75,75,106,106,1,0,222,
        223,2,0,84,84,157,157,2,0,308,308,330,330,2,0,74,74,265,265,2,0,
        12,12,58,58,2,0,84,84,131,131,2,0,5,5,62,62,3,0,89,89,135,135,217,
        217,2,0,16,16,243,243,3,0,18,18,133,133,254,254,2,0,288,288,290,
        290,2,0,107,107,230,230,1,0,302,303,1,0,304,306,2,0,127,127,172,
        172,1,0,275,277,4,0,72,72,80,80,257,257,267,267,2,0,32,32,264,264,
        2,0,10,10,169,169,2,0,83,83,224,224,1,0,296,301,3,0,5,5,9,9,238,
        238,2,0,80,80,257,257,5,0,50,50,101,101,153,154,228,228,294,294,
        1,0,158,161,2,0,85,85,195,195,3,0,96,96,120,120,247,247,4,0,63,63,
        115,115,143,143,278,278,2,0,175,175,293,293,5,0,36,36,56,56,110,
        110,231,231,271,271,2,0,252,252,282,282,55,0,1,5,7,7,9,10,12,16,
        18,18,20,22,25,32,34,35,39,39,48,50,52,55,57,58,60,61,63,65,68,70,
        72,72,75,75,78,78,81,85,87,87,90,96,99,99,101,104,106,107,109,109,
        112,112,114,115,117,118,120,120,127,134,136,136,138,138,140,140,
        143,154,156,163,167,172,174,176,179,179,181,196,198,203,205,216,
        218,220,222,230,232,236,238,243,245,248,250,255,258,260,262,264,
        266,268,270,273,275,279,281,283,286,287,289,295,3852,0,277,1,0,0,
        0,2,289,1,0,0,0,4,1156,1,0,0,0,6,1158,1,0,0,0,8,1166,1,0,0,0,10,
        1182,1,0,0,0,12,1186,1,0,0,0,14,1196,1,0,0,0,16,1200,1,0,0,0,18,
        1214,1,0,0,0,20,1216,1,0,0,0,22,1230,1,0,0,0,24,1236,1,0,0,0,26,
        1240,1,0,0,0,28,1248,1,0,0,0,30,1254,1,0,0,0,32,1256,1,0,0,0,34,
        1293,1,0,0,0,36,1295,1,0,0,0,38,1297,1,0,0,0,40,1333,1,0,0,0,42,
        1335,1,0,0,0,44,1343,1,0,0,0,46,1382,1,0,0,0,48,1392,1,0,0,0,50,
        1442,1,0,0,0,52,1457,1,0,0,0,54,1459,1,0,0,0,56,1466,1,0,0,0,58,
        1495,1,0,0,0,60,1504,1,0,0,0,62,1521,1,0,0,0,64,1523,1,0,0,0,66,
        1554,1,0,0,0,68,1570,1,0,0,0,70,1582,1,0,0,0,72,1584,1,0,0,0,74,
        1586,1,0,0,0,76,1594,1,0,0,0,78,1596,1,0,0,0,80,1599,1,0,0,0,82,
        1684,1,0,0,0,84,1699,1,0,0,0,86,1710,1,0,0,0,88,1712,1,0,0,0,90,
        1727,1,0,0,0,92,1740,1,0,0,0,94,1744,1,0,0,0,96,1754,1,0,0,0,98,
        1802,1,0,0,0,100,1804,1,0,0,0,102,1832,1,0,0,0,104,1839,1,0,0,0,
        106,1911,1,0,0,0,108,1931,1,0,0,0,110,1933,1,0,0,0,112,1937,1,0,
        0,0,114,1950,1,0,0,0,116,1959,1,0,0,0,118,2033,1,0,0,0,120,2039,
        1,0,0,0,122,2511,1,0,0,0,124,2526,1,0,0,0,126,2540,1,0,0,0,128,2545,
        1,0,0,0,130,2550,1,0,0,0,132,2554,1,0,0,0,134,2560,1,0,0,0,136,2573,
        1,0,0,0,138,2579,1,0,0,0,140,2592,1,0,0,0,142,2594,1,0,0,0,144,2600,
        1,0,0,0,146,2608,1,0,0,0,148,2616,1,0,0,0,150,2618,1,0,0,0,152,2620,
        1,0,0,0,154,2622,1,0,0,0,156,2624,1,0,0,0,158,2634,1,0,0,0,160,2636,
        1,0,0,0,162,2729,1,0,0,0,164,2747,1,0,0,0,166,2751,1,0,0,0,168,2753,
        1,0,0,0,170,2758,1,0,0,0,172,2828,1,0,0,0,174,2830,1,0,0,0,176,2847,
        1,0,0,0,178,2911,1,0,0,0,180,2922,1,0,0,0,182,2924,1,0,0,0,184,2964,
        1,0,0,0,186,2996,1,0,0,0,188,2998,1,0,0,0,190,3006,1,0,0,0,192,3013,
        1,0,0,0,194,3022,1,0,0,0,196,3029,1,0,0,0,198,3036,1,0,0,0,200,3038,
        1,0,0,0,202,3046,1,0,0,0,204,3057,1,0,0,0,206,3072,1,0,0,0,208,3076,
        1,0,0,0,210,3098,1,0,0,0,212,3199,1,0,0,0,214,3201,1,0,0,0,216,3206,
        1,0,0,0,218,3211,1,0,0,0,220,3214,1,0,0,0,222,3231,1,0,0,0,224,3235,
        1,0,0,0,226,3237,1,0,0,0,228,3245,1,0,0,0,230,3251,1,0,0,0,232,3256,
        1,0,0,0,234,3263,1,0,0,0,236,3265,1,0,0,0,238,3278,1,0,0,0,240,3280,
        1,0,0,0,242,3282,1,0,0,0,244,3284,1,0,0,0,246,3286,1,0,0,0,248,3290,
        1,0,0,0,250,3297,1,0,0,0,252,3302,1,0,0,0,254,3306,1,0,0,0,256,3308,
        1,0,0,0,258,3310,1,0,0,0,260,3312,1,0,0,0,262,3317,1,0,0,0,264,3321,
        1,0,0,0,266,3323,1,0,0,0,268,3325,1,0,0,0,270,3339,1,0,0,0,272,3343,
        1,0,0,0,274,3345,1,0,0,0,276,278,3,2,1,0,277,276,1,0,0,0,277,278,
        1,0,0,0,278,279,1,0,0,0,279,280,5,0,0,1,280,1,1,0,0,0,281,283,3,
        4,2,0,282,284,5,309,0,0,283,282,1,0,0,0,283,284,1,0,0,0,284,290,
        1,0,0,0,285,286,3,4,2,0,286,287,5,309,0,0,287,288,3,2,1,0,288,290,
        1,0,0,0,289,281,1,0,0,0,289,285,1,0,0,0,290,3,1,0,0,0,291,1157,3,
        10,5,0,292,293,5,272,0,0,293,1157,3,246,123,0,294,295,5,272,0,0,
        295,1157,3,242,121,0,296,297,5,36,0,0,297,301,5,25,0,0,298,299,5,
        102,0,0,299,300,5,165,0,0,300,302,5,77,0,0,301,298,1,0,0,0,301,302,
        1,0,0,0,302,303,1,0,0,0,303,304,3,238,119,0,304,305,5,274,0,0,305,
        308,3,268,134,0,306,307,5,29,0,0,307,309,3,146,73,0,308,306,1,0,
        0,0,308,309,1,0,0,0,309,312,1,0,0,0,310,311,5,14,0,0,311,313,3,234,
        117,0,312,310,1,0,0,0,312,313,1,0,0,0,313,316,1,0,0,0,314,315,5,
        288,0,0,315,317,3,24,12,0,316,314,1,0,0,0,316,317,1,0,0,0,317,1157,
        1,0,0,0,318,319,5,66,0,0,319,322,5,25,0,0,320,321,5,102,0,0,321,
        323,5,77,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,324,1,0,0,0,324,
        326,3,242,121,0,325,327,7,0,0,0,326,325,1,0,0,0,326,327,1,0,0,0,
        327,1157,1,0,0,0,328,329,5,36,0,0,329,333,5,226,0,0,330,331,5,102,
        0,0,331,332,5,165,0,0,332,334,5,77,0,0,333,330,1,0,0,0,333,334,1,
        0,0,0,334,335,1,0,0,0,335,338,3,260,130,0,336,337,5,14,0,0,337,339,
        3,234,117,0,338,336,1,0,0,0,338,339,1,0,0,0,339,342,1,0,0,0,340,
        341,5,288,0,0,341,343,3,24,12,0,342,340,1,0,0,0,342,343,1,0,0,0,
        343,1157,1,0,0,0,344,345,5,66,0,0,345,348,5,226,0,0,346,347,5,102,
        0,0,347,349,5,77,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,350,1,0,
        0,0,350,352,3,246,123,0,351,353,7,0,0,0,352,351,1,0,0,0,352,353,
        1,0,0,0,353,1157,1,0,0,0,354,355,5,6,0,0,355,356,5,226,0,0,356,357,
        3,246,123,0,357,358,5,206,0,0,358,359,5,253,0,0,359,360,3,238,119,
        0,360,1157,1,0,0,0,361,362,5,6,0,0,362,363,5,226,0,0,363,364,3,246,
        123,0,364,365,5,234,0,0,365,366,5,14,0,0,366,367,3,234,117,0,367,
        1157,1,0,0,0,368,371,5,36,0,0,369,370,5,177,0,0,370,372,5,209,0,
        0,371,369,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,377,5,244,
        0,0,374,375,5,102,0,0,375,376,5,165,0,0,376,378,5,77,0,0,377,374,
        1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,381,3,262,131,0,380,
        382,3,96,48,0,381,380,1,0,0,0,381,382,1,0,0,0,382,385,1,0,0,0,383,
        384,5,29,0,0,384,386,3,146,73,0,385,383,1,0,0,0,385,386,1,0,0,0,
        386,389,1,0,0,0,387,388,5,288,0,0,388,390,3,24,12,0,389,387,1,0,
        0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,397,5,11,0,0,392,398,3,10,
        5,0,393,394,5,313,0,0,394,395,3,10,5,0,395,396,5,314,0,0,396,398,
        1,0,0,0,397,392,1,0,0,0,397,393,1,0,0,0,398,404,1,0,0,0,399,401,
        5,288,0,0,400,402,5,162,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,
        403,1,0,0,0,403,405,5,48,0,0,404,399,1,0,0,0,404,405,1,0,0,0,405,
        1157,1,0,0,0,406,409,5,36,0,0,407,408,5,177,0,0,408,410,5,209,0,
        0,409,407,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,415,5,244,
        0,0,412,413,5,102,0,0,413,414,5,165,0,0,414,416,5,77,0,0,415,412,
        1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,3,262,131,0,418,
        419,5,313,0,0,419,424,3,18,9,0,420,421,5,312,0,0,421,423,3,18,9,
        0,422,420,1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,
        0,425,427,1,0,0,0,426,424,1,0,0,0,427,430,5,314,0,0,428,429,5,29,
        0,0,429,431,3,146,73,0,430,428,1,0,0,0,430,431,1,0,0,0,431,434,1,
        0,0,0,432,433,5,288,0,0,433,435,3,24,12,0,434,432,1,0,0,0,434,435,
        1,0,0,0,435,1157,1,0,0,0,436,437,5,66,0,0,437,440,5,244,0,0,438,
        439,5,102,0,0,439,441,5,77,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,
        442,1,0,0,0,442,1157,3,252,126,0,443,1157,3,6,3,0,444,1157,3,8,4,
        0,445,446,5,56,0,0,446,447,5,88,0,0,447,450,3,252,126,0,448,449,
        5,285,0,0,449,451,3,116,58,0,450,448,1,0,0,0,450,451,1,0,0,0,451,
        1157,1,0,0,0,452,453,5,258,0,0,453,454,5,244,0,0,454,1157,3,252,
        126,0,455,456,5,29,0,0,456,457,5,173,0,0,457,458,5,244,0,0,458,459,
        3,252,126,0,459,462,5,116,0,0,460,463,3,146,73,0,461,463,5,166,0,
        0,462,460,1,0,0,0,462,461,1,0,0,0,463,1157,1,0,0,0,464,465,5,29,
        0,0,465,466,5,173,0,0,466,467,5,283,0,0,467,468,3,254,127,0,468,
        471,5,116,0,0,469,472,3,146,73,0,470,472,5,166,0,0,471,469,1,0,0,
        0,471,470,1,0,0,0,472,1157,1,0,0,0,473,474,5,29,0,0,474,475,5,173,
        0,0,475,476,5,27,0,0,476,477,3,226,113,0,477,480,5,116,0,0,478,481,
        3,146,73,0,479,481,5,166,0,0,480,478,1,0,0,0,480,479,1,0,0,0,481,
        1157,1,0,0,0,482,483,5,6,0,0,483,486,5,244,0,0,484,485,5,102,0,0,
        485,487,5,77,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,
        488,489,3,252,126,0,489,490,5,206,0,0,490,491,5,253,0,0,491,492,
        3,226,113,0,492,1157,1,0,0,0,493,494,5,6,0,0,494,497,5,244,0,0,495,
        496,5,102,0,0,496,498,5,77,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,
        499,1,0,0,0,499,500,3,252,126,0,500,501,5,2,0,0,501,505,5,27,0,0,
        502,503,5,102,0,0,503,504,5,165,0,0,504,506,5,77,0,0,505,502,1,0,
        0,0,505,506,1,0,0,0,506,507,1,0,0,0,507,508,3,20,10,0,508,1157,1,
        0,0,0,509,510,5,6,0,0,510,513,5,244,0,0,511,512,5,102,0,0,512,514,
        5,77,0,0,513,511,1,0,0,0,513,514,1,0,0,0,514,515,1,0,0,0,515,516,
        3,252,126,0,516,517,5,206,0,0,517,520,5,27,0,0,518,519,5,102,0,0,
        519,521,5,77,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,
        522,523,3,226,113,0,523,524,5,253,0,0,524,525,3,238,119,0,525,1157,
        1,0,0,0,526,527,5,6,0,0,527,530,5,244,0,0,528,529,5,102,0,0,529,
        531,5,77,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,0,532,
        533,3,252,126,0,533,534,5,66,0,0,534,537,5,27,0,0,535,536,5,102,
        0,0,536,538,5,77,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,539,1,0,
        0,0,539,540,3,226,113,0,540,1157,1,0,0,0,541,542,5,6,0,0,542,545,
        5,244,0,0,543,544,5,102,0,0,544,546,5,77,0,0,545,543,1,0,0,0,545,
        546,1,0,0,0,546,547,1,0,0,0,547,548,3,252,126,0,548,549,5,6,0,0,
        549,550,5,27,0,0,550,551,3,226,113,0,551,552,5,234,0,0,552,553,5,
        48,0,0,553,554,5,260,0,0,554,555,3,162,81,0,555,1157,1,0,0,0,556,
        557,5,6,0,0,557,558,5,244,0,0,558,559,3,252,126,0,559,560,5,234,
        0,0,560,561,5,14,0,0,561,562,3,234,117,0,562,1157,1,0,0,0,563,564,
        5,6,0,0,564,565,5,244,0,0,565,566,3,252,126,0,566,567,5,234,0,0,
        567,568,5,199,0,0,568,569,3,26,13,0,569,1157,1,0,0,0,570,571,5,6,
        0,0,571,572,5,244,0,0,572,573,3,252,126,0,573,574,5,76,0,0,574,587,
        3,238,119,0,575,584,5,313,0,0,576,581,3,196,98,0,577,578,5,312,0,
        0,578,580,3,196,98,0,579,577,1,0,0,0,580,583,1,0,0,0,581,579,1,0,
        0,0,581,582,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,584,576,1,0,
        0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,588,5,314,0,0,587,575,1,
        0,0,0,587,588,1,0,0,0,588,591,1,0,0,0,589,590,5,285,0,0,590,592,
        3,116,58,0,591,589,1,0,0,0,591,592,1,0,0,0,592,1157,1,0,0,0,593,
        594,5,7,0,0,594,597,3,252,126,0,595,596,5,288,0,0,596,598,3,24,12,
        0,597,595,1,0,0,0,597,598,1,0,0,0,598,1157,1,0,0,0,599,602,5,36,
        0,0,600,601,5,177,0,0,601,603,5,209,0,0,602,600,1,0,0,0,602,603,
        1,0,0,0,603,604,1,0,0,0,604,605,5,150,0,0,605,609,5,283,0,0,606,
        607,5,102,0,0,607,608,5,165,0,0,608,610,5,77,0,0,609,606,1,0,0,0,
        609,610,1,0,0,0,610,611,1,0,0,0,611,615,3,264,132,0,612,613,5,92,
        0,0,613,614,5,191,0,0,614,616,3,156,78,0,615,612,1,0,0,0,615,616,
        1,0,0,0,616,619,1,0,0,0,617,618,5,29,0,0,618,620,3,146,73,0,619,
        617,1,0,0,0,619,620,1,0,0,0,620,623,1,0,0,0,621,622,5,288,0,0,622,
        624,3,24,12,0,623,621,1,0,0,0,623,624,1,0,0,0,624,625,1,0,0,0,625,
        626,5,11,0,0,626,627,3,10,5,0,627,1157,1,0,0,0,628,631,5,36,0,0,
        629,630,5,177,0,0,630,632,5,209,0,0,631,629,1,0,0,0,631,632,1,0,
        0,0,632,633,1,0,0,0,633,634,5,283,0,0,634,637,3,264,132,0,635,636,
        5,29,0,0,636,638,3,146,73,0,637,635,1,0,0,0,637,638,1,0,0,0,638,
        641,1,0,0,0,639,640,5,229,0,0,640,642,7,1,0,0,641,639,1,0,0,0,641,
        642,1,0,0,0,642,643,1,0,0,0,643,644,5,11,0,0,644,645,3,10,5,0,645,
        1157,1,0,0,0,646,647,5,205,0,0,647,648,5,150,0,0,648,649,5,283,0,
        0,649,1157,3,254,127,0,650,651,5,66,0,0,651,652,5,150,0,0,652,655,
        5,283,0,0,653,654,5,102,0,0,654,656,5,77,0,0,655,653,1,0,0,0,655,
        656,1,0,0,0,656,657,1,0,0,0,657,1157,3,254,127,0,658,659,5,6,0,0,
        659,660,5,150,0,0,660,663,5,283,0,0,661,662,5,102,0,0,662,664,5,
        77,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,665,1,0,0,0,665,666,3,
        254,127,0,666,667,5,206,0,0,667,668,5,253,0,0,668,669,3,226,113,
        0,669,1157,1,0,0,0,670,671,5,6,0,0,671,672,5,150,0,0,672,673,5,283,
        0,0,673,674,3,254,127,0,674,675,5,234,0,0,675,676,5,199,0,0,676,
        677,3,26,13,0,677,1157,1,0,0,0,678,679,5,66,0,0,679,682,5,283,0,
        0,680,681,5,102,0,0,681,683,5,77,0,0,682,680,1,0,0,0,682,683,1,0,
        0,0,683,684,1,0,0,0,684,1157,3,254,127,0,685,686,5,6,0,0,686,687,
        5,283,0,0,687,688,3,254,127,0,688,689,5,206,0,0,689,690,5,253,0,
        0,690,691,3,226,113,0,691,1157,1,0,0,0,692,693,5,6,0,0,693,694,5,
        283,0,0,694,695,3,254,127,0,695,696,5,234,0,0,696,697,5,14,0,0,697,
        698,3,234,117,0,698,1157,1,0,0,0,699,700,5,20,0,0,700,701,3,226,
        113,0,701,710,5,313,0,0,702,707,3,196,98,0,703,704,5,312,0,0,704,
        706,3,196,98,0,705,703,1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,
        708,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,710,702,1,0,0,0,710,
        711,1,0,0,0,711,712,1,0,0,0,712,713,5,314,0,0,713,1157,1,0,0,0,714,
        717,5,36,0,0,715,716,5,177,0,0,716,718,5,209,0,0,717,715,1,0,0,0,
        717,718,1,0,0,0,718,719,1,0,0,0,719,1157,3,202,101,0,720,721,5,66,
        0,0,721,724,5,90,0,0,722,723,5,102,0,0,723,725,5,77,0,0,724,722,
        1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,1157,3,204,102,0,727,
        728,5,36,0,0,728,729,5,218,0,0,729,733,3,238,119,0,730,731,5,288,
        0,0,731,732,5,3,0,0,732,734,3,232,116,0,733,730,1,0,0,0,733,734,
        1,0,0,0,734,737,1,0,0,0,735,736,5,105,0,0,736,738,3,242,121,0,737,
        735,1,0,0,0,737,738,1,0,0,0,738,1157,1,0,0,0,739,740,5,66,0,0,740,
        741,5,218,0,0,741,744,3,266,133,0,742,743,5,105,0,0,743,745,3,242,
        121,0,744,742,1,0,0,0,744,745,1,0,0,0,745,1157,1,0,0,0,746,747,5,
        93,0,0,747,748,3,236,118,0,748,749,5,253,0,0,749,754,3,234,117,0,
        750,751,5,312,0,0,751,753,3,234,117,0,752,750,1,0,0,0,753,756,1,
        0,0,0,754,752,1,0,0,0,754,755,1,0,0,0,755,760,1,0,0,0,756,754,1,
        0,0,0,757,758,5,288,0,0,758,759,5,3,0,0,759,761,5,176,0,0,760,757,
        1,0,0,0,760,761,1,0,0,0,761,765,1,0,0,0,762,763,5,94,0,0,763,764,
        5,19,0,0,764,766,3,232,116,0,765,762,1,0,0,0,765,766,1,0,0,0,766,
        769,1,0,0,0,767,768,5,105,0,0,768,770,3,242,121,0,769,767,1,0,0,
        0,769,770,1,0,0,0,770,1157,1,0,0,0,771,775,5,216,0,0,772,773,5,3,
        0,0,773,774,5,176,0,0,774,776,5,86,0,0,775,772,1,0,0,0,775,776,1,
        0,0,0,776,777,1,0,0,0,777,778,3,236,118,0,778,779,5,88,0,0,779,784,
        3,234,117,0,780,781,5,312,0,0,781,783,3,234,117,0,782,780,1,0,0,
        0,783,786,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,790,1,0,0,
        0,786,784,1,0,0,0,787,788,5,94,0,0,788,789,5,19,0,0,789,791,3,232,
        116,0,790,787,1,0,0,0,790,791,1,0,0,0,791,794,1,0,0,0,792,793,5,
        105,0,0,793,795,3,242,121,0,794,792,1,0,0,0,794,795,1,0,0,0,795,
        1157,1,0,0,0,796,797,5,234,0,0,797,801,5,218,0,0,798,802,5,5,0,0,
        799,802,5,163,0,0,800,802,3,266,133,0,801,798,1,0,0,0,801,799,1,
        0,0,0,801,800,1,0,0,0,802,805,1,0,0,0,803,804,5,105,0,0,804,806,
        3,242,121,0,805,803,1,0,0,0,805,806,1,0,0,0,806,1157,1,0,0,0,807,
        818,5,93,0,0,808,813,3,224,112,0,809,810,5,312,0,0,810,812,3,224,
        112,0,811,809,1,0,0,0,812,815,1,0,0,0,813,811,1,0,0,0,813,814,1,
        0,0,0,814,819,1,0,0,0,815,813,1,0,0,0,816,817,5,5,0,0,817,819,5,
        198,0,0,818,808,1,0,0,0,818,816,1,0,0,0,819,820,1,0,0,0,820,829,
        5,173,0,0,821,823,5,226,0,0,822,821,1,0,0,0,822,823,1,0,0,0,823,
        824,1,0,0,0,824,830,3,246,123,0,825,827,5,244,0,0,826,825,1,0,0,
        0,826,827,1,0,0,0,827,828,1,0,0,0,828,830,3,252,126,0,829,822,1,
        0,0,0,829,826,1,0,0,0,830,831,1,0,0,0,831,832,5,253,0,0,832,836,
        3,234,117,0,833,834,5,288,0,0,834,835,5,93,0,0,835,837,5,176,0,0,
        836,833,1,0,0,0,836,837,1,0,0,0,837,1157,1,0,0,0,838,849,5,57,0,
        0,839,844,3,224,112,0,840,841,5,312,0,0,841,843,3,224,112,0,842,
        840,1,0,0,0,843,846,1,0,0,0,844,842,1,0,0,0,844,845,1,0,0,0,845,
        850,1,0,0,0,846,844,1,0,0,0,847,848,5,5,0,0,848,850,5,198,0,0,849,
        839,1,0,0,0,849,847,1,0,0,0,850,851,1,0,0,0,851,860,5,173,0,0,852,
        854,5,226,0,0,853,852,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,
        861,3,246,123,0,856,858,5,244,0,0,857,856,1,0,0,0,857,858,1,0,0,
        0,858,859,1,0,0,0,859,861,3,252,126,0,860,853,1,0,0,0,860,857,1,
        0,0,0,861,862,1,0,0,0,862,863,5,253,0,0,863,864,3,234,117,0,864,
        1157,1,0,0,0,865,869,5,216,0,0,866,867,5,93,0,0,867,868,5,176,0,
        0,868,870,5,86,0,0,869,866,1,0,0,0,869,870,1,0,0,0,870,881,1,0,0,
        0,871,876,3,224,112,0,872,873,5,312,0,0,873,875,3,224,112,0,874,
        872,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,
        882,1,0,0,0,878,876,1,0,0,0,879,880,5,5,0,0,880,882,5,198,0,0,881,
        871,1,0,0,0,881,879,1,0,0,0,882,883,1,0,0,0,883,892,5,173,0,0,884,
        886,5,226,0,0,885,884,1,0,0,0,885,886,1,0,0,0,886,887,1,0,0,0,887,
        893,3,246,123,0,888,890,5,244,0,0,889,888,1,0,0,0,889,890,1,0,0,
        0,890,891,1,0,0,0,891,893,3,252,126,0,892,885,1,0,0,0,892,889,1,
        0,0,0,893,894,1,0,0,0,894,895,5,88,0,0,895,896,3,234,117,0,896,1157,
        1,0,0,0,897,898,5,236,0,0,898,904,5,95,0,0,899,901,5,173,0,0,900,
        902,5,244,0,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,903,
        905,3,252,126,0,904,899,1,0,0,0,904,905,1,0,0,0,905,1157,1,0,0,0,
        906,918,5,78,0,0,907,908,5,313,0,0,908,913,3,190,95,0,909,910,5,
        312,0,0,910,912,3,190,95,0,911,909,1,0,0,0,912,915,1,0,0,0,913,911,
        1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,913,1,0,0,0,916,917,
        5,314,0,0,917,919,1,0,0,0,918,907,1,0,0,0,918,919,1,0,0,0,919,920,
        1,0,0,0,920,1157,3,4,2,0,921,922,5,78,0,0,922,924,5,7,0,0,923,925,
        5,281,0,0,924,923,1,0,0,0,924,925,1,0,0,0,925,926,1,0,0,0,926,1157,
        3,4,2,0,927,928,5,236,0,0,928,929,5,36,0,0,929,930,5,244,0,0,930,
        1157,3,252,126,0,931,932,5,236,0,0,932,933,5,36,0,0,933,934,5,226,
        0,0,934,1157,3,246,123,0,935,936,5,236,0,0,936,937,5,36,0,0,937,
        938,5,283,0,0,938,1157,3,254,127,0,939,940,5,236,0,0,940,941,5,36,
        0,0,941,942,5,150,0,0,942,943,5,283,0,0,943,1157,3,254,127,0,944,
        945,5,236,0,0,945,948,5,245,0,0,946,947,7,2,0,0,947,949,3,246,123,
        0,948,946,1,0,0,0,948,949,1,0,0,0,949,956,1,0,0,0,950,951,5,137,
        0,0,951,954,3,146,73,0,952,953,5,73,0,0,953,955,3,146,73,0,954,952,
        1,0,0,0,954,955,1,0,0,0,955,957,1,0,0,0,956,950,1,0,0,0,956,957,
        1,0,0,0,957,1157,1,0,0,0,958,959,5,236,0,0,959,962,5,227,0,0,960,
        961,7,2,0,0,961,963,3,242,121,0,962,960,1,0,0,0,962,963,1,0,0,0,
        963,970,1,0,0,0,964,965,5,137,0,0,965,968,3,146,73,0,966,967,5,73,
        0,0,967,969,3,146,73,0,968,966,1,0,0,0,968,969,1,0,0,0,969,971,1,
        0,0,0,970,964,1,0,0,0,970,971,1,0,0,0,971,1157,1,0,0,0,972,973,5,
        236,0,0,973,980,5,26,0,0,974,975,5,137,0,0,975,978,3,146,73,0,976,
        977,5,73,0,0,977,979,3,146,73,0,978,976,1,0,0,0,978,979,1,0,0,0,
        979,981,1,0,0,0,980,974,1,0,0,0,980,981,1,0,0,0,981,1157,1,0,0,0,
        982,983,5,236,0,0,983,984,5,28,0,0,984,986,7,2,0,0,985,987,3,252,
        126,0,986,985,1,0,0,0,986,987,1,0,0,0,987,994,1,0,0,0,988,989,5,
        137,0,0,989,992,3,146,73,0,990,991,5,73,0,0,991,993,3,146,73,0,992,
        990,1,0,0,0,992,993,1,0,0,0,993,995,1,0,0,0,994,988,1,0,0,0,994,
        995,1,0,0,0,995,1157,1,0,0,0,996,997,5,236,0,0,997,998,5,240,0,0,
        998,999,5,86,0,0,999,1157,3,252,126,0,1000,1001,5,236,0,0,1001,1002,
        5,240,0,0,1002,1003,5,86,0,0,1003,1004,5,313,0,0,1004,1005,3,10,
        5,0,1005,1006,5,314,0,0,1006,1157,1,0,0,0,1007,1009,5,236,0,0,1008,
        1010,5,39,0,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,
        0,0,1011,1014,5,219,0,0,1012,1013,7,2,0,0,1013,1015,3,242,121,0,
        1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,1157,1,0,0,0,1016,1017,
        5,236,0,0,1017,1018,5,218,0,0,1018,1021,5,95,0,0,1019,1020,7,2,0,
        0,1020,1022,3,242,121,0,1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,
        1157,1,0,0,0,1023,1024,5,59,0,0,1024,1157,3,252,126,0,1025,1026,
        5,58,0,0,1026,1157,3,252,126,0,1027,1028,5,236,0,0,1028,1031,5,91,
        0,0,1029,1030,7,2,0,0,1030,1032,3,246,123,0,1031,1029,1,0,0,0,1031,
        1032,1,0,0,0,1032,1039,1,0,0,0,1033,1034,5,137,0,0,1034,1037,3,146,
        73,0,1035,1036,5,73,0,0,1036,1038,3,146,73,0,1037,1035,1,0,0,0,1037,
        1038,1,0,0,0,1038,1040,1,0,0,0,1039,1033,1,0,0,0,1039,1040,1,0,0,
        0,1040,1157,1,0,0,0,1041,1042,5,236,0,0,1042,1049,5,233,0,0,1043,
        1044,5,137,0,0,1044,1047,3,146,73,0,1045,1046,5,73,0,0,1046,1048,
        3,146,73,0,1047,1045,1,0,0,0,1047,1048,1,0,0,0,1048,1050,1,0,0,0,
        1049,1043,1,0,0,0,1049,1050,1,0,0,0,1050,1157,1,0,0,0,1051,1052,
        5,234,0,0,1052,1053,5,233,0,0,1053,1054,5,14,0,0,1054,1157,3,272,
        136,0,1055,1056,5,210,0,0,1056,1057,5,233,0,0,1057,1157,5,14,0,0,
        1058,1059,5,234,0,0,1059,1060,5,233,0,0,1060,1061,3,226,113,0,1061,
        1062,5,296,0,0,1062,1063,3,114,57,0,1063,1157,1,0,0,0,1064,1065,
        5,210,0,0,1065,1066,5,233,0,0,1066,1157,3,226,113,0,1067,1068,5,
        239,0,0,1068,1077,5,255,0,0,1069,1074,3,192,96,0,1070,1071,5,312,
        0,0,1071,1073,3,192,96,0,1072,1070,1,0,0,0,1073,1076,1,0,0,0,1074,
        1072,1,0,0,0,1074,1075,1,0,0,0,1075,1078,1,0,0,0,1076,1074,1,0,0,
        0,1077,1069,1,0,0,0,1077,1078,1,0,0,0,1078,1157,1,0,0,0,1079,1081,
        5,30,0,0,1080,1082,5,291,0,0,1081,1080,1,0,0,0,1081,1082,1,0,0,0,
        1082,1157,1,0,0,0,1083,1085,5,220,0,0,1084,1086,5,291,0,0,1085,1084,
        1,0,0,0,1085,1086,1,0,0,0,1086,1157,1,0,0,0,1087,1088,5,197,0,0,
        1088,1089,3,238,119,0,1089,1090,5,88,0,0,1090,1091,3,4,2,0,1091,
        1157,1,0,0,0,1092,1093,5,51,0,0,1093,1094,5,197,0,0,1094,1157,3,
        238,119,0,1095,1096,5,76,0,0,1096,1106,3,238,119,0,1097,1098,5,274,
        0,0,1098,1103,3,114,57,0,1099,1100,5,312,0,0,1100,1102,3,114,57,
        0,1101,1099,1,0,0,0,1102,1105,1,0,0,0,1103,1101,1,0,0,0,1103,1104,
        1,0,0,0,1104,1107,1,0,0,0,1105,1103,1,0,0,0,1106,1097,1,0,0,0,1106,
        1107,1,0,0,0,1107,1157,1,0,0,0,1108,1109,5,76,0,0,1109,1110,5,104,
        0,0,1110,1120,3,146,73,0,1111,1112,5,274,0,0,1112,1117,3,114,57,
        0,1113,1114,5,312,0,0,1114,1116,3,114,57,0,1115,1113,1,0,0,0,1116,
        1119,1,0,0,0,1117,1115,1,0,0,0,1117,1118,1,0,0,0,1118,1121,1,0,0,
        0,1119,1117,1,0,0,0,1120,1111,1,0,0,0,1120,1121,1,0,0,0,1121,1157,
        1,0,0,0,1122,1123,5,59,0,0,1123,1124,5,109,0,0,1124,1157,3,238,119,
        0,1125,1126,5,59,0,0,1126,1127,5,181,0,0,1127,1157,3,238,119,0,1128,
        1129,5,234,0,0,1129,1130,5,188,0,0,1130,1157,3,200,100,0,1131,1132,
        5,234,0,0,1132,1133,5,251,0,0,1133,1136,5,295,0,0,1134,1137,5,140,
        0,0,1135,1137,3,114,57,0,1136,1134,1,0,0,0,1136,1135,1,0,0,0,1137,
        1157,1,0,0,0,1138,1139,5,152,0,0,1139,1140,5,113,0,0,1140,1145,3,
        252,126,0,1141,1143,5,11,0,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,
        1143,1144,1,0,0,0,1144,1146,3,258,129,0,1145,1142,1,0,0,0,1145,1146,
        1,0,0,0,1146,1147,1,0,0,0,1147,1148,5,274,0,0,1148,1149,3,64,32,
        0,1149,1150,5,173,0,0,1150,1152,3,114,57,0,1151,1153,3,172,86,0,
        1152,1151,1,0,0,0,1153,1154,1,0,0,0,1154,1152,1,0,0,0,1154,1155,
        1,0,0,0,1155,1157,1,0,0,0,1156,291,1,0,0,0,1156,292,1,0,0,0,1156,
        294,1,0,0,0,1156,296,1,0,0,0,1156,318,1,0,0,0,1156,328,1,0,0,0,1156,
        344,1,0,0,0,1156,354,1,0,0,0,1156,361,1,0,0,0,1156,368,1,0,0,0,1156,
        406,1,0,0,0,1156,436,1,0,0,0,1156,443,1,0,0,0,1156,444,1,0,0,0,1156,
        445,1,0,0,0,1156,452,1,0,0,0,1156,455,1,0,0,0,1156,464,1,0,0,0,1156,
        473,1,0,0,0,1156,482,1,0,0,0,1156,493,1,0,0,0,1156,509,1,0,0,0,1156,
        526,1,0,0,0,1156,541,1,0,0,0,1156,556,1,0,0,0,1156,563,1,0,0,0,1156,
        570,1,0,0,0,1156,593,1,0,0,0,1156,599,1,0,0,0,1156,628,1,0,0,0,1156,
        646,1,0,0,0,1156,650,1,0,0,0,1156,658,1,0,0,0,1156,670,1,0,0,0,1156,
        678,1,0,0,0,1156,685,1,0,0,0,1156,692,1,0,0,0,1156,699,1,0,0,0,1156,
        714,1,0,0,0,1156,720,1,0,0,0,1156,727,1,0,0,0,1156,739,1,0,0,0,1156,
        746,1,0,0,0,1156,771,1,0,0,0,1156,796,1,0,0,0,1156,807,1,0,0,0,1156,
        838,1,0,0,0,1156,865,1,0,0,0,1156,897,1,0,0,0,1156,906,1,0,0,0,1156,
        921,1,0,0,0,1156,927,1,0,0,0,1156,931,1,0,0,0,1156,935,1,0,0,0,1156,
        939,1,0,0,0,1156,944,1,0,0,0,1156,958,1,0,0,0,1156,972,1,0,0,0,1156,
        982,1,0,0,0,1156,996,1,0,0,0,1156,1000,1,0,0,0,1156,1007,1,0,0,0,
        1156,1016,1,0,0,0,1156,1023,1,0,0,0,1156,1025,1,0,0,0,1156,1027,
        1,0,0,0,1156,1041,1,0,0,0,1156,1051,1,0,0,0,1156,1055,1,0,0,0,1156,
        1058,1,0,0,0,1156,1064,1,0,0,0,1156,1067,1,0,0,0,1156,1079,1,0,0,
        0,1156,1083,1,0,0,0,1156,1087,1,0,0,0,1156,1092,1,0,0,0,1156,1095,
        1,0,0,0,1156,1108,1,0,0,0,1156,1122,1,0,0,0,1156,1125,1,0,0,0,1156,
        1128,1,0,0,0,1156,1131,1,0,0,0,1156,1138,1,0,0,0,1157,5,1,0,0,0,
        1158,1159,5,110,0,0,1159,1160,5,113,0,0,1160,1162,3,248,124,0,1161,
        1163,3,96,48,0,1162,1161,1,0,0,0,1162,1163,1,0,0,0,1163,1164,1,0,
        0,0,1164,1165,3,10,5,0,1165,7,1,0,0,0,1166,1167,5,271,0,0,1167,1168,
        3,248,124,0,1168,1169,5,234,0,0,1169,1174,3,188,94,0,1170,1171,5,
        312,0,0,1171,1173,3,188,94,0,1172,1170,1,0,0,0,1173,1176,1,0,0,0,
        1174,1172,1,0,0,0,1174,1175,1,0,0,0,1175,1179,1,0,0,0,1176,1174,
        1,0,0,0,1177,1178,5,285,0,0,1178,1180,3,116,58,0,1179,1177,1,0,0,
        0,1179,1180,1,0,0,0,1180,9,1,0,0,0,1181,1183,3,12,6,0,1182,1181,
        1,0,0,0,1182,1183,1,0,0,0,1183,1184,1,0,0,0,1184,1185,3,14,7,0,1185,
        11,1,0,0,0,1186,1187,5,288,0,0,1187,1192,3,202,101,0,1188,1189,5,
        312,0,0,1189,1191,3,202,101,0,1190,1188,1,0,0,0,1191,1194,1,0,0,
        0,1192,1190,1,0,0,0,1192,1193,1,0,0,0,1193,13,1,0,0,0,1194,1192,
        1,0,0,0,1195,1197,3,16,8,0,1196,1195,1,0,0,0,1196,1197,1,0,0,0,1197,
        1198,1,0,0,0,1198,1199,3,32,16,0,1199,15,1,0,0,0,1200,1202,5,288,
        0,0,1201,1203,5,204,0,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,
        1204,1,0,0,0,1204,1209,3,58,29,0,1205,1206,5,312,0,0,1206,1208,3,
        58,29,0,1207,1205,1,0,0,0,1208,1211,1,0,0,0,1209,1207,1,0,0,0,1209,
        1210,1,0,0,0,1210,17,1,0,0,0,1211,1209,1,0,0,0,1212,1215,3,20,10,
        0,1213,1215,3,22,11,0,1214,1212,1,0,0,0,1214,1213,1,0,0,0,1215,19,
        1,0,0,0,1216,1217,3,238,119,0,1217,1220,3,162,81,0,1218,1219,5,165,
        0,0,1219,1221,5,166,0,0,1220,1218,1,0,0,0,1220,1221,1,0,0,0,1221,
        1224,1,0,0,0,1222,1223,5,29,0,0,1223,1225,3,146,73,0,1224,1222,1,
        0,0,0,1224,1225,1,0,0,0,1225,1228,1,0,0,0,1226,1227,5,288,0,0,1227,
        1229,3,24,12,0,1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,21,1,0,0,
        0,1230,1231,5,137,0,0,1231,1234,3,226,113,0,1232,1233,7,3,0,0,1233,
        1235,5,199,0,0,1234,1232,1,0,0,0,1234,1235,1,0,0,0,1235,23,1,0,0,
        0,1236,1237,5,313,0,0,1237,1238,3,26,13,0,1238,1239,5,314,0,0,1239,
        25,1,0,0,0,1240,1245,3,28,14,0,1241,1242,5,312,0,0,1242,1244,3,28,
        14,0,1243,1241,1,0,0,0,1244,1247,1,0,0,0,1245,1243,1,0,0,0,1245,
        1246,1,0,0,0,1246,27,1,0,0,0,1247,1245,1,0,0,0,1248,1249,3,238,119,
        0,1249,1250,5,296,0,0,1250,1251,3,30,15,0,1251,29,1,0,0,0,1252,1255,
        5,53,0,0,1253,1255,3,114,57,0,1254,1252,1,0,0,0,1254,1253,1,0,0,
        0,1255,31,1,0,0,0,1256,1267,3,38,19,0,1257,1258,5,178,0,0,1258,1259,
        5,19,0,0,1259,1264,3,42,21,0,1260,1261,5,312,0,0,1261,1263,3,42,
        21,0,1262,1260,1,0,0,0,1263,1266,1,0,0,0,1264,1262,1,0,0,0,1264,
        1265,1,0,0,0,1265,1268,1,0,0,0,1266,1264,1,0,0,0,1267,1257,1,0,0,
        0,1267,1268,1,0,0,0,1268,1274,1,0,0,0,1269,1270,5,171,0,0,1270,1272,
        3,36,18,0,1271,1273,7,4,0,0,1272,1271,1,0,0,0,1272,1273,1,0,0,0,
        1273,1275,1,0,0,0,1274,1269,1,0,0,0,1274,1275,1,0,0,0,1275,1289,
        1,0,0,0,1276,1277,5,138,0,0,1277,1290,3,34,17,0,1278,1279,5,81,0,
        0,1279,1281,7,5,0,0,1280,1282,3,36,18,0,1281,1280,1,0,0,0,1281,1282,
        1,0,0,0,1282,1283,1,0,0,0,1283,1287,7,4,0,0,1284,1288,5,175,0,0,
        1285,1286,5,288,0,0,1286,1288,5,250,0,0,1287,1284,1,0,0,0,1287,1285,
        1,0,0,0,1288,1290,1,0,0,0,1289,1276,1,0,0,0,1289,1278,1,0,0,0,1289,
        1290,1,0,0,0,1290,33,1,0,0,0,1291,1294,5,5,0,0,1292,1294,3,36,18,
        0,1293,1291,1,0,0,0,1293,1292,1,0,0,0,1294,35,1,0,0,0,1295,1296,
        7,6,0,0,1296,37,1,0,0,0,1297,1298,6,19,-1,0,1298,1299,3,40,20,0,
        1299,1314,1,0,0,0,1300,1301,10,2,0,0,1301,1303,5,111,0,0,1302,1304,
        3,60,30,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,1305,1,0,0,0,
        1305,1313,3,38,19,3,1306,1307,10,1,0,0,1307,1309,7,7,0,0,1308,1310,
        3,60,30,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1311,1,0,0,0,
        1311,1313,3,38,19,2,1312,1300,1,0,0,0,1312,1306,1,0,0,0,1313,1316,
        1,0,0,0,1314,1312,1,0,0,0,1314,1315,1,0,0,0,1315,39,1,0,0,0,1316,
        1314,1,0,0,0,1317,1334,3,44,22,0,1318,1319,5,244,0,0,1319,1334,3,
        226,113,0,1320,1321,5,280,0,0,1321,1326,3,114,57,0,1322,1323,5,312,
        0,0,1323,1325,3,114,57,0,1324,1322,1,0,0,0,1325,1328,1,0,0,0,1326,
        1324,1,0,0,0,1326,1327,1,0,0,0,1327,1334,1,0,0,0,1328,1326,1,0,0,
        0,1329,1330,5,313,0,0,1330,1331,3,32,16,0,1331,1332,5,314,0,0,1332,
        1334,1,0,0,0,1333,1317,1,0,0,0,1333,1318,1,0,0,0,1333,1320,1,0,0,
        0,1333,1329,1,0,0,0,1334,41,1,0,0,0,1335,1337,3,114,57,0,1336,1338,
        7,8,0,0,1337,1336,1,0,0,0,1337,1338,1,0,0,0,1338,1341,1,0,0,0,1339,
        1340,5,168,0,0,1340,1342,7,9,0,0,1341,1339,1,0,0,0,1341,1342,1,0,
        0,0,1342,43,1,0,0,0,1343,1345,5,231,0,0,1344,1346,3,60,30,0,1345,
        1344,1,0,0,0,1345,1346,1,0,0,0,1346,1347,1,0,0,0,1347,1352,3,62,
        31,0,1348,1349,5,312,0,0,1349,1351,3,62,31,0,1350,1348,1,0,0,0,1351,
        1354,1,0,0,0,1352,1350,1,0,0,0,1352,1353,1,0,0,0,1353,1356,1,0,0,
        0,1354,1352,1,0,0,0,1355,1357,3,46,23,0,1356,1355,1,0,0,0,1356,1357,
        1,0,0,0,1357,1360,1,0,0,0,1358,1359,5,285,0,0,1359,1361,3,116,58,
        0,1360,1358,1,0,0,0,1360,1361,1,0,0,0,1361,1365,1,0,0,0,1362,1363,
        5,97,0,0,1363,1364,5,19,0,0,1364,1366,3,48,24,0,1365,1362,1,0,0,
        0,1365,1366,1,0,0,0,1366,1369,1,0,0,0,1367,1368,5,100,0,0,1368,1370,
        3,116,58,0,1369,1367,1,0,0,0,1369,1370,1,0,0,0,1370,1380,1,0,0,0,
        1371,1372,5,287,0,0,1372,1377,3,54,27,0,1373,1374,5,312,0,0,1374,
        1376,3,54,27,0,1375,1373,1,0,0,0,1376,1379,1,0,0,0,1377,1375,1,0,
        0,0,1377,1378,1,0,0,0,1378,1381,1,0,0,0,1379,1377,1,0,0,0,1380,1371,
        1,0,0,0,1380,1381,1,0,0,0,1381,45,1,0,0,0,1382,1383,5,88,0,0,1383,
        1388,3,64,32,0,1384,1385,5,312,0,0,1385,1387,3,64,32,0,1386,1384,
        1,0,0,0,1387,1390,1,0,0,0,1388,1386,1,0,0,0,1388,1389,1,0,0,0,1389,
        47,1,0,0,0,1390,1388,1,0,0,0,1391,1393,3,60,30,0,1392,1391,1,0,0,
        0,1392,1393,1,0,0,0,1393,1394,1,0,0,0,1394,1399,3,50,25,0,1395,1396,
        5,312,0,0,1396,1398,3,50,25,0,1397,1395,1,0,0,0,1398,1401,1,0,0,
        0,1399,1397,1,0,0,0,1399,1400,1,0,0,0,1400,49,1,0,0,0,1401,1399,
        1,0,0,0,1402,1443,3,52,26,0,1403,1404,5,221,0,0,1404,1413,5,313,
        0,0,1405,1410,3,114,57,0,1406,1407,5,312,0,0,1407,1409,3,114,57,
        0,1408,1406,1,0,0,0,1409,1412,1,0,0,0,1410,1408,1,0,0,0,1410,1411,
        1,0,0,0,1411,1414,1,0,0,0,1412,1410,1,0,0,0,1413,1405,1,0,0,0,1413,
        1414,1,0,0,0,1414,1415,1,0,0,0,1415,1443,5,314,0,0,1416,1417,5,38,
        0,0,1417,1426,5,313,0,0,1418,1423,3,114,57,0,1419,1420,5,312,0,0,
        1420,1422,3,114,57,0,1421,1419,1,0,0,0,1422,1425,1,0,0,0,1423,1421,
        1,0,0,0,1423,1424,1,0,0,0,1424,1427,1,0,0,0,1425,1423,1,0,0,0,1426,
        1418,1,0,0,0,1426,1427,1,0,0,0,1427,1428,1,0,0,0,1428,1443,5,314,
        0,0,1429,1430,5,98,0,0,1430,1431,5,235,0,0,1431,1432,5,313,0,0,1432,
        1437,3,52,26,0,1433,1434,5,312,0,0,1434,1436,3,52,26,0,1435,1433,
        1,0,0,0,1436,1439,1,0,0,0,1437,1435,1,0,0,0,1437,1438,1,0,0,0,1438,
        1440,1,0,0,0,1439,1437,1,0,0,0,1440,1441,5,314,0,0,1441,1443,1,0,
        0,0,1442,1402,1,0,0,0,1442,1403,1,0,0,0,1442,1416,1,0,0,0,1442,1429,
        1,0,0,0,1443,51,1,0,0,0,1444,1453,5,313,0,0,1445,1450,3,114,57,0,
        1446,1447,5,312,0,0,1447,1449,3,114,57,0,1448,1446,1,0,0,0,1449,
        1452,1,0,0,0,1450,1448,1,0,0,0,1450,1451,1,0,0,0,1451,1454,1,0,0,
        0,1452,1450,1,0,0,0,1453,1445,1,0,0,0,1453,1454,1,0,0,0,1454,1455,
        1,0,0,0,1455,1458,5,314,0,0,1456,1458,3,114,57,0,1457,1444,1,0,0,
        0,1457,1456,1,0,0,0,1458,53,1,0,0,0,1459,1460,3,238,119,0,1460,1461,
        5,11,0,0,1461,1462,5,313,0,0,1462,1463,3,56,28,0,1463,1464,5,314,
        0,0,1464,55,1,0,0,0,1465,1467,3,238,119,0,1466,1465,1,0,0,0,1466,
        1467,1,0,0,0,1467,1478,1,0,0,0,1468,1469,5,184,0,0,1469,1470,5,19,
        0,0,1470,1475,3,114,57,0,1471,1472,5,312,0,0,1472,1474,3,114,57,
        0,1473,1471,1,0,0,0,1474,1477,1,0,0,0,1475,1473,1,0,0,0,1475,1476,
        1,0,0,0,1476,1479,1,0,0,0,1477,1475,1,0,0,0,1478,1468,1,0,0,0,1478,
        1479,1,0,0,0,1479,1490,1,0,0,0,1480,1481,5,178,0,0,1481,1482,5,19,
        0,0,1482,1487,3,42,21,0,1483,1484,5,312,0,0,1484,1486,3,42,21,0,
        1485,1483,1,0,0,0,1486,1489,1,0,0,0,1487,1485,1,0,0,0,1487,1488,
        1,0,0,0,1488,1491,1,0,0,0,1489,1487,1,0,0,0,1490,1480,1,0,0,0,1490,
        1491,1,0,0,0,1491,1493,1,0,0,0,1492,1494,3,176,88,0,1493,1492,1,
        0,0,0,1493,1494,1,0,0,0,1494,57,1,0,0,0,1495,1497,3,238,119,0,1496,
        1498,3,96,48,0,1497,1496,1,0,0,0,1497,1498,1,0,0,0,1498,1499,1,0,
        0,0,1499,1500,5,11,0,0,1500,1501,5,313,0,0,1501,1502,3,14,7,0,1502,
        1503,5,314,0,0,1503,59,1,0,0,0,1504,1505,7,10,0,0,1505,61,1,0,0,
        0,1506,1522,5,304,0,0,1507,1512,3,114,57,0,1508,1510,5,11,0,0,1509,
        1508,1,0,0,0,1509,1510,1,0,0,0,1510,1511,1,0,0,0,1511,1513,3,258,
        129,0,1512,1509,1,0,0,0,1512,1513,1,0,0,0,1513,1522,1,0,0,0,1514,
        1515,3,122,61,0,1515,1516,5,310,0,0,1516,1519,5,304,0,0,1517,1518,
        5,11,0,0,1518,1520,3,96,48,0,1519,1517,1,0,0,0,1519,1520,1,0,0,0,
        1520,1522,1,0,0,0,1521,1506,1,0,0,0,1521,1507,1,0,0,0,1521,1514,
        1,0,0,0,1522,63,1,0,0,0,1523,1524,6,32,-1,0,1524,1525,3,70,35,0,
        1525,1544,1,0,0,0,1526,1540,10,2,0,0,1527,1528,5,37,0,0,1528,1529,
        5,119,0,0,1529,1541,3,70,35,0,1530,1531,3,66,33,0,1531,1532,5,119,
        0,0,1532,1533,3,64,32,0,1533,1534,3,68,34,0,1534,1541,1,0,0,0,1535,
        1536,5,155,0,0,1536,1537,3,66,33,0,1537,1538,5,119,0,0,1538,1539,
        3,70,35,0,1539,1541,1,0,0,0,1540,1527,1,0,0,0,1540,1530,1,0,0,0,
        1540,1535,1,0,0,0,1541,1543,1,0,0,0,1542,1526,1,0,0,0,1543,1546,
        1,0,0,0,1544,1542,1,0,0,0,1544,1545,1,0,0,0,1545,65,1,0,0,0,1546,
        1544,1,0,0,0,1547,1549,5,108,0,0,1548,1547,1,0,0,0,1548,1549,1,0,
        0,0,1549,1555,1,0,0,0,1550,1552,7,11,0,0,1551,1553,5,180,0,0,1552,
        1551,1,0,0,0,1552,1553,1,0,0,0,1553,1555,1,0,0,0,1554,1548,1,0,0,
        0,1554,1550,1,0,0,0,1555,67,1,0,0,0,1556,1557,5,173,0,0,1557,1571,
        3,116,58,0,1558,1559,5,274,0,0,1559,1560,5,313,0,0,1560,1565,3,252,
        126,0,1561,1562,5,312,0,0,1562,1564,3,252,126,0,1563,1561,1,0,0,
        0,1564,1567,1,0,0,0,1565,1563,1,0,0,0,1565,1566,1,0,0,0,1566,1568,
        1,0,0,0,1567,1565,1,0,0,0,1568,1569,5,314,0,0,1569,1571,1,0,0,0,
        1570,1556,1,0,0,0,1570,1558,1,0,0,0,1571,69,1,0,0,0,1572,1583,3,
        248,124,0,1573,1580,3,80,40,0,1574,1575,5,246,0,0,1575,1576,3,72,
        36,0,1576,1577,5,313,0,0,1577,1578,3,114,57,0,1578,1579,5,314,0,
        0,1579,1581,1,0,0,0,1580,1574,1,0,0,0,1580,1581,1,0,0,0,1581,1583,
        1,0,0,0,1582,1572,1,0,0,0,1582,1573,1,0,0,0,1583,71,1,0,0,0,1584,
        1585,7,12,0,0,1585,73,1,0,0,0,1586,1587,7,13,0,0,1587,75,1,0,0,0,
        1588,1595,5,72,0,0,1589,1591,5,258,0,0,1590,1592,3,146,73,0,1591,
        1590,1,0,0,0,1591,1592,1,0,0,0,1592,1593,1,0,0,0,1593,1595,3,78,
        39,0,1594,1588,1,0,0,0,1594,1589,1,0,0,0,1595,77,1,0,0,0,1596,1597,
        7,14,0,0,1597,1598,5,34,0,0,1598,79,1,0,0,0,1599,1682,3,94,47,0,
        1600,1601,5,149,0,0,1601,1612,5,313,0,0,1602,1603,5,184,0,0,1603,
        1604,5,19,0,0,1604,1609,3,114,57,0,1605,1606,5,312,0,0,1606,1608,
        3,114,57,0,1607,1605,1,0,0,0,1608,1611,1,0,0,0,1609,1607,1,0,0,0,
        1609,1610,1,0,0,0,1610,1613,1,0,0,0,1611,1609,1,0,0,0,1612,1602,
        1,0,0,0,1612,1613,1,0,0,0,1613,1624,1,0,0,0,1614,1615,5,178,0,0,
        1615,1616,5,19,0,0,1616,1621,3,42,21,0,1617,1618,5,312,0,0,1618,
        1620,3,42,21,0,1619,1617,1,0,0,0,1620,1623,1,0,0,0,1621,1619,1,0,
        0,0,1621,1622,1,0,0,0,1622,1625,1,0,0,0,1623,1621,1,0,0,0,1624,1614,
        1,0,0,0,1624,1625,1,0,0,0,1625,1635,1,0,0,0,1626,1627,5,151,0,0,
        1627,1632,3,82,41,0,1628,1629,5,312,0,0,1629,1631,3,82,41,0,1630,
        1628,1,0,0,0,1631,1634,1,0,0,0,1632,1630,1,0,0,0,1632,1633,1,0,0,
        0,1633,1636,1,0,0,0,1634,1632,1,0,0,0,1635,1626,1,0,0,0,1635,1636,
        1,0,0,0,1636,1638,1,0,0,0,1637,1639,3,84,42,0,1638,1637,1,0,0,0,
        1638,1639,1,0,0,0,1639,1643,1,0,0,0,1640,1641,5,4,0,0,1641,1642,
        5,146,0,0,1642,1644,3,88,44,0,1643,1640,1,0,0,0,1643,1644,1,0,0,
        0,1644,1646,1,0,0,0,1645,1647,7,15,0,0,1646,1645,1,0,0,0,1646,1647,
        1,0,0,0,1647,1648,1,0,0,0,1648,1649,5,189,0,0,1649,1650,5,313,0,
        0,1650,1651,3,182,91,0,1651,1661,5,314,0,0,1652,1653,5,241,0,0,1653,
        1658,3,90,45,0,1654,1655,5,312,0,0,1655,1657,3,90,45,0,1656,1654,
        1,0,0,0,1657,1660,1,0,0,0,1658,1656,1,0,0,0,1658,1659,1,0,0,0,1659,
        1662,1,0,0,0,1660,1658,1,0,0,0,1661,1652,1,0,0,0,1661,1662,1,0,0,
        0,1662,1663,1,0,0,0,1663,1664,5,54,0,0,1664,1669,3,92,46,0,1665,
        1666,5,312,0,0,1666,1668,3,92,46,0,1667,1665,1,0,0,0,1668,1671,1,
        0,0,0,1669,1667,1,0,0,0,1669,1670,1,0,0,0,1670,1672,1,0,0,0,1671,
        1669,1,0,0,0,1672,1680,5,314,0,0,1673,1675,5,11,0,0,1674,1673,1,
        0,0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1678,3,258,129,0,
        1677,1679,3,96,48,0,1678,1677,1,0,0,0,1678,1679,1,0,0,0,1679,1681,
        1,0,0,0,1680,1674,1,0,0,0,1680,1681,1,0,0,0,1681,1683,1,0,0,0,1682,
        1600,1,0,0,0,1682,1683,1,0,0,0,1683,81,1,0,0,0,1684,1685,3,114,57,
        0,1685,1686,5,11,0,0,1686,1687,3,258,129,0,1687,83,1,0,0,0,1688,
        1689,5,174,0,0,1689,1690,5,222,0,0,1690,1691,5,190,0,0,1691,1700,
        5,146,0,0,1692,1693,5,5,0,0,1693,1694,5,223,0,0,1694,1695,5,190,
        0,0,1695,1697,5,146,0,0,1696,1698,3,86,43,0,1697,1696,1,0,0,0,1697,
        1698,1,0,0,0,1698,1700,1,0,0,0,1699,1688,1,0,0,0,1699,1692,1,0,0,
        0,1700,85,1,0,0,0,1701,1702,5,236,0,0,1702,1703,5,68,0,0,1703,1711,
        5,148,0,0,1704,1705,5,172,0,0,1705,1706,5,68,0,0,1706,1711,5,148,
        0,0,1707,1708,5,288,0,0,1708,1709,5,268,0,0,1709,1711,5,223,0,0,
        1710,1701,1,0,0,0,1710,1704,1,0,0,0,1710,1707,1,0,0,0,1711,87,1,
        0,0,0,1712,1725,5,237,0,0,1713,1720,5,253,0,0,1714,1715,5,157,0,
        0,1715,1721,5,222,0,0,1716,1718,7,9,0,0,1717,1716,1,0,0,0,1717,1718,
        1,0,0,0,1718,1719,1,0,0,0,1719,1721,3,238,119,0,1720,1714,1,0,0,
        0,1720,1717,1,0,0,0,1721,1726,1,0,0,0,1722,1723,5,187,0,0,1723,1724,
        5,131,0,0,1724,1726,5,222,0,0,1725,1713,1,0,0,0,1725,1722,1,0,0,
        0,1726,89,1,0,0,0,1727,1728,3,238,119,0,1728,1729,5,296,0,0,1729,
        1730,5,313,0,0,1730,1735,3,238,119,0,1731,1732,5,312,0,0,1732,1734,
        3,238,119,0,1733,1731,1,0,0,0,1734,1737,1,0,0,0,1735,1733,1,0,0,
        0,1735,1736,1,0,0,0,1736,1738,1,0,0,0,1737,1735,1,0,0,0,1738,1739,
        5,314,0,0,1739,91,1,0,0,0,1740,1741,3,238,119,0,1741,1742,5,11,0,
        0,1742,1743,3,258,129,0,1743,93,1,0,0,0,1744,1752,3,98,49,0,1745,
        1747,5,11,0,0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,1748,1,0,
        0,0,1748,1750,3,258,129,0,1749,1751,3,96,48,0,1750,1749,1,0,0,0,
        1750,1751,1,0,0,0,1751,1753,1,0,0,0,1752,1746,1,0,0,0,1752,1753,
        1,0,0,0,1753,95,1,0,0,0,1754,1755,5,313,0,0,1755,1760,3,256,128,
        0,1756,1757,5,312,0,0,1757,1759,3,256,128,0,1758,1756,1,0,0,0,1759,
        1762,1,0,0,0,1760,1758,1,0,0,0,1760,1761,1,0,0,0,1761,1763,1,0,0,
        0,1762,1760,1,0,0,0,1763,1764,5,314,0,0,1764,97,1,0,0,0,1765,1767,
        3,252,126,0,1766,1768,3,228,114,0,1767,1766,1,0,0,0,1767,1768,1,
        0,0,0,1768,1803,1,0,0,0,1769,1770,5,313,0,0,1770,1771,3,14,7,0,1771,
        1772,5,314,0,0,1772,1803,1,0,0,0,1773,1774,5,269,0,0,1774,1775,5,
        313,0,0,1775,1780,3,114,57,0,1776,1777,5,312,0,0,1777,1779,3,114,
        57,0,1778,1776,1,0,0,0,1779,1782,1,0,0,0,1780,1778,1,0,0,0,1780,
        1781,1,0,0,0,1781,1783,1,0,0,0,1782,1780,1,0,0,0,1783,1786,5,314,
        0,0,1784,1785,5,288,0,0,1785,1787,5,179,0,0,1786,1784,1,0,0,0,1786,
        1787,1,0,0,0,1787,1803,1,0,0,0,1788,1789,5,132,0,0,1789,1790,5,313,
        0,0,1790,1791,3,14,7,0,1791,1792,5,314,0,0,1792,1803,1,0,0,0,1793,
        1794,5,244,0,0,1794,1795,5,313,0,0,1795,1796,3,100,50,0,1796,1797,
        5,314,0,0,1797,1803,1,0,0,0,1798,1799,5,313,0,0,1799,1800,3,64,32,
        0,1800,1801,5,314,0,0,1801,1803,1,0,0,0,1802,1765,1,0,0,0,1802,1769,
        1,0,0,0,1802,1773,1,0,0,0,1802,1788,1,0,0,0,1802,1793,1,0,0,0,1802,
        1798,1,0,0,0,1803,99,1,0,0,0,1804,1805,3,226,113,0,1805,1814,5,313,
        0,0,1806,1811,3,102,51,0,1807,1808,5,312,0,0,1808,1810,3,102,51,
        0,1809,1807,1,0,0,0,1810,1813,1,0,0,0,1811,1809,1,0,0,0,1811,1812,
        1,0,0,0,1812,1815,1,0,0,0,1813,1811,1,0,0,0,1814,1806,1,0,0,0,1814,
        1815,1,0,0,0,1815,1825,1,0,0,0,1816,1817,5,35,0,0,1817,1822,3,112,
        56,0,1818,1819,5,312,0,0,1819,1821,3,112,56,0,1820,1818,1,0,0,0,
        1821,1824,1,0,0,0,1822,1820,1,0,0,0,1822,1823,1,0,0,0,1823,1826,
        1,0,0,0,1824,1822,1,0,0,0,1825,1816,1,0,0,0,1825,1826,1,0,0,0,1826,
        1827,1,0,0,0,1827,1828,5,314,0,0,1828,101,1,0,0,0,1829,1830,3,238,
        119,0,1830,1831,5,323,0,0,1831,1833,1,0,0,0,1832,1829,1,0,0,0,1832,
        1833,1,0,0,0,1833,1837,1,0,0,0,1834,1838,3,104,52,0,1835,1838,3,
        108,54,0,1836,1838,3,114,57,0,1837,1834,1,0,0,0,1837,1835,1,0,0,
        0,1837,1836,1,0,0,0,1838,103,1,0,0,0,1839,1857,3,106,53,0,1840,1841,
        5,184,0,0,1841,1855,5,19,0,0,1842,1851,5,313,0,0,1843,1848,3,114,
        57,0,1844,1845,5,312,0,0,1845,1847,3,114,57,0,1846,1844,1,0,0,0,
        1847,1850,1,0,0,0,1848,1846,1,0,0,0,1848,1849,1,0,0,0,1849,1852,
        1,0,0,0,1850,1848,1,0,0,0,1851,1843,1,0,0,0,1851,1852,1,0,0,0,1852,
        1853,1,0,0,0,1853,1856,5,314,0,0,1854,1856,3,114,57,0,1855,1842,
        1,0,0,0,1855,1854,1,0,0,0,1856,1858,1,0,0,0,1857,1840,1,0,0,0,1857,
        1858,1,0,0,0,1858,1865,1,0,0,0,1859,1860,5,200,0,0,1860,1861,5,284,
        0,0,1861,1866,5,68,0,0,1862,1863,5,127,0,0,1863,1864,5,284,0,0,1864,
        1866,5,68,0,0,1865,1859,1,0,0,0,1865,1862,1,0,0,0,1865,1866,1,0,
        0,0,1866,1883,1,0,0,0,1867,1868,5,178,0,0,1868,1881,5,19,0,0,1869,
        1870,5,313,0,0,1870,1875,3,42,21,0,1871,1872,5,312,0,0,1872,1874,
        3,42,21,0,1873,1871,1,0,0,0,1874,1877,1,0,0,0,1875,1873,1,0,0,0,
        1875,1876,1,0,0,0,1876,1878,1,0,0,0,1877,1875,1,0,0,0,1878,1879,
        5,314,0,0,1879,1882,1,0,0,0,1880,1882,3,42,21,0,1881,1869,1,0,0,
        0,1881,1880,1,0,0,0,1882,1884,1,0,0,0,1883,1867,1,0,0,0,1883,1884,
        1,0,0,0,1884,105,1,0,0,0,1885,1886,5,244,0,0,1886,1887,5,313,0,0,
        1887,1888,3,252,126,0,1888,1896,5,314,0,0,1889,1891,5,11,0,0,1890,
        1889,1,0,0,0,1890,1891,1,0,0,0,1891,1892,1,0,0,0,1892,1894,3,258,
        129,0,1893,1895,3,96,48,0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,
        1897,1,0,0,0,1896,1890,1,0,0,0,1896,1897,1,0,0,0,1897,1912,1,0,0,
        0,1898,1899,5,244,0,0,1899,1900,5,313,0,0,1900,1901,3,14,7,0,1901,
        1909,5,314,0,0,1902,1904,5,11,0,0,1903,1902,1,0,0,0,1903,1904,1,
        0,0,0,1904,1905,1,0,0,0,1905,1907,3,258,129,0,1906,1908,3,96,48,
        0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,1910,1,0,0,0,1909,1903,
        1,0,0,0,1909,1910,1,0,0,0,1910,1912,1,0,0,0,1911,1885,1,0,0,0,1911,
        1898,1,0,0,0,1912,107,1,0,0,0,1913,1914,5,60,0,0,1914,1915,5,313,
        0,0,1915,1920,3,110,55,0,1916,1917,5,312,0,0,1917,1919,3,110,55,
        0,1918,1916,1,0,0,0,1919,1922,1,0,0,0,1920,1918,1,0,0,0,1920,1921,
        1,0,0,0,1921,1923,1,0,0,0,1922,1920,1,0,0,0,1923,1924,5,314,0,0,
        1924,1932,1,0,0,0,1925,1926,5,24,0,0,1926,1927,5,313,0,0,1927,1928,
        5,166,0,0,1928,1929,5,11,0,0,1929,1930,5,60,0,0,1930,1932,5,314,
        0,0,1931,1913,1,0,0,0,1931,1925,1,0,0,0,1932,109,1,0,0,0,1933,1935,
        3,238,119,0,1934,1936,3,162,81,0,1935,1934,1,0,0,0,1935,1936,1,0,
        0,0,1936,111,1,0,0,0,1937,1938,5,313,0,0,1938,1939,3,226,113,0,1939,
        1940,5,312,0,0,1940,1945,3,226,113,0,1941,1942,5,312,0,0,1942,1944,
        3,226,113,0,1943,1941,1,0,0,0,1944,1947,1,0,0,0,1945,1943,1,0,0,
        0,1945,1946,1,0,0,0,1946,1948,1,0,0,0,1947,1945,1,0,0,0,1948,1949,
        5,314,0,0,1949,113,1,0,0,0,1950,1951,3,116,58,0,1951,115,1,0,0,0,
        1952,1953,6,58,-1,0,1953,1955,3,120,60,0,1954,1956,3,118,59,0,1955,
        1954,1,0,0,0,1955,1956,1,0,0,0,1956,1960,1,0,0,0,1957,1958,5,165,
        0,0,1958,1960,3,116,58,3,1959,1952,1,0,0,0,1959,1957,1,0,0,0,1960,
        1969,1,0,0,0,1961,1962,10,2,0,0,1962,1963,5,8,0,0,1963,1968,3,116,
        58,3,1964,1965,10,1,0,0,1965,1966,5,177,0,0,1966,1968,3,116,58,2,
        1967,1961,1,0,0,0,1967,1964,1,0,0,0,1968,1971,1,0,0,0,1969,1967,
        1,0,0,0,1969,1970,1,0,0,0,1970,117,1,0,0,0,1971,1969,1,0,0,0,1972,
        1973,3,150,75,0,1973,1974,3,120,60,0,1974,2034,1,0,0,0,1975,1976,
        3,150,75,0,1976,1977,3,152,76,0,1977,1978,5,313,0,0,1978,1979,3,
        14,7,0,1979,1980,5,314,0,0,1980,2034,1,0,0,0,1981,1983,5,165,0,0,
        1982,1981,1,0,0,0,1982,1983,1,0,0,0,1983,1984,1,0,0,0,1984,1985,
        5,17,0,0,1985,1986,3,120,60,0,1986,1987,5,8,0,0,1987,1988,3,120,
        60,0,1988,2034,1,0,0,0,1989,1991,5,165,0,0,1990,1989,1,0,0,0,1990,
        1991,1,0,0,0,1991,1992,1,0,0,0,1992,1993,5,105,0,0,1993,1994,5,313,
        0,0,1994,1999,3,114,57,0,1995,1996,5,312,0,0,1996,1998,3,114,57,
        0,1997,1995,1,0,0,0,1998,2001,1,0,0,0,1999,1997,1,0,0,0,1999,2000,
        1,0,0,0,2000,2002,1,0,0,0,2001,1999,1,0,0,0,2002,2003,5,314,0,0,
        2003,2034,1,0,0,0,2004,2006,5,165,0,0,2005,2004,1,0,0,0,2005,2006,
        1,0,0,0,2006,2007,1,0,0,0,2007,2008,5,105,0,0,2008,2009,5,313,0,
        0,2009,2010,3,14,7,0,2010,2011,5,314,0,0,2011,2034,1,0,0,0,2012,
        2014,5,165,0,0,2013,2012,1,0,0,0,2013,2014,1,0,0,0,2014,2015,1,0,
        0,0,2015,2016,5,137,0,0,2016,2019,3,120,60,0,2017,2018,5,73,0,0,
        2018,2020,3,120,60,0,2019,2017,1,0,0,0,2019,2020,1,0,0,0,2020,2034,
        1,0,0,0,2021,2023,5,116,0,0,2022,2024,5,165,0,0,2023,2022,1,0,0,
        0,2023,2024,1,0,0,0,2024,2025,1,0,0,0,2025,2034,5,166,0,0,2026,2028,
        5,116,0,0,2027,2029,5,165,0,0,2028,2027,1,0,0,0,2028,2029,1,0,0,
        0,2029,2030,1,0,0,0,2030,2031,5,62,0,0,2031,2032,5,88,0,0,2032,2034,
        3,120,60,0,2033,1972,1,0,0,0,2033,1975,1,0,0,0,2033,1982,1,0,0,0,
        2033,1990,1,0,0,0,2033,2005,1,0,0,0,2033,2013,1,0,0,0,2033,2021,
        1,0,0,0,2033,2026,1,0,0,0,2034,119,1,0,0,0,2035,2036,6,60,-1,0,2036,
        2040,3,122,61,0,2037,2038,7,16,0,0,2038,2040,3,120,60,4,2039,2035,
        1,0,0,0,2039,2037,1,0,0,0,2040,2055,1,0,0,0,2041,2042,10,3,0,0,2042,
        2043,7,17,0,0,2043,2054,3,120,60,4,2044,2045,10,2,0,0,2045,2046,
        7,16,0,0,2046,2054,3,120,60,3,2047,2048,10,1,0,0,2048,2049,5,307,
        0,0,2049,2054,3,120,60,2,2050,2051,10,5,0,0,2051,2052,5,13,0,0,2052,
        2054,3,148,74,0,2053,2041,1,0,0,0,2053,2044,1,0,0,0,2053,2047,1,
        0,0,0,2053,2050,1,0,0,0,2054,2057,1,0,0,0,2055,2053,1,0,0,0,2055,
        2056,1,0,0,0,2056,121,1,0,0,0,2057,2055,1,0,0,0,2058,2059,6,61,-1,
        0,2059,2512,5,166,0,0,2060,2512,3,156,78,0,2061,2062,3,238,119,0,
        2062,2063,3,146,73,0,2063,2512,1,0,0,0,2064,2065,5,65,0,0,2065,2066,
        5,196,0,0,2066,2512,3,146,73,0,2067,2512,3,270,135,0,2068,2512,3,
        154,77,0,2069,2512,3,146,73,0,2070,2512,5,329,0,0,2071,2512,5,308,
        0,0,2072,2073,5,194,0,0,2073,2074,5,313,0,0,2074,2075,3,120,60,0,
        2075,2076,5,105,0,0,2076,2077,3,120,60,0,2077,2078,5,314,0,0,2078,
        2512,1,0,0,0,2079,2080,5,313,0,0,2080,2083,3,114,57,0,2081,2082,
        5,312,0,0,2082,2084,3,114,57,0,2083,2081,1,0,0,0,2084,2085,1,0,0,
        0,2085,2083,1,0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,0,0,2087,2088,
        5,314,0,0,2088,2512,1,0,0,0,2089,2090,5,222,0,0,2090,2091,5,313,
        0,0,2091,2096,3,114,57,0,2092,2093,5,312,0,0,2093,2095,3,114,57,
        0,2094,2092,1,0,0,0,2095,2098,1,0,0,0,2096,2094,1,0,0,0,2096,2097,
        1,0,0,0,2097,2099,1,0,0,0,2098,2096,1,0,0,0,2099,2100,5,314,0,0,
        2100,2512,1,0,0,0,2101,2102,5,139,0,0,2102,2104,5,313,0,0,2103,2105,
        3,60,30,0,2104,2103,1,0,0,0,2104,2105,1,0,0,0,2105,2106,1,0,0,0,
        2106,2109,3,114,57,0,2107,2108,5,312,0,0,2108,2110,3,146,73,0,2109,
        2107,1,0,0,0,2109,2110,1,0,0,0,2110,2114,1,0,0,0,2111,2112,5,173,
        0,0,2112,2113,5,183,0,0,2113,2115,3,76,38,0,2114,2111,1,0,0,0,2114,
        2115,1,0,0,0,2115,2116,1,0,0,0,2116,2117,5,314,0,0,2117,2118,5,289,
        0,0,2118,2119,5,97,0,0,2119,2120,5,313,0,0,2120,2121,5,178,0,0,2121,
        2122,5,19,0,0,2122,2127,3,42,21,0,2123,2124,5,312,0,0,2124,2126,
        3,42,21,0,2125,2123,1,0,0,0,2126,2129,1,0,0,0,2127,2125,1,0,0,0,
        2127,2128,1,0,0,0,2128,2130,1,0,0,0,2129,2127,1,0,0,0,2130,2131,
        5,314,0,0,2131,2133,1,0,0,0,2132,2134,3,170,85,0,2133,2132,1,0,0,
        0,2133,2134,1,0,0,0,2134,2512,1,0,0,0,2135,2137,3,142,71,0,2136,
        2135,1,0,0,0,2136,2137,1,0,0,0,2137,2138,1,0,0,0,2138,2139,3,226,
        113,0,2139,2143,5,313,0,0,2140,2141,3,238,119,0,2141,2142,5,310,
        0,0,2142,2144,1,0,0,0,2143,2140,1,0,0,0,2143,2144,1,0,0,0,2144,2145,
        1,0,0,0,2145,2146,5,304,0,0,2146,2148,5,314,0,0,2147,2149,3,170,
        85,0,2148,2147,1,0,0,0,2148,2149,1,0,0,0,2149,2151,1,0,0,0,2150,
        2152,3,174,87,0,2151,2150,1,0,0,0,2151,2152,1,0,0,0,2152,2512,1,
        0,0,0,2153,2155,3,142,71,0,2154,2153,1,0,0,0,2154,2155,1,0,0,0,2155,
        2156,1,0,0,0,2156,2157,3,226,113,0,2157,2169,5,313,0,0,2158,2160,
        3,60,30,0,2159,2158,1,0,0,0,2159,2160,1,0,0,0,2160,2161,1,0,0,0,
        2161,2166,3,114,57,0,2162,2163,5,312,0,0,2163,2165,3,114,57,0,2164,
        2162,1,0,0,0,2165,2168,1,0,0,0,2166,2164,1,0,0,0,2166,2167,1,0,0,
        0,2167,2170,1,0,0,0,2168,2166,1,0,0,0,2169,2159,1,0,0,0,2169,2170,
        1,0,0,0,2170,2181,1,0,0,0,2171,2172,5,178,0,0,2172,2173,5,19,0,0,
        2173,2178,3,42,21,0,2174,2175,5,312,0,0,2175,2177,3,42,21,0,2176,
        2174,1,0,0,0,2177,2180,1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,
        0,2179,2182,1,0,0,0,2180,2178,1,0,0,0,2181,2171,1,0,0,0,2181,2182,
        1,0,0,0,2182,2183,1,0,0,0,2183,2185,5,314,0,0,2184,2186,3,170,85,
        0,2185,2184,1,0,0,0,2185,2186,1,0,0,0,2186,2191,1,0,0,0,2187,2189,
        3,144,72,0,2188,2187,1,0,0,0,2188,2189,1,0,0,0,2189,2190,1,0,0,0,
        2190,2192,3,174,87,0,2191,2188,1,0,0,0,2191,2192,1,0,0,0,2192,2512,
        1,0,0,0,2193,2194,3,238,119,0,2194,2195,3,174,87,0,2195,2512,1,0,
        0,0,2196,2197,3,238,119,0,2197,2198,5,322,0,0,2198,2199,3,114,57,
        0,2199,2512,1,0,0,0,2200,2209,5,313,0,0,2201,2206,3,238,119,0,2202,
        2203,5,312,0,0,2203,2205,3,238,119,0,2204,2202,1,0,0,0,2205,2208,
        1,0,0,0,2206,2204,1,0,0,0,2206,2207,1,0,0,0,2207,2210,1,0,0,0,2208,
        2206,1,0,0,0,2209,2201,1,0,0,0,2209,2210,1,0,0,0,2210,2211,1,0,0,
        0,2211,2212,5,314,0,0,2212,2213,5,322,0,0,2213,2512,3,114,57,0,2214,
        2215,5,313,0,0,2215,2216,3,14,7,0,2216,2217,5,314,0,0,2217,2512,
        1,0,0,0,2218,2219,5,77,0,0,2219,2220,5,313,0,0,2220,2221,3,14,7,
        0,2221,2222,5,314,0,0,2222,2512,1,0,0,0,2223,2224,5,23,0,0,2224,
        2226,3,114,57,0,2225,2227,3,168,84,0,2226,2225,1,0,0,0,2227,2228,
        1,0,0,0,2228,2226,1,0,0,0,2228,2229,1,0,0,0,2229,2232,1,0,0,0,2230,
        2231,5,67,0,0,2231,2233,3,114,57,0,2232,2230,1,0,0,0,2232,2233,1,
        0,0,0,2233,2234,1,0,0,0,2234,2235,5,71,0,0,2235,2512,1,0,0,0,2236,
        2238,5,23,0,0,2237,2239,3,168,84,0,2238,2237,1,0,0,0,2239,2240,1,
        0,0,0,2240,2238,1,0,0,0,2240,2241,1,0,0,0,2241,2244,1,0,0,0,2242,
        2243,5,67,0,0,2243,2245,3,114,57,0,2244,2242,1,0,0,0,2244,2245,1,
        0,0,0,2245,2246,1,0,0,0,2246,2247,5,71,0,0,2247,2512,1,0,0,0,2248,
        2249,5,24,0,0,2249,2250,5,313,0,0,2250,2251,3,114,57,0,2251,2252,
        5,11,0,0,2252,2253,3,162,81,0,2253,2254,5,314,0,0,2254,2512,1,0,
        0,0,2255,2256,5,259,0,0,2256,2257,5,313,0,0,2257,2258,3,114,57,0,
        2258,2259,5,11,0,0,2259,2260,3,162,81,0,2260,2261,5,314,0,0,2261,
        2512,1,0,0,0,2262,2263,5,10,0,0,2263,2272,5,315,0,0,2264,2269,3,
        114,57,0,2265,2266,5,312,0,0,2266,2268,3,114,57,0,2267,2265,1,0,
        0,0,2268,2271,1,0,0,0,2269,2267,1,0,0,0,2269,2270,1,0,0,0,2270,2273,
        1,0,0,0,2271,2269,1,0,0,0,2272,2264,1,0,0,0,2272,2273,1,0,0,0,2273,
        2274,1,0,0,0,2274,2512,5,316,0,0,2275,2512,3,256,128,0,2276,2512,
        5,41,0,0,2277,2281,5,45,0,0,2278,2279,5,313,0,0,2279,2280,5,330,
        0,0,2280,2282,5,314,0,0,2281,2278,1,0,0,0,2281,2282,1,0,0,0,2282,
        2512,1,0,0,0,2283,2287,5,46,0,0,2284,2285,5,313,0,0,2285,2286,5,
        330,0,0,2286,2288,5,314,0,0,2287,2284,1,0,0,0,2287,2288,1,0,0,0,
        2288,2512,1,0,0,0,2289,2293,5,141,0,0,2290,2291,5,313,0,0,2291,2292,
        5,330,0,0,2292,2294,5,314,0,0,2293,2290,1,0,0,0,2293,2294,1,0,0,
        0,2294,2512,1,0,0,0,2295,2299,5,142,0,0,2296,2297,5,313,0,0,2297,
        2298,5,330,0,0,2298,2300,5,314,0,0,2299,2296,1,0,0,0,2299,2300,1,
        0,0,0,2300,2512,1,0,0,0,2301,2512,5,47,0,0,2302,2512,5,40,0,0,2303,
        2512,5,44,0,0,2304,2512,5,42,0,0,2305,2306,5,256,0,0,2306,2314,5,
        313,0,0,2307,2309,3,74,37,0,2308,2307,1,0,0,0,2308,2309,1,0,0,0,
        2309,2311,1,0,0,0,2310,2312,3,120,60,0,2311,2310,1,0,0,0,2311,2312,
        1,0,0,0,2312,2313,1,0,0,0,2313,2315,5,88,0,0,2314,2308,1,0,0,0,2314,
        2315,1,0,0,0,2315,2316,1,0,0,0,2316,2317,3,120,60,0,2317,2318,5,
        314,0,0,2318,2512,1,0,0,0,2319,2320,5,256,0,0,2320,2321,5,313,0,
        0,2321,2322,3,120,60,0,2322,2323,5,312,0,0,2323,2324,3,120,60,0,
        2324,2325,5,314,0,0,2325,2512,1,0,0,0,2326,2327,5,242,0,0,2327,2328,
        5,313,0,0,2328,2329,3,120,60,0,2329,2330,5,88,0,0,2330,2333,3,120,
        60,0,2331,2332,5,86,0,0,2332,2334,3,120,60,0,2333,2331,1,0,0,0,2333,
        2334,1,0,0,0,2334,2335,1,0,0,0,2335,2336,5,314,0,0,2336,2512,1,0,
        0,0,2337,2338,5,164,0,0,2338,2339,5,313,0,0,2339,2342,3,120,60,0,
        2340,2341,5,312,0,0,2341,2343,3,160,80,0,2342,2340,1,0,0,0,2342,
        2343,1,0,0,0,2343,2344,1,0,0,0,2344,2345,5,314,0,0,2345,2512,1,0,
        0,0,2346,2347,5,79,0,0,2347,2348,5,313,0,0,2348,2349,3,238,119,0,
        2349,2350,5,88,0,0,2350,2351,3,120,60,0,2351,2352,5,314,0,0,2352,
        2512,1,0,0,0,2353,2354,5,313,0,0,2354,2355,3,114,57,0,2355,2356,
        5,314,0,0,2356,2512,1,0,0,0,2357,2358,5,98,0,0,2358,2367,5,313,0,
        0,2359,2364,3,226,113,0,2360,2361,5,312,0,0,2361,2363,3,226,113,
        0,2362,2360,1,0,0,0,2363,2366,1,0,0,0,2364,2362,1,0,0,0,2364,2365,
        1,0,0,0,2365,2368,1,0,0,0,2366,2364,1,0,0,0,2367,2359,1,0,0,0,2367,
        2368,1,0,0,0,2368,2369,1,0,0,0,2369,2512,5,314,0,0,2370,2371,5,122,
        0,0,2371,2372,5,313,0,0,2372,2377,3,124,62,0,2373,2374,3,132,66,
        0,2374,2375,5,173,0,0,2375,2376,5,72,0,0,2376,2378,1,0,0,0,2377,
        2373,1,0,0,0,2377,2378,1,0,0,0,2378,2379,1,0,0,0,2379,2380,5,314,
        0,0,2380,2512,1,0,0,0,2381,2382,5,126,0,0,2382,2383,5,313,0,0,2383,
        2386,3,124,62,0,2384,2385,5,214,0,0,2385,2387,3,162,81,0,2386,2384,
        1,0,0,0,2386,2387,1,0,0,0,2387,2392,1,0,0,0,2388,2389,3,134,67,0,
        2389,2390,5,173,0,0,2390,2391,5,68,0,0,2391,2393,1,0,0,0,2392,2388,
        1,0,0,0,2392,2393,1,0,0,0,2393,2398,1,0,0,0,2394,2395,3,134,67,0,
        2395,2396,5,173,0,0,2396,2397,5,72,0,0,2397,2399,1,0,0,0,2398,2394,
        1,0,0,0,2398,2399,1,0,0,0,2399,2400,1,0,0,0,2400,2401,5,314,0,0,
        2401,2512,1,0,0,0,2402,2403,5,124,0,0,2403,2404,5,313,0,0,2404,2411,
        3,124,62,0,2405,2406,5,214,0,0,2406,2409,3,162,81,0,2407,2408,5,
        87,0,0,2408,2410,3,128,64,0,2409,2407,1,0,0,0,2409,2410,1,0,0,0,
        2410,2412,1,0,0,0,2411,2405,1,0,0,0,2411,2412,1,0,0,0,2412,2416,
        1,0,0,0,2413,2414,3,136,68,0,2414,2415,5,292,0,0,2415,2417,1,0,0,
        0,2416,2413,1,0,0,0,2416,2417,1,0,0,0,2417,2425,1,0,0,0,2418,2419,
        7,18,0,0,2419,2423,5,201,0,0,2420,2421,5,173,0,0,2421,2422,5,225,
        0,0,2422,2424,5,248,0,0,2423,2420,1,0,0,0,2423,2424,1,0,0,0,2424,
        2426,1,0,0,0,2425,2418,1,0,0,0,2425,2426,1,0,0,0,2426,2431,1,0,0,
        0,2427,2428,3,138,69,0,2428,2429,5,173,0,0,2429,2430,5,68,0,0,2430,
        2432,1,0,0,0,2431,2427,1,0,0,0,2431,2432,1,0,0,0,2432,2437,1,0,0,
        0,2433,2434,3,138,69,0,2434,2435,5,173,0,0,2435,2436,5,72,0,0,2436,
        2438,1,0,0,0,2437,2433,1,0,0,0,2437,2438,1,0,0,0,2438,2439,1,0,0,
        0,2439,2440,5,314,0,0,2440,2512,1,0,0,0,2441,2442,5,123,0,0,2442,
        2471,5,313,0,0,2443,2448,3,140,70,0,2444,2445,5,312,0,0,2445,2447,
        3,140,70,0,2446,2444,1,0,0,0,2447,2450,1,0,0,0,2448,2446,1,0,0,0,
        2448,2449,1,0,0,0,2449,2457,1,0,0,0,2450,2448,1,0,0,0,2451,2452,
        5,166,0,0,2452,2453,5,173,0,0,2453,2458,5,166,0,0,2454,2455,5,1,
        0,0,2455,2456,5,173,0,0,2456,2458,5,166,0,0,2457,2451,1,0,0,0,2457,
        2454,1,0,0,0,2457,2458,1,0,0,0,2458,2469,1,0,0,0,2459,2460,5,288,
        0,0,2460,2462,5,266,0,0,2461,2463,5,129,0,0,2462,2461,1,0,0,0,2462,
        2463,1,0,0,0,2463,2470,1,0,0,0,2464,2465,5,290,0,0,2465,2467,5,266,
        0,0,2466,2468,5,129,0,0,2467,2466,1,0,0,0,2467,2468,1,0,0,0,2468,
        2470,1,0,0,0,2469,2459,1,0,0,0,2469,2464,1,0,0,0,2469,2470,1,0,0,
        0,2470,2472,1,0,0,0,2471,2443,1,0,0,0,2471,2472,1,0,0,0,2472,2479,
        1,0,0,0,2473,2474,5,214,0,0,2474,2477,3,162,81,0,2475,2476,5,87,
        0,0,2476,2478,3,128,64,0,2477,2475,1,0,0,0,2477,2478,1,0,0,0,2478,
        2480,1,0,0,0,2479,2473,1,0,0,0,2479,2480,1,0,0,0,2480,2481,1,0,0,
        0,2481,2512,5,314,0,0,2482,2483,5,121,0,0,2483,2500,5,313,0,0,2484,
        2489,3,126,63,0,2485,2486,5,312,0,0,2486,2488,3,126,63,0,2487,2485,
        1,0,0,0,2488,2491,1,0,0,0,2489,2487,1,0,0,0,2489,2490,1,0,0,0,2490,
        2498,1,0,0,0,2491,2489,1,0,0,0,2492,2493,5,166,0,0,2493,2494,5,173,
        0,0,2494,2499,5,166,0,0,2495,2496,5,1,0,0,2496,2497,5,173,0,0,2497,
        2499,5,166,0,0,2498,2492,1,0,0,0,2498,2495,1,0,0,0,2498,2499,1,0,
        0,0,2499,2501,1,0,0,0,2500,2484,1,0,0,0,2500,2501,1,0,0,0,2501,2508,
        1,0,0,0,2502,2503,5,214,0,0,2503,2506,3,162,81,0,2504,2505,5,87,
        0,0,2505,2507,3,128,64,0,2506,2504,1,0,0,0,2506,2507,1,0,0,0,2507,
        2509,1,0,0,0,2508,2502,1,0,0,0,2508,2509,1,0,0,0,2509,2510,1,0,0,
        0,2510,2512,5,314,0,0,2511,2058,1,0,0,0,2511,2060,1,0,0,0,2511,2061,
        1,0,0,0,2511,2064,1,0,0,0,2511,2067,1,0,0,0,2511,2068,1,0,0,0,2511,
        2069,1,0,0,0,2511,2070,1,0,0,0,2511,2071,1,0,0,0,2511,2072,1,0,0,
        0,2511,2079,1,0,0,0,2511,2089,1,0,0,0,2511,2101,1,0,0,0,2511,2136,
        1,0,0,0,2511,2154,1,0,0,0,2511,2193,1,0,0,0,2511,2196,1,0,0,0,2511,
        2200,1,0,0,0,2511,2214,1,0,0,0,2511,2218,1,0,0,0,2511,2223,1,0,0,
        0,2511,2236,1,0,0,0,2511,2248,1,0,0,0,2511,2255,1,0,0,0,2511,2262,
        1,0,0,0,2511,2275,1,0,0,0,2511,2276,1,0,0,0,2511,2277,1,0,0,0,2511,
        2283,1,0,0,0,2511,2289,1,0,0,0,2511,2295,1,0,0,0,2511,2301,1,0,0,
        0,2511,2302,1,0,0,0,2511,2303,1,0,0,0,2511,2304,1,0,0,0,2511,2305,
        1,0,0,0,2511,2319,1,0,0,0,2511,2326,1,0,0,0,2511,2337,1,0,0,0,2511,
        2346,1,0,0,0,2511,2353,1,0,0,0,2511,2357,1,0,0,0,2511,2370,1,0,0,
        0,2511,2381,1,0,0,0,2511,2402,1,0,0,0,2511,2441,1,0,0,0,2511,2482,
        1,0,0,0,2512,2523,1,0,0,0,2513,2514,10,24,0,0,2514,2515,5,315,0,
        0,2515,2516,3,120,60,0,2516,2517,5,316,0,0,2517,2522,1,0,0,0,2518,
        2519,10,22,0,0,2519,2520,5,310,0,0,2520,2522,3,238,119,0,2521,2513,
        1,0,0,0,2521,2518,1,0,0,0,2522,2525,1,0,0,0,2523,2521,1,0,0,0,2523,
        2524,1,0,0,0,2524,123,1,0,0,0,2525,2523,1,0,0,0,2526,2527,3,126,
        63,0,2527,2528,5,312,0,0,2528,2538,3,146,73,0,2529,2530,5,186,0,
        0,2530,2535,3,130,65,0,2531,2532,5,312,0,0,2532,2534,3,130,65,0,
        2533,2531,1,0,0,0,2534,2537,1,0,0,0,2535,2533,1,0,0,0,2535,2536,
        1,0,0,0,2536,2539,1,0,0,0,2537,2535,1,0,0,0,2538,2529,1,0,0,0,2538,
        2539,1,0,0,0,2539,125,1,0,0,0,2540,2543,3,114,57,0,2541,2542,5,87,
        0,0,2542,2544,3,128,64,0,2543,2541,1,0,0,0,2543,2544,1,0,0,0,2544,
        127,1,0,0,0,2545,2548,5,120,0,0,2546,2547,5,70,0,0,2547,2549,7,19,
        0,0,2548,2546,1,0,0,0,2548,2549,1,0,0,0,2549,129,1,0,0,0,2550,2551,
        3,126,63,0,2551,2552,5,11,0,0,2552,2553,3,258,129,0,2553,131,1,0,
        0,0,2554,2555,7,20,0,0,2555,133,1,0,0,0,2556,2561,5,72,0,0,2557,
        2561,5,166,0,0,2558,2559,5,53,0,0,2559,2561,3,114,57,0,2560,2556,
        1,0,0,0,2560,2557,1,0,0,0,2560,2558,1,0,0,0,2561,135,1,0,0,0,2562,
        2564,5,290,0,0,2563,2565,5,10,0,0,2564,2563,1,0,0,0,2564,2565,1,
        0,0,0,2565,2574,1,0,0,0,2566,2568,5,288,0,0,2567,2569,7,21,0,0,2568,
        2567,1,0,0,0,2568,2569,1,0,0,0,2569,2571,1,0,0,0,2570,2572,5,10,
        0,0,2571,2570,1,0,0,0,2571,2572,1,0,0,0,2572,2574,1,0,0,0,2573,2562,
        1,0,0,0,2573,2566,1,0,0,0,2574,137,1,0,0,0,2575,2580,5,72,0,0,2576,
        2580,5,166,0,0,2577,2578,5,68,0,0,2578,2580,7,22,0,0,2579,2575,1,
        0,0,0,2579,2576,1,0,0,0,2579,2577,1,0,0,0,2580,139,1,0,0,0,2581,
        2583,5,128,0,0,2582,2581,1,0,0,0,2582,2583,1,0,0,0,2583,2584,1,0,
        0,0,2584,2585,3,114,57,0,2585,2586,5,279,0,0,2586,2587,3,126,63,
        0,2587,2593,1,0,0,0,2588,2589,3,114,57,0,2589,2590,5,311,0,0,2590,
        2591,3,126,63,0,2591,2593,1,0,0,0,2592,2582,1,0,0,0,2592,2588,1,
        0,0,0,2593,141,1,0,0,0,2594,2595,7,23,0,0,2595,143,1,0,0,0,2596,
        2597,5,103,0,0,2597,2601,5,168,0,0,2598,2599,5,211,0,0,2599,2601,
        5,168,0,0,2600,2596,1,0,0,0,2600,2598,1,0,0,0,2601,145,1,0,0,0,2602,
        2609,5,327,0,0,2603,2606,5,328,0,0,2604,2605,5,261,0,0,2605,2607,
        5,327,0,0,2606,2604,1,0,0,0,2606,2607,1,0,0,0,2607,2609,1,0,0,0,
        2608,2602,1,0,0,0,2608,2603,1,0,0,0,2609,147,1,0,0,0,2610,2611,5,
        251,0,0,2611,2612,5,295,0,0,2612,2617,3,156,78,0,2613,2614,5,251,
        0,0,2614,2615,5,295,0,0,2615,2617,3,146,73,0,2616,2610,1,0,0,0,2616,
        2613,1,0,0,0,2617,149,1,0,0,0,2618,2619,7,24,0,0,2619,151,1,0,0,
        0,2620,2621,7,25,0,0,2621,153,1,0,0,0,2622,2623,7,26,0,0,2623,155,
        1,0,0,0,2624,2626,5,112,0,0,2625,2627,7,16,0,0,2626,2625,1,0,0,0,
        2626,2627,1,0,0,0,2627,2628,1,0,0,0,2628,2629,3,146,73,0,2629,2632,
        3,158,79,0,2630,2631,5,253,0,0,2631,2633,3,158,79,0,2632,2630,1,
        0,0,0,2632,2633,1,0,0,0,2633,157,1,0,0,0,2634,2635,7,27,0,0,2635,
        159,1,0,0,0,2636,2637,7,28,0,0,2637,161,1,0,0,0,2638,2639,6,81,-1,
        0,2639,2640,5,222,0,0,2640,2641,5,313,0,0,2641,2646,3,164,82,0,2642,
        2643,5,312,0,0,2643,2645,3,164,82,0,2644,2642,1,0,0,0,2645,2648,
        1,0,0,0,2646,2644,1,0,0,0,2646,2647,1,0,0,0,2647,2649,1,0,0,0,2648,
        2646,1,0,0,0,2649,2650,5,314,0,0,2650,2730,1,0,0,0,2651,2652,5,112,
        0,0,2652,2655,3,158,79,0,2653,2654,5,253,0,0,2654,2656,3,158,79,
        0,2655,2653,1,0,0,0,2655,2656,1,0,0,0,2656,2730,1,0,0,0,2657,2662,
        5,252,0,0,2658,2659,5,313,0,0,2659,2660,3,166,83,0,2660,2661,5,314,
        0,0,2661,2663,1,0,0,0,2662,2658,1,0,0,0,2662,2663,1,0,0,0,2663,2667,
        1,0,0,0,2664,2665,5,290,0,0,2665,2666,5,251,0,0,2666,2668,5,295,
        0,0,2667,2664,1,0,0,0,2667,2668,1,0,0,0,2668,2730,1,0,0,0,2669,2674,
        5,252,0,0,2670,2671,5,313,0,0,2671,2672,3,166,83,0,2672,2673,5,314,
        0,0,2673,2675,1,0,0,0,2674,2670,1,0,0,0,2674,2675,1,0,0,0,2675,2676,
        1,0,0,0,2676,2677,5,288,0,0,2677,2678,5,251,0,0,2678,2730,5,295,
        0,0,2679,2684,5,251,0,0,2680,2681,5,313,0,0,2681,2682,3,166,83,0,
        2682,2683,5,314,0,0,2683,2685,1,0,0,0,2684,2680,1,0,0,0,2684,2685,
        1,0,0,0,2685,2689,1,0,0,0,2686,2687,5,290,0,0,2687,2688,5,251,0,
        0,2688,2690,5,295,0,0,2689,2686,1,0,0,0,2689,2690,1,0,0,0,2690,2730,
        1,0,0,0,2691,2696,5,251,0,0,2692,2693,5,313,0,0,2693,2694,3,166,
        83,0,2694,2695,5,314,0,0,2695,2697,1,0,0,0,2696,2692,1,0,0,0,2696,
        2697,1,0,0,0,2697,2698,1,0,0,0,2698,2699,5,288,0,0,2699,2700,5,251,
        0,0,2700,2730,5,295,0,0,2701,2702,5,65,0,0,2702,2730,5,196,0,0,2703,
        2704,5,10,0,0,2704,2705,5,298,0,0,2705,2706,3,162,81,0,2706,2707,
        5,300,0,0,2707,2730,1,0,0,0,2708,2709,5,145,0,0,2709,2710,5,298,
        0,0,2710,2711,3,162,81,0,2711,2712,5,312,0,0,2712,2713,3,162,81,
        0,2713,2714,5,300,0,0,2714,2730,1,0,0,0,2715,2727,3,238,119,0,2716,
        2717,5,313,0,0,2717,2722,3,166,83,0,2718,2719,5,312,0,0,2719,2721,
        3,166,83,0,2720,2718,1,0,0,0,2721,2724,1,0,0,0,2722,2720,1,0,0,0,
        2722,2723,1,0,0,0,2723,2725,1,0,0,0,2724,2722,1,0,0,0,2725,2726,
        5,314,0,0,2726,2728,1,0,0,0,2727,2716,1,0,0,0,2727,2728,1,0,0,0,
        2728,2730,1,0,0,0,2729,2638,1,0,0,0,2729,2651,1,0,0,0,2729,2657,
        1,0,0,0,2729,2669,1,0,0,0,2729,2679,1,0,0,0,2729,2691,1,0,0,0,2729,
        2701,1,0,0,0,2729,2703,1,0,0,0,2729,2708,1,0,0,0,2729,2715,1,0,0,
        0,2730,2740,1,0,0,0,2731,2732,10,2,0,0,2732,2736,5,10,0,0,2733,2734,
        5,315,0,0,2734,2735,5,330,0,0,2735,2737,5,316,0,0,2736,2733,1,0,
        0,0,2736,2737,1,0,0,0,2737,2739,1,0,0,0,2738,2731,1,0,0,0,2739,2742,
        1,0,0,0,2740,2738,1,0,0,0,2740,2741,1,0,0,0,2741,163,1,0,0,0,2742,
        2740,1,0,0,0,2743,2748,3,162,81,0,2744,2745,3,238,119,0,2745,2746,
        3,162,81,0,2746,2748,1,0,0,0,2747,2743,1,0,0,0,2747,2744,1,0,0,0,
        2748,165,1,0,0,0,2749,2752,5,330,0,0,2750,2752,3,162,81,0,2751,2749,
        1,0,0,0,2751,2750,1,0,0,0,2752,167,1,0,0,0,2753,2754,5,284,0,0,2754,
        2755,3,114,57,0,2755,2756,5,249,0,0,2756,2757,3,114,57,0,2757,169,
        1,0,0,0,2758,2759,5,82,0,0,2759,2760,5,313,0,0,2760,2761,5,285,0,
        0,2761,2762,3,116,58,0,2762,2763,5,314,0,0,2763,171,1,0,0,0,2764,
        2765,5,284,0,0,2765,2768,5,147,0,0,2766,2767,5,8,0,0,2767,2769,3,
        114,57,0,2768,2766,1,0,0,0,2768,2769,1,0,0,0,2769,2770,1,0,0,0,2770,
        2771,5,249,0,0,2771,2772,5,271,0,0,2772,2773,5,234,0,0,2773,2774,
        3,238,119,0,2774,2775,5,296,0,0,2775,2783,3,114,57,0,2776,2777,5,
        312,0,0,2777,2778,3,238,119,0,2778,2779,5,296,0,0,2779,2780,3,114,
        57,0,2780,2782,1,0,0,0,2781,2776,1,0,0,0,2782,2785,1,0,0,0,2783,
        2781,1,0,0,0,2783,2784,1,0,0,0,2784,2829,1,0,0,0,2785,2783,1,0,0,
        0,2786,2787,5,284,0,0,2787,2790,5,147,0,0,2788,2789,5,8,0,0,2789,
        2791,3,114,57,0,2790,2788,1,0,0,0,2790,2791,1,0,0,0,2791,2792,1,
        0,0,0,2792,2793,5,249,0,0,2793,2829,5,56,0,0,2794,2795,5,284,0,0,
        2795,2796,5,165,0,0,2796,2799,5,147,0,0,2797,2798,5,8,0,0,2798,2800,
        3,114,57,0,2799,2797,1,0,0,0,2799,2800,1,0,0,0,2800,2801,1,0,0,0,
        2801,2802,5,249,0,0,2802,2814,5,110,0,0,2803,2804,5,313,0,0,2804,
        2809,3,238,119,0,2805,2806,5,312,0,0,2806,2808,3,238,119,0,2807,
        2805,1,0,0,0,2808,2811,1,0,0,0,2809,2807,1,0,0,0,2809,2810,1,0,0,
        0,2810,2812,1,0,0,0,2811,2809,1,0,0,0,2812,2813,5,314,0,0,2813,2815,
        1,0,0,0,2814,2803,1,0,0,0,2814,2815,1,0,0,0,2815,2816,1,0,0,0,2816,
        2817,5,280,0,0,2817,2818,5,313,0,0,2818,2823,3,114,57,0,2819,2820,
        5,312,0,0,2820,2822,3,114,57,0,2821,2819,1,0,0,0,2822,2825,1,0,0,
        0,2823,2821,1,0,0,0,2823,2824,1,0,0,0,2824,2826,1,0,0,0,2825,2823,
        1,0,0,0,2826,2827,5,314,0,0,2827,2829,1,0,0,0,2828,2764,1,0,0,0,
        2828,2786,1,0,0,0,2828,2794,1,0,0,0,2829,173,1,0,0,0,2830,2836,5,
        182,0,0,2831,2837,3,238,119,0,2832,2833,5,313,0,0,2833,2834,3,56,
        28,0,2834,2835,5,314,0,0,2835,2837,1,0,0,0,2836,2831,1,0,0,0,2836,
        2832,1,0,0,0,2837,175,1,0,0,0,2838,2839,5,151,0,0,2839,2844,3,82,
        41,0,2840,2841,5,312,0,0,2841,2843,3,82,41,0,2842,2840,1,0,0,0,2843,
        2846,1,0,0,0,2844,2842,1,0,0,0,2844,2845,1,0,0,0,2845,2848,1,0,0,
        0,2846,2844,1,0,0,0,2847,2838,1,0,0,0,2847,2848,1,0,0,0,2848,2849,
        1,0,0,0,2849,2853,3,178,89,0,2850,2851,5,4,0,0,2851,2852,5,146,0,
        0,2852,2854,3,88,44,0,2853,2850,1,0,0,0,2853,2854,1,0,0,0,2854,2856,
        1,0,0,0,2855,2857,7,15,0,0,2856,2855,1,0,0,0,2856,2857,1,0,0,0,2857,
        2863,1,0,0,0,2858,2859,5,189,0,0,2859,2860,5,313,0,0,2860,2861,3,
        182,91,0,2861,2862,5,314,0,0,2862,2864,1,0,0,0,2863,2858,1,0,0,0,
        2863,2864,1,0,0,0,2864,2874,1,0,0,0,2865,2866,5,241,0,0,2866,2871,
        3,90,45,0,2867,2868,5,312,0,0,2868,2870,3,90,45,0,2869,2867,1,0,
        0,0,2870,2873,1,0,0,0,2871,2869,1,0,0,0,2871,2872,1,0,0,0,2872,2875,
        1,0,0,0,2873,2871,1,0,0,0,2874,2865,1,0,0,0,2874,2875,1,0,0,0,2875,
        2885,1,0,0,0,2876,2877,5,54,0,0,2877,2882,3,92,46,0,2878,2879,5,
        312,0,0,2879,2881,3,92,46,0,2880,2878,1,0,0,0,2881,2884,1,0,0,0,
        2882,2880,1,0,0,0,2882,2883,1,0,0,0,2883,2886,1,0,0,0,2884,2882,
        1,0,0,0,2885,2876,1,0,0,0,2885,2886,1,0,0,0,2886,177,1,0,0,0,2887,
        2888,5,202,0,0,2888,2912,3,180,90,0,2889,2890,5,223,0,0,2890,2912,
        3,180,90,0,2891,2892,5,99,0,0,2892,2912,3,180,90,0,2893,2894,5,202,
        0,0,2894,2895,5,17,0,0,2895,2896,3,180,90,0,2896,2897,5,8,0,0,2897,
        2898,3,180,90,0,2898,2912,1,0,0,0,2899,2900,5,223,0,0,2900,2901,
        5,17,0,0,2901,2902,3,180,90,0,2902,2903,5,8,0,0,2903,2904,3,180,
        90,0,2904,2912,1,0,0,0,2905,2906,5,99,0,0,2906,2907,5,17,0,0,2907,
        2908,3,180,90,0,2908,2909,5,8,0,0,2909,2910,3,180,90,0,2910,2912,
        1,0,0,0,2911,2887,1,0,0,0,2911,2889,1,0,0,0,2911,2891,1,0,0,0,2911,
        2893,1,0,0,0,2911,2899,1,0,0,0,2911,2905,1,0,0,0,2912,179,1,0,0,
        0,2913,2914,5,262,0,0,2914,2923,5,195,0,0,2915,2916,5,262,0,0,2916,
        2923,5,85,0,0,2917,2918,5,39,0,0,2918,2923,5,222,0,0,2919,2920,3,
        114,57,0,2920,2921,7,29,0,0,2921,2923,1,0,0,0,2922,2913,1,0,0,0,
        2922,2915,1,0,0,0,2922,2917,1,0,0,0,2922,2919,1,0,0,0,2923,181,1,
        0,0,0,2924,2925,6,91,-1,0,2925,2927,3,184,92,0,2926,2928,3,186,93,
        0,2927,2926,1,0,0,0,2927,2928,1,0,0,0,2928,2936,1,0,0,0,2929,2930,
        10,2,0,0,2930,2935,3,182,91,3,2931,2932,10,1,0,0,2932,2933,5,324,
        0,0,2933,2935,3,182,91,2,2934,2929,1,0,0,0,2934,2931,1,0,0,0,2935,
        2938,1,0,0,0,2936,2934,1,0,0,0,2936,2937,1,0,0,0,2937,183,1,0,0,
        0,2938,2936,1,0,0,0,2939,2965,3,238,119,0,2940,2941,5,313,0,0,2941,
        2965,5,314,0,0,2942,2943,5,192,0,0,2943,2944,5,313,0,0,2944,2949,
        3,182,91,0,2945,2946,5,312,0,0,2946,2948,3,182,91,0,2947,2945,1,
        0,0,0,2948,2951,1,0,0,0,2949,2947,1,0,0,0,2949,2950,1,0,0,0,2950,
        2952,1,0,0,0,2951,2949,1,0,0,0,2952,2953,5,314,0,0,2953,2965,1,0,
        0,0,2954,2955,5,313,0,0,2955,2956,3,182,91,0,2956,2957,5,314,0,0,
        2957,2965,1,0,0,0,2958,2965,5,326,0,0,2959,2965,5,325,0,0,2960,2961,
        5,319,0,0,2961,2962,3,182,91,0,2962,2963,5,320,0,0,2963,2965,1,0,
        0,0,2964,2939,1,0,0,0,2964,2940,1,0,0,0,2964,2942,1,0,0,0,2964,2954,
        1,0,0,0,2964,2958,1,0,0,0,2964,2959,1,0,0,0,2964,2960,1,0,0,0,2965,
        185,1,0,0,0,2966,2968,5,304,0,0,2967,2969,5,308,0,0,2968,2967,1,
        0,0,0,2968,2969,1,0,0,0,2969,2997,1,0,0,0,2970,2972,5,302,0,0,2971,
        2973,5,308,0,0,2972,2971,1,0,0,0,2972,2973,1,0,0,0,2973,2997,1,0,
        0,0,2974,2976,5,308,0,0,2975,2977,5,308,0,0,2976,2975,1,0,0,0,2976,
        2977,1,0,0,0,2977,2997,1,0,0,0,2978,2979,5,317,0,0,2979,2980,5,330,
        0,0,2980,2982,5,318,0,0,2981,2983,5,308,0,0,2982,2981,1,0,0,0,2982,
        2983,1,0,0,0,2983,2997,1,0,0,0,2984,2986,5,317,0,0,2985,2987,5,330,
        0,0,2986,2985,1,0,0,0,2986,2987,1,0,0,0,2987,2988,1,0,0,0,2988,2990,
        5,312,0,0,2989,2991,5,330,0,0,2990,2989,1,0,0,0,2990,2991,1,0,0,
        0,2991,2992,1,0,0,0,2992,2994,5,318,0,0,2993,2995,5,308,0,0,2994,
        2993,1,0,0,0,2994,2995,1,0,0,0,2995,2997,1,0,0,0,2996,2966,1,0,0,
        0,2996,2970,1,0,0,0,2996,2974,1,0,0,0,2996,2978,1,0,0,0,2996,2984,
        1,0,0,0,2997,187,1,0,0,0,2998,2999,3,256,128,0,2999,3000,5,296,0,
        0,3000,3001,3,114,57,0,3001,189,1,0,0,0,3002,3003,5,87,0,0,3003,
        3007,7,30,0,0,3004,3005,5,260,0,0,3005,3007,7,31,0,0,3006,3002,1,
        0,0,0,3006,3004,1,0,0,0,3007,191,1,0,0,0,3008,3009,5,117,0,0,3009,
        3010,5,136,0,0,3010,3014,3,194,97,0,3011,3012,5,203,0,0,3012,3014,
        7,32,0,0,3013,3008,1,0,0,0,3013,3011,1,0,0,0,3014,193,1,0,0,0,3015,
        3016,5,203,0,0,3016,3023,5,263,0,0,3017,3018,5,203,0,0,3018,3023,
        5,31,0,0,3019,3020,5,208,0,0,3020,3023,5,203,0,0,3021,3023,5,232,
        0,0,3022,3015,1,0,0,0,3022,3017,1,0,0,0,3022,3019,1,0,0,0,3022,3021,
        1,0,0,0,3023,195,1,0,0,0,3024,3030,3,114,57,0,3025,3026,3,238,119,
        0,3026,3027,5,323,0,0,3027,3028,3,114,57,0,3028,3030,1,0,0,0,3029,
        3024,1,0,0,0,3029,3025,1,0,0,0,3030,197,1,0,0,0,3031,3032,3,238,
        119,0,3032,3033,5,310,0,0,3033,3034,3,238,119,0,3034,3037,1,0,0,
        0,3035,3037,3,238,119,0,3036,3031,1,0,0,0,3036,3035,1,0,0,0,3037,
        199,1,0,0,0,3038,3043,3,198,99,0,3039,3040,5,312,0,0,3040,3042,3,
        198,99,0,3041,3039,1,0,0,0,3042,3045,1,0,0,0,3043,3041,1,0,0,0,3043,
        3044,1,0,0,0,3044,201,1,0,0,0,3045,3043,1,0,0,0,3046,3047,5,90,0,
        0,3047,3048,3,204,102,0,3048,3052,3,208,104,0,3049,3051,3,210,105,
        0,3050,3049,1,0,0,0,3051,3054,1,0,0,0,3052,3050,1,0,0,0,3052,3053,
        1,0,0,0,3053,3055,1,0,0,0,3054,3052,1,0,0,0,3055,3056,3,212,106,
        0,3056,203,1,0,0,0,3057,3058,3,226,113,0,3058,3067,5,313,0,0,3059,
        3064,3,206,103,0,3060,3061,5,312,0,0,3061,3063,3,206,103,0,3062,
        3060,1,0,0,0,3063,3066,1,0,0,0,3064,3062,1,0,0,0,3064,3065,1,0,0,
        0,3065,3068,1,0,0,0,3066,3064,1,0,0,0,3067,3059,1,0,0,0,3067,3068,
        1,0,0,0,3068,3069,1,0,0,0,3069,3070,5,314,0,0,3070,205,1,0,0,0,3071,
        3073,3,238,119,0,3072,3071,1,0,0,0,3072,3073,1,0,0,0,3073,3074,1,
        0,0,0,3074,3075,3,162,81,0,3075,207,1,0,0,0,3076,3077,5,215,0,0,
        3077,3078,3,162,81,0,3078,209,1,0,0,0,3079,3080,5,130,0,0,3080,3099,
        3,238,119,0,3081,3083,5,165,0,0,3082,3081,1,0,0,0,3082,3083,1,0,
        0,0,3083,3084,1,0,0,0,3084,3099,5,61,0,0,3085,3086,5,215,0,0,3086,
        3087,5,166,0,0,3087,3088,5,173,0,0,3088,3089,5,166,0,0,3089,3099,
        5,109,0,0,3090,3091,5,21,0,0,3091,3092,5,173,0,0,3092,3093,5,166,
        0,0,3093,3099,5,109,0,0,3094,3095,5,229,0,0,3095,3099,7,1,0,0,3096,
        3097,5,29,0,0,3097,3099,3,146,73,0,3098,3079,1,0,0,0,3098,3082,1,
        0,0,0,3098,3085,1,0,0,0,3098,3090,1,0,0,0,3098,3094,1,0,0,0,3098,
        3096,1,0,0,0,3099,211,1,0,0,0,3100,3101,5,213,0,0,3101,3200,3,120,
        60,0,3102,3103,5,234,0,0,3103,3104,3,238,119,0,3104,3105,5,296,0,
        0,3105,3106,3,114,57,0,3106,3200,1,0,0,0,3107,3108,5,23,0,0,3108,
        3110,3,114,57,0,3109,3111,3,214,107,0,3110,3109,1,0,0,0,3111,3112,
        1,0,0,0,3112,3110,1,0,0,0,3112,3113,1,0,0,0,3113,3115,1,0,0,0,3114,
        3116,3,218,109,0,3115,3114,1,0,0,0,3115,3116,1,0,0,0,3116,3117,1,
        0,0,0,3117,3118,5,71,0,0,3118,3119,5,23,0,0,3119,3200,1,0,0,0,3120,
        3122,5,23,0,0,3121,3123,3,214,107,0,3122,3121,1,0,0,0,3123,3124,
        1,0,0,0,3124,3122,1,0,0,0,3124,3125,1,0,0,0,3125,3127,1,0,0,0,3126,
        3128,3,218,109,0,3127,3126,1,0,0,0,3127,3128,1,0,0,0,3128,3129,1,
        0,0,0,3129,3130,5,71,0,0,3130,3131,5,23,0,0,3131,3200,1,0,0,0,3132,
        3133,5,102,0,0,3133,3134,3,114,57,0,3134,3135,5,249,0,0,3135,3139,
        3,222,111,0,3136,3138,3,216,108,0,3137,3136,1,0,0,0,3138,3141,1,
        0,0,0,3139,3137,1,0,0,0,3139,3140,1,0,0,0,3140,3143,1,0,0,0,3141,
        3139,1,0,0,0,3142,3144,3,218,109,0,3143,3142,1,0,0,0,3143,3144,1,
        0,0,0,3144,3145,1,0,0,0,3145,3146,5,71,0,0,3146,3147,5,102,0,0,3147,
        3200,1,0,0,0,3148,3149,5,118,0,0,3149,3200,3,238,119,0,3150,3151,
        5,134,0,0,3151,3200,3,238,119,0,3152,3158,5,15,0,0,3153,3154,3,220,
        110,0,3154,3155,5,309,0,0,3155,3157,1,0,0,0,3156,3153,1,0,0,0,3157,
        3160,1,0,0,0,3158,3156,1,0,0,0,3158,3159,1,0,0,0,3159,3162,1,0,0,
        0,3160,3158,1,0,0,0,3161,3163,3,222,111,0,3162,3161,1,0,0,0,3162,
        3163,1,0,0,0,3163,3164,1,0,0,0,3164,3200,5,71,0,0,3165,3166,3,238,
        119,0,3166,3167,5,311,0,0,3167,3169,1,0,0,0,3168,3165,1,0,0,0,3168,
        3169,1,0,0,0,3169,3170,1,0,0,0,3170,3171,5,144,0,0,3171,3172,3,222,
        111,0,3172,3173,5,71,0,0,3173,3174,5,144,0,0,3174,3200,1,0,0,0,3175,
        3176,3,238,119,0,3176,3177,5,311,0,0,3177,3179,1,0,0,0,3178,3175,
        1,0,0,0,3178,3179,1,0,0,0,3179,3180,1,0,0,0,3180,3181,5,286,0,0,
        3181,3182,3,114,57,0,3182,3183,5,64,0,0,3183,3184,3,222,111,0,3184,
        3185,5,71,0,0,3185,3186,5,286,0,0,3186,3200,1,0,0,0,3187,3188,3,
        238,119,0,3188,3189,5,311,0,0,3189,3191,1,0,0,0,3190,3187,1,0,0,
        0,3190,3191,1,0,0,0,3191,3192,1,0,0,0,3192,3193,5,207,0,0,3193,3194,
        3,222,111,0,3194,3195,5,270,0,0,3195,3196,3,114,57,0,3196,3197,5,
        71,0,0,3197,3198,5,207,0,0,3198,3200,1,0,0,0,3199,3100,1,0,0,0,3199,
        3102,1,0,0,0,3199,3107,1,0,0,0,3199,3120,1,0,0,0,3199,3132,1,0,0,
        0,3199,3148,1,0,0,0,3199,3150,1,0,0,0,3199,3152,1,0,0,0,3199,3168,
        1,0,0,0,3199,3178,1,0,0,0,3199,3190,1,0,0,0,3200,213,1,0,0,0,3201,
        3202,5,284,0,0,3202,3203,3,114,57,0,3203,3204,5,249,0,0,3204,3205,
        3,222,111,0,3205,215,1,0,0,0,3206,3207,5,69,0,0,3207,3208,3,114,
        57,0,3208,3209,5,249,0,0,3209,3210,3,222,111,0,3210,217,1,0,0,0,
        3211,3212,5,67,0,0,3212,3213,3,222,111,0,3213,219,1,0,0,0,3214,3215,
        5,52,0,0,3215,3220,3,238,119,0,3216,3217,5,312,0,0,3217,3219,3,238,
        119,0,3218,3216,1,0,0,0,3219,3222,1,0,0,0,3220,3218,1,0,0,0,3220,
        3221,1,0,0,0,3221,3223,1,0,0,0,3222,3220,1,0,0,0,3223,3226,3,162,
        81,0,3224,3225,5,53,0,0,3225,3227,3,120,60,0,3226,3224,1,0,0,0,3226,
        3227,1,0,0,0,3227,221,1,0,0,0,3228,3229,3,212,106,0,3229,3230,5,
        309,0,0,3230,3232,1,0,0,0,3231,3228,1,0,0,0,3232,3233,1,0,0,0,3233,
        3231,1,0,0,0,3233,3234,1,0,0,0,3234,223,1,0,0,0,3235,3236,7,33,0,
        0,3236,225,1,0,0,0,3237,3242,3,238,119,0,3238,3239,5,310,0,0,3239,
        3241,3,238,119,0,3240,3238,1,0,0,0,3241,3244,1,0,0,0,3242,3240,1,
        0,0,0,3242,3243,1,0,0,0,3243,227,1,0,0,0,3244,3242,1,0,0,0,3245,
        3246,5,86,0,0,3246,3247,3,230,115,0,3247,3248,5,11,0,0,3248,3249,
        5,170,0,0,3249,3250,3,120,60,0,3250,229,1,0,0,0,3251,3252,7,34,0,
        0,3252,231,1,0,0,0,3253,3257,3,234,117,0,3254,3257,5,47,0,0,3255,
        3257,5,43,0,0,3256,3253,1,0,0,0,3256,3254,1,0,0,0,3256,3255,1,0,
        0,0,3257,233,1,0,0,0,3258,3264,3,238,119,0,3259,3260,5,273,0,0,3260,
        3264,3,238,119,0,3261,3262,5,218,0,0,3262,3264,3,238,119,0,3263,
        3258,1,0,0,0,3263,3259,1,0,0,0,3263,3261,1,0,0,0,3264,235,1,0,0,
        0,3265,3270,3,266,133,0,3266,3267,5,312,0,0,3267,3269,3,266,133,
        0,3268,3266,1,0,0,0,3269,3272,1,0,0,0,3270,3268,1,0,0,0,3270,3271,
        1,0,0,0,3271,237,1,0,0,0,3272,3270,1,0,0,0,3273,3279,5,333,0,0,3274,
        3279,5,335,0,0,3275,3279,3,274,137,0,3276,3279,5,336,0,0,3277,3279,
        5,334,0,0,3278,3273,1,0,0,0,3278,3274,1,0,0,0,3278,3275,1,0,0,0,
        3278,3276,1,0,0,0,3278,3277,1,0,0,0,3279,239,1,0,0,0,3280,3281,3,
        238,119,0,3281,241,1,0,0,0,3282,3283,3,240,120,0,3283,243,1,0,0,
        0,3284,3285,3,238,119,0,3285,245,1,0,0,0,3286,3287,3,242,121,0,3287,
        3288,5,310,0,0,3288,3289,3,244,122,0,3289,247,1,0,0,0,3290,3295,
        3,252,126,0,3291,3293,5,11,0,0,3292,3291,1,0,0,0,3292,3293,1,0,0,
        0,3293,3294,1,0,0,0,3294,3296,3,258,129,0,3295,3292,1,0,0,0,3295,
        3296,1,0,0,0,3296,249,1,0,0,0,3297,3298,3,238,119,0,3298,251,1,0,
        0,0,3299,3300,3,246,123,0,3300,3301,5,310,0,0,3301,3303,1,0,0,0,
        3302,3299,1,0,0,0,3302,3303,1,0,0,0,3303,3304,1,0,0,0,3304,3305,
        3,250,125,0,3305,253,1,0,0,0,3306,3307,3,252,126,0,3307,255,1,0,
        0,0,3308,3309,3,238,119,0,3309,257,1,0,0,0,3310,3311,3,238,119,0,
        3311,259,1,0,0,0,3312,3313,3,246,123,0,3313,261,1,0,0,0,3314,3315,
        3,260,130,0,3315,3316,5,310,0,0,3316,3318,1,0,0,0,3317,3314,1,0,
        0,0,3317,3318,1,0,0,0,3318,3319,1,0,0,0,3319,3320,3,250,125,0,3320,
        263,1,0,0,0,3321,3322,3,262,131,0,3322,265,1,0,0,0,3323,3324,3,238,
        119,0,3324,267,1,0,0,0,3325,3326,3,238,119,0,3326,269,1,0,0,0,3327,
        3329,5,303,0,0,3328,3327,1,0,0,0,3328,3329,1,0,0,0,3329,3330,1,0,
        0,0,3330,3340,5,331,0,0,3331,3333,5,303,0,0,3332,3331,1,0,0,0,3332,
        3333,1,0,0,0,3333,3334,1,0,0,0,3334,3340,5,332,0,0,3335,3337,5,303,
        0,0,3336,3335,1,0,0,0,3336,3337,1,0,0,0,3337,3338,1,0,0,0,3338,3340,
        5,330,0,0,3339,3328,1,0,0,0,3339,3332,1,0,0,0,3339,3336,1,0,0,0,
        3340,271,1,0,0,0,3341,3344,3,238,119,0,3342,3344,3,146,73,0,3343,
        3341,1,0,0,0,3343,3342,1,0,0,0,3344,273,1,0,0,0,3345,3346,7,35,0,
        0,3346,275,1,0,0,0,445,277,283,289,301,308,312,316,322,326,333,338,
        342,348,352,371,377,381,385,389,397,401,404,409,415,424,430,434,
        440,450,462,471,480,486,497,505,513,520,530,537,545,581,584,587,
        591,597,602,609,615,619,623,631,637,641,655,663,682,707,710,717,
        724,733,737,744,754,760,765,769,775,784,790,794,801,805,813,818,
        822,826,829,836,844,849,853,857,860,869,876,881,885,889,892,901,
        904,913,918,924,948,954,956,962,968,970,978,980,986,992,994,1009,
        1014,1021,1031,1037,1039,1047,1049,1074,1077,1081,1085,1103,1106,
        1117,1120,1136,1142,1145,1154,1156,1162,1174,1179,1182,1192,1196,
        1202,1209,1214,1220,1224,1228,1234,1245,1254,1264,1267,1272,1274,
        1281,1287,1289,1293,1303,1309,1312,1314,1326,1333,1337,1341,1345,
        1352,1356,1360,1365,1369,1377,1380,1388,1392,1399,1410,1413,1423,
        1426,1437,1442,1450,1453,1457,1466,1475,1478,1487,1490,1493,1497,
        1509,1512,1519,1521,1540,1544,1548,1552,1554,1565,1570,1580,1582,
        1591,1594,1609,1612,1621,1624,1632,1635,1638,1643,1646,1658,1661,
        1669,1674,1678,1680,1682,1697,1699,1710,1717,1720,1725,1735,1746,
        1750,1752,1760,1767,1780,1786,1802,1811,1814,1822,1825,1832,1837,
        1848,1851,1855,1857,1865,1875,1881,1883,1890,1894,1896,1903,1907,
        1909,1911,1920,1931,1935,1945,1955,1959,1967,1969,1982,1990,1999,
        2005,2013,2019,2023,2028,2033,2039,2053,2055,2085,2096,2104,2109,
        2114,2127,2133,2136,2143,2148,2151,2154,2159,2166,2169,2178,2181,
        2185,2188,2191,2206,2209,2228,2232,2240,2244,2269,2272,2281,2287,
        2293,2299,2308,2311,2314,2333,2342,2364,2367,2377,2386,2392,2398,
        2409,2411,2416,2423,2425,2431,2437,2448,2457,2462,2467,2469,2471,
        2477,2479,2489,2498,2500,2506,2508,2511,2521,2523,2535,2538,2543,
        2548,2560,2564,2568,2571,2573,2579,2582,2592,2600,2606,2608,2616,
        2626,2632,2646,2655,2662,2667,2674,2684,2689,2696,2722,2727,2729,
        2736,2740,2747,2751,2768,2783,2790,2799,2809,2814,2823,2828,2836,
        2844,2847,2853,2856,2863,2871,2874,2882,2885,2911,2922,2927,2934,
        2936,2949,2964,2968,2972,2976,2982,2986,2990,2994,2996,3006,3013,
        3022,3029,3036,3043,3052,3064,3067,3072,3082,3098,3112,3115,3124,
        3127,3139,3143,3158,3162,3168,3178,3190,3199,3220,3226,3233,3242,
        3256,3263,3270,3278,3292,3295,3302,3317,3328,3332,3336,3339,3343
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!TrinoParser.__ATN) {
            TrinoParser.__ATN = new antlr.ATNDeserializer().deserialize(TrinoParser._serializedATN);
        }

        return TrinoParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(TrinoParser.literalNames, TrinoParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return TrinoParser.vocabulary;
    }

    private static readonly decisionsToDFA = TrinoParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ParseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EOF, 0)!;
    }
    public statements(): StatementsContext | null {
        return this.getRuleContext(0, StatementsContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_parse;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitParse) {
            return visitor.visitParse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public SEMICOLON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SEMICOLON_, 0);
    }
    public statements(): StatementsContext | null {
        return this.getRuleContext(0, StatementsContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_statements;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStatements) {
            return visitor.visitStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_statement;
    }
    public override copyFrom(ctx: StatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXPLAIN_, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public explainOption(): ExplainOptionContext[];
    public explainOption(i: number): ExplainOptionContext | null;
    public explainOption(i?: number): ExplainOptionContext[] | ExplainOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExplainOptionContext);
        }

        return this.getRuleContext(i, ExplainOptionContext);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExplain) {
            return visitor.visitExplain(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrepareContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PREPARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PREPARE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPrepare) {
            return visitor.visitPrepare(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public MATERIALIZED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATERIALIZED_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropMaterializedView) {
            return visitor.visitDropMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetMaterializedViewPropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public MATERIALIZED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATERIALIZED_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public PROPERTIES_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PROPERTIES_, 0)!;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetMaterializedViewProperties) {
            return visitor.visitSetMaterializedViewProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UseContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public USE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.USE_, 0)!;
    }
    public schemaIdentifier(): SchemaIdentifierContext {
        return this.getRuleContext(0, SchemaIdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUse) {
            return visitor.visitUse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeallocateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEALLOCATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DEALLOCATE_, 0)!;
    }
    public PREPARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PREPARE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDeallocate) {
            return visitor.visitDeallocate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameTableContext extends StatementContext {
    public _to?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public RENAME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RENAME_, 0)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameTable) {
            return visitor.visitRenameTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommitContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMIT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMIT_, 0)!;
    }
    public WORK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WORK_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCommit) {
            return visitor.visitCommit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateRoleContext extends StatementContext {
    public _catalog?: CatalogIdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public ROLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public ADMIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ADMIN_, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public catalogIdentifier(): CatalogIdentifierContext | null {
        return this.getRuleContext(0, CatalogIdentifierContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRole) {
            return visitor.visitCreateRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropColumnContext extends StatementContext {
    public _column?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public COLUMN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COLUMN_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF_(): antlr.TerminalNode[];
    public IF_(i: number): antlr.TerminalNode | null;
    public IF_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.IF_);
    	} else {
    		return this.getToken(TrinoParser.IF_, i);
    	}
    }
    public EXISTS_(): antlr.TerminalNode[];
    public EXISTS_(i: number): antlr.TerminalNode | null;
    public EXISTS_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.EXISTS_);
    	} else {
    		return this.getToken(TrinoParser.EXISTS_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropColumn) {
            return visitor.visitDropColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesContext extends StatementContext {
    public _pattern?: String_Context;
    public _escape?: String_Context;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public TABLES_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLES_, 0)!;
    }
    public schemaIdentifier(): SchemaIdentifierContext | null {
        return this.getRuleContext(0, SchemaIdentifierContext);
    }
    public LIKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIKE_, 0);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public string_(): String_Context[];
    public string_(i: number): String_Context | null;
    public string_(i?: number): String_Context[] | String_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(String_Context);
        }

        return this.getRuleContext(i, String_Context);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowTables) {
            return visitor.visitShowTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetViewAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public AUTHORIZATION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetViewAuthorization) {
            return visitor.visitSetViewAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCatalogsContext extends StatementContext {
    public _pattern?: String_Context;
    public _escape?: String_Context;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public CATALOGS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CATALOGS_, 0)!;
    }
    public LIKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIKE_, 0);
    }
    public string_(): String_Context[];
    public string_(i: number): String_Context | null;
    public string_(i?: number): String_Context[] | String_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(String_Context);
        }

        return this.getRuleContext(i, String_Context);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowCatalogs) {
            return visitor.visitShowCatalogs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRolesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public ROLES_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLES_, 0)!;
    }
    public CURRENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CURRENT_, 0);
    }
    public catalogIdentifier(): CatalogIdentifierContext | null {
        return this.getRuleContext(0, CatalogIdentifierContext);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowRoles) {
            return visitor.visitShowRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MERGE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MERGE_, 0)!;
    }
    public INTO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INTO_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public USING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.USING_, 0)!;
    }
    public relation(): RelationContext {
        return this.getRuleContext(0, RelationContext)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public aliasIdentifier(): AliasIdentifierContext | null {
        return this.getRuleContext(0, AliasIdentifierContext);
    }
    public mergeCase(): MergeCaseContext[];
    public mergeCase(i: number): MergeCaseContext | null;
    public mergeCase(i?: number): MergeCaseContext[] | MergeCaseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MergeCaseContext);
        }

        return this.getRuleContext(i, MergeCaseContext);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMerge) {
            return visitor.visitMerge(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameColumnContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public _to?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public RENAME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RENAME_, 0)!;
    }
    public COLUMN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COLUMN_, 0)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF_(): antlr.TerminalNode[];
    public IF_(i: number): antlr.TerminalNode | null;
    public IF_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.IF_);
    	} else {
    		return this.getToken(TrinoParser.IF_, i);
    	}
    }
    public EXISTS_(): antlr.TerminalNode[];
    public EXISTS_(i: number): antlr.TerminalNode | null;
    public EXISTS_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.EXISTS_);
    	} else {
    		return this.getToken(TrinoParser.EXISTS_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameColumn) {
            return visitor.visitRenameColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentColumnContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMENT_, 0)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public COLUMN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COLUMN_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IS_, 0)!;
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCommentColumn) {
            return visitor.visitCommentColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RevokeRolesContext extends StatementContext {
    public _catalog?: CatalogIdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REVOKE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.REVOKE_, 0)!;
    }
    public roleIdentifierList(): RoleIdentifierListContext {
        return this.getRuleContext(0, RoleIdentifierListContext)!;
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public principal(): PrincipalContext[];
    public principal(i: number): PrincipalContext | null;
    public principal(i?: number): PrincipalContext[] | PrincipalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalContext);
        }

        return this.getRuleContext(i, PrincipalContext);
    }
    public ADMIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ADMIN_, 0);
    }
    public OPTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OPTION_, 0);
    }
    public FOR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FOR_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public GRANTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRANTED_, 0);
    }
    public BY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BY_, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public catalogIdentifier(): CatalogIdentifierContext | null {
        return this.getRuleContext(0, CatalogIdentifierContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRevokeRoles) {
            return visitor.visitRevokeRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTable) {
            return visitor.visitShowCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnsContext extends StatementContext {
    public _pattern?: String_Context;
    public _escape?: String_Context;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SHOW_, 0);
    }
    public COLUMNS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLUMNS_, 0);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public LIKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIKE_, 0);
    }
    public string_(): String_Context[];
    public string_(i: number): String_Context | null;
    public string_(i?: number): String_Context[] | String_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(String_Context);
        }

        return this.getRuleContext(i, String_Context);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public DESCRIBE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DESCRIBE_, 0);
    }
    public DESC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DESC_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowColumns) {
            return visitor.visitShowColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRoleGrantsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public ROLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLE_, 0)!;
    }
    public GRANTS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GRANTS_, 0)!;
    }
    public catalogIdentifier(): CatalogIdentifierContext | null {
        return this.getRuleContext(0, CatalogIdentifierContext);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowRoleGrants) {
            return visitor.visitShowRoleGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddColumnContext extends StatementContext {
    public _column?: ColumnDefinitionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public ADD_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ADD_, 0)!;
    }
    public COLUMN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COLUMN_, 0)!;
    }
    public columnDefinition(): ColumnDefinitionContext {
        return this.getRuleContext(0, ColumnDefinitionContext)!;
    }
    public IF_(): antlr.TerminalNode[];
    public IF_(i: number): antlr.TerminalNode | null;
    public IF_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.IF_);
    	} else {
    		return this.getToken(TrinoParser.IF_, i);
    	}
    }
    public EXISTS_(): antlr.TerminalNode[];
    public EXISTS_(i: number): antlr.TerminalNode | null;
    public EXISTS_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.EXISTS_);
    	} else {
    		return this.getToken(TrinoParser.EXISTS_, i);
    	}
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAddColumn) {
            return visitor.visitAddColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DenyContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DENY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DENY_, 0)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public PRIVILEGES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRIVILEGES_, 0);
    }
    public schemaIdentifier(): SchemaIdentifierContext | null {
        return this.getRuleContext(0, SchemaIdentifierContext);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public SCHEMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCHEMA_, 0);
    }
    public TABLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDeny) {
            return visitor.visitDeny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetSessionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RESET_, 0)!;
    }
    public SESSION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SESSION_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitResetSession) {
            return visitor.visitResetSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSessionContext extends StatementContext {
    public _pattern?: String_Context;
    public _escape?: String_Context;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public SESSION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SESSION_, 0)!;
    }
    public LIKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIKE_, 0);
    }
    public string_(): String_Context[];
    public string_(i: number): String_Context | null;
    public string_(i?: number): String_Context[] | String_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(String_Context);
        }

        return this.getRuleContext(i, String_Context);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowSession) {
            return visitor.visitShowSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public SCHEMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SCHEMA_, 0)!;
    }
    public newSchemaIdentifier(): NewSchemaIdentifierContext {
        return this.getRuleContext(0, NewSchemaIdentifierContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public AUTHORIZATION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0);
    }
    public principal(): PrincipalContext | null {
        return this.getRuleContext(0, PrincipalContext);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateSchema) {
            return visitor.visitCreateSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSessionAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public SESSION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SESSION_, 0)!;
    }
    public AUTHORIZATION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0)!;
    }
    public authorizationUser(): AuthorizationUserContext {
        return this.getRuleContext(0, AuthorizationUserContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetSessionAuthorization) {
            return visitor.visitSetSessionAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainAnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXPLAIN_, 0)!;
    }
    public ANALYZE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ANALYZE_, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public VERBOSE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VERBOSE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExplainAnalyze) {
            return visitor.visitExplainAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExecuteContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXECUTE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXECUTE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public USING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.USING_, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExecute) {
            return visitor.visitExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public SCHEMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SCHEMA_, 0)!;
    }
    public schemaIdentifier(): SchemaIdentifierContext {
        return this.getRuleContext(0, SchemaIdentifierContext)!;
    }
    public RENAME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RENAME_, 0)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameSchema) {
            return visitor.visitRenameSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropRoleContext extends StatementContext {
    public _catalog?: CatalogIdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public ROLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLE_, 0)!;
    }
    public roleIdentifier(): RoleIdentifierContext {
        return this.getRuleContext(0, RoleIdentifierContext)!;
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public catalogIdentifier(): CatalogIdentifierContext | null {
        return this.getRuleContext(0, CatalogIdentifierContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropRole) {
            return visitor.visitDropRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ANALYZE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ANALYZE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyze) {
            return visitor.visitAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetRoleContext extends StatementContext {
    public _catalog?: CatalogIdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public ROLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLE_, 0)!;
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public NONE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NONE_, 0);
    }
    public roleIdentifier(): RoleIdentifierContext | null {
        return this.getRuleContext(0, RoleIdentifierContext);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public catalogIdentifier(): CatalogIdentifierContext | null {
        return this.getRuleContext(0, CatalogIdentifierContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetRole) {
            return visitor.visitSetRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public functionSpecification(): FunctionSpecificationContext {
        return this.getRuleContext(0, FunctionSpecificationContext)!;
    }
    public OR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OR_, 0);
    }
    public REPLACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPLACE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFunction) {
            return visitor.visitCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropCatalogContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public CATALOG_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CATALOG_, 0)!;
    }
    public catalogIdentifier(): CatalogIdentifierContext {
        return this.getRuleContext(0, CatalogIdentifierContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public CASCADE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CASCADE_, 0);
    }
    public RESTRICT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RESTRICT_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropCatalog) {
            return visitor.visitDropCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowGrantsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public GRANTS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GRANTS_, 0)!;
    }
    public ON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ON_, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public TABLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowGrants) {
            return visitor.visitShowGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public SCHEMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SCHEMA_, 0)!;
    }
    public schemaIdentifier(): SchemaIdentifierContext {
        return this.getRuleContext(0, SchemaIdentifierContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public CASCADE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CASCADE_, 0);
    }
    public RESTRICT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RESTRICT_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropSchema) {
            return visitor.visitDropSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetSessionAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RESET_, 0)!;
    }
    public SESSION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SESSION_, 0)!;
    }
    public AUTHORIZATION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitResetSessionAuthorization) {
            return visitor.visitResetSessionAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTableAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public AUTHORIZATION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetTableAuthorization) {
            return visitor.visitSetTableAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateView) {
            return visitor.visitShowCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public newTableIdentifier(): NewTableIdentifierContext {
        return this.getRuleContext(0, NewTableIdentifierContext)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public tableElement(): TableElementContext[];
    public tableElement(i: number): TableElementContext | null;
    public tableElement(i?: number): TableElementContext[] | TableElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableElementContext);
        }

        return this.getRuleContext(i, TableElementContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public OR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OR_, 0);
    }
    public REPLACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPLACE_, 0);
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StartTransactionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public START_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.START_, 0)!;
    }
    public TRANSACTION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TRANSACTION_, 0)!;
    }
    public transactionMode(): TransactionModeContext[];
    public transactionMode(i: number): TransactionModeContext | null;
    public transactionMode(i?: number): TransactionModeContext[] | TransactionModeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransactionModeContext);
        }

        return this.getRuleContext(i, TransactionModeContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStartTransaction) {
            return visitor.visitStartTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableAsSelectContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public newTableIdentifier(): NewTableIdentifierContext {
        return this.getRuleContext(0, NewTableIdentifierContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public rootQuery(): RootQueryContext | null {
        return this.getRuleContext(0, RootQueryContext);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public OR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OR_, 0);
    }
    public REPLACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPLACE_, 0);
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public WITH_(): antlr.TerminalNode[];
    public WITH_(i: number): antlr.TerminalNode | null;
    public WITH_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.WITH_);
    	} else {
    		return this.getToken(TrinoParser.WITH_, i);
    	}
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public DATA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DATA_, 0);
    }
    public NO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NO_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableAsSelect) {
            return visitor.visitCreateTableAsSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMENT_, 0)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public IS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IS_, 0)!;
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCommentView) {
            return visitor.visitCommentView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStatsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public STATS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.STATS_, 0)!;
    }
    public FOR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FOR_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowStats) {
            return visitor.visitShowStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public SCHEMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SCHEMA_, 0)!;
    }
    public schemaIdentifier(): SchemaIdentifierContext {
        return this.getRuleContext(0, SchemaIdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateSchema) {
            return visitor.visitShowCreateSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InsertContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public insertStatement(): InsertStatementContext {
        return this.getRuleContext(0, InsertStatementContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitInsert) {
            return visitor.visitInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UpdateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public updateStatement(): UpdateStatementContext {
        return this.getRuleContext(0, UpdateStatementContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdate) {
            return visitor.visitUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public FUNCTION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FUNCTION_, 0)!;
    }
    public functionDeclaration(): FunctionDeclarationContext {
        return this.getRuleContext(0, FunctionDeclarationContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RevokeContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REVOKE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.REVOKE_, 0)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public PRIVILEGES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRIVILEGES_, 0);
    }
    public schemaIdentifier(): SchemaIdentifierContext | null {
        return this.getRuleContext(0, SchemaIdentifierContext);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public GRANT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRANT_, 0);
    }
    public OPTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OPTION_, 0);
    }
    public FOR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FOR_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public SCHEMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCHEMA_, 0);
    }
    public TABLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRevoke) {
            return visitor.visitRevoke(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExecuteContext extends StatementContext {
    public _procedureName?: IdentifierContext;
    public _where?: BooleanExpressionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public EXECUTE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXECUTE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public WHERE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WHERE_, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public callArgument(): CallArgumentContext[];
    public callArgument(i: number): CallArgumentContext | null;
    public callArgument(i?: number): CallArgumentContext[] | CallArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CallArgumentContext);
        }

        return this.getRuleContext(i, CallArgumentContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableExecute) {
            return visitor.visitTableExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeleteContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DELETE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DELETE_, 0)!;
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public WHERE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WHERE_, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDelete) {
            return visitor.visitDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeInputContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DESCRIBE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DESCRIBE_, 0)!;
    }
    public INPUT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INPUT_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeInput) {
            return visitor.visitDescribeInput(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStatsForQueryContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public STATS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.STATS_, 0)!;
    }
    public FOR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FOR_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowStatsForQuery) {
            return visitor.visitShowStatsForQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetColumnTypeContext extends StatementContext {
    public _columnName?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode[];
    public ALTER_(i: number): antlr.TerminalNode | null;
    public ALTER_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.ALTER_);
    	} else {
    		return this.getToken(TrinoParser.ALTER_, i);
    	}
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public COLUMN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COLUMN_, 0)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public DATA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DATA_, 0)!;
    }
    public TYPE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TYPE_, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetColumnType) {
            return visitor.visitSetColumnType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatementDefaultContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStatementDefault) {
            return visitor.visitStatementDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTimeZoneContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public TIME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TIME_, 0)!;
    }
    public ZONE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ZONE_, 0)!;
    }
    public LOCAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOCAL_, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetTimeZone) {
            return visitor.visitSetTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TruncateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRUNCATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TRUNCATE_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateTable) {
            return visitor.visitTruncateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public MATERIALIZED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATERIALIZED_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public newViewIdentifier(): NewViewIdentifierContext {
        return this.getRuleContext(0, NewViewIdentifierContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public OR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OR_, 0);
    }
    public REPLACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPLACE_, 0);
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public GRACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRACE_, 0);
    }
    public PERIOD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PERIOD_, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedView) {
            return visitor.visitCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSessionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public SESSION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SESSION_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public EQ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EQ_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetSession) {
            return visitor.visitSetSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public newViewIdentifier(): NewViewIdentifierContext {
        return this.getRuleContext(0, NewViewIdentifierContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public OR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OR_, 0);
    }
    public REPLACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPLACE_, 0);
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public SECURITY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SECURITY_, 0);
    }
    public DEFINER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFINER_, 0);
    }
    public INVOKER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INVOKER_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameMaterializedViewContext extends StatementContext {
    public _to?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public MATERIALIZED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATERIALIZED_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public RENAME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RENAME_, 0)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameMaterializedView) {
            return visitor.visitRenameMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSchemasContext extends StatementContext {
    public _pattern?: String_Context;
    public _escape?: String_Context;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public SCHEMAS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SCHEMAS_, 0)!;
    }
    public catalogIdentifier(): CatalogIdentifierContext | null {
        return this.getRuleContext(0, CatalogIdentifierContext);
    }
    public LIKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIKE_, 0);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public string_(): String_Context[];
    public string_(i: number): String_Context | null;
    public string_(i?: number): String_Context[] | String_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(String_Context);
        }

        return this.getRuleContext(i, String_Context);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowSchemas) {
            return visitor.visitShowSchemas(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSchemaAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public SCHEMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SCHEMA_, 0)!;
    }
    public schemaIdentifier(): SchemaIdentifierContext {
        return this.getRuleContext(0, SchemaIdentifierContext)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public AUTHORIZATION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetSchemaAuthorization) {
            return visitor.visitSetSchemaAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RollbackContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLLBACK_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLLBACK_, 0)!;
    }
    public WORK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WORK_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRollback) {
            return visitor.visitRollback(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMENT_, 0)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public IS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IS_, 0)!;
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCommentTable) {
            return visitor.visitCommentTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExecuteImmediateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXECUTE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXECUTE_, 0)!;
    }
    public IMMEDIATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IMMEDIATE_, 0)!;
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public USING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.USING_, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExecuteImmediate) {
            return visitor.visitExecuteImmediate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameViewContext extends StatementContext {
    public _to?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public RENAME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RENAME_, 0)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameView) {
            return visitor.visitRenameView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetPathContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public PATH_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PATH_, 0)!;
    }
    public pathSpecification(): PathSpecificationContext {
        return this.getRuleContext(0, PathSpecificationContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetPath) {
            return visitor.visitSetPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GrantRolesContext extends StatementContext {
    public _catalog?: CatalogIdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GRANT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GRANT_, 0)!;
    }
    public roleIdentifierList(): RoleIdentifierListContext {
        return this.getRuleContext(0, RoleIdentifierListContext)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public principal(): PrincipalContext[];
    public principal(i: number): PrincipalContext | null;
    public principal(i?: number): PrincipalContext[] | PrincipalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalContext);
        }

        return this.getRuleContext(i, PrincipalContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public ADMIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ADMIN_, 0);
    }
    public OPTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OPTION_, 0);
    }
    public GRANTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRANTED_, 0);
    }
    public BY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BY_, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public catalogIdentifier(): CatalogIdentifierContext | null {
        return this.getRuleContext(0, CatalogIdentifierContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGrantRoles) {
            return visitor.visitGrantRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UseCatalogContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public USE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.USE_, 0)!;
    }
    public catalogIdentifier(): CatalogIdentifierContext {
        return this.getRuleContext(0, CatalogIdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUseCatalog) {
            return visitor.visitUseCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CallContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CALL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CALL_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public callArgument(): CallArgumentContext[];
    public callArgument(i: number): CallArgumentContext | null;
    public callArgument(i?: number): CallArgumentContext[] | CallArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CallArgumentContext);
        }

        return this.getRuleContext(i, CallArgumentContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCall) {
            return visitor.visitCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REFRESH_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.REFRESH_, 0)!;
    }
    public MATERIALIZED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATERIALIZED_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshMaterializedView) {
            return visitor.visitRefreshMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public MATERIALIZED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATERIALIZED_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateMaterializedView) {
            return visitor.visitShowCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateCatalogContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public CATALOG_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CATALOG_, 0)!;
    }
    public USING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.USING_, 0)!;
    }
    public connectorIdentifier(): ConnectorIdentifierContext {
        return this.getRuleContext(0, ConnectorIdentifierContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public AUTHORIZATION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0);
    }
    public principal(): PrincipalContext | null {
        return this.getRuleContext(0, PrincipalContext);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateCatalog) {
            return visitor.visitCreateCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowFunctionsContext extends StatementContext {
    public _pattern?: String_Context;
    public _escape?: String_Context;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public FUNCTIONS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FUNCTIONS_, 0)!;
    }
    public schemaIdentifier(): SchemaIdentifierContext | null {
        return this.getRuleContext(0, SchemaIdentifierContext);
    }
    public LIKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIKE_, 0);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public string_(): String_Context[];
    public string_(i: number): String_Context | null;
    public string_(i?: number): String_Context[] | String_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(String_Context);
        }

        return this.getRuleContext(i, String_Context);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowFunctions) {
            return visitor.visitShowFunctions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeOutputContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DESCRIBE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DESCRIBE_, 0)!;
    }
    public OUTPUT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.OUTPUT_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeOutput) {
            return visitor.visitDescribeOutput(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GrantContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GRANT_(): antlr.TerminalNode[];
    public GRANT_(i: number): antlr.TerminalNode | null;
    public GRANT_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.GRANT_);
    	} else {
    		return this.getToken(TrinoParser.GRANT_, i);
    	}
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public PRIVILEGES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRIVILEGES_, 0);
    }
    public schemaIdentifier(): SchemaIdentifierContext | null {
        return this.getRuleContext(0, SchemaIdentifierContext);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public OPTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OPTION_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public SCHEMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCHEMA_, 0);
    }
    public TABLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGrant) {
            return visitor.visitGrant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTablePropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public PROPERTIES_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PROPERTIES_, 0)!;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetTableProperties) {
            return visitor.visitSetTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INSERT_, 0)!;
    }
    public INTO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INTO_, 0)!;
    }
    public tableReference(): TableReferenceContext {
        return this.getRuleContext(0, TableReferenceContext)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_insertStatement;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateStatementContext extends antlr.ParserRuleContext {
    public _where?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UPDATE_, 0)!;
    }
    public tableReference(): TableReferenceContext {
        return this.getRuleContext(0, TableReferenceContext)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public updateAssignment(): UpdateAssignmentContext[];
    public updateAssignment(i: number): UpdateAssignmentContext | null;
    public updateAssignment(i?: number): UpdateAssignmentContext[] | UpdateAssignmentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdateAssignmentContext);
        }

        return this.getRuleContext(i, UpdateAssignmentContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public WHERE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WHERE_, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_updateStatement;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateStatement) {
            return visitor.visitUpdateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RootQueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public withFunction(): WithFunctionContext | null {
        return this.getRuleContext(0, WithFunctionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_rootQuery;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRootQuery) {
            return visitor.visitRootQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WITH_, 0)!;
    }
    public functionSpecification(): FunctionSpecificationContext[];
    public functionSpecification(i: number): FunctionSpecificationContext | null;
    public functionSpecification(i?: number): FunctionSpecificationContext[] | FunctionSpecificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionSpecificationContext);
        }

        return this.getRuleContext(i, FunctionSpecificationContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_withFunction;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWithFunction) {
            return visitor.visitWithFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryNoWith(): QueryNoWithContext {
        return this.getRuleContext(0, QueryNoWithContext)!;
    }
    public with(): WithContext | null {
        return this.getRuleContext(0, WithContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_query;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQuery) {
            return visitor.visitQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WITH_, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public RECURSIVE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RECURSIVE_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_with;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWith) {
            return visitor.visitWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnDefinition(): ColumnDefinitionContext | null {
        return this.getRuleContext(0, ColumnDefinitionContext);
    }
    public likeClause(): LikeClauseContext | null {
        return this.getRuleContext(0, LikeClauseContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableElement;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableElement) {
            return visitor.visitTableElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_columnDefinition;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitColumnDefinition) {
            return visitor.visitColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeClauseContext extends antlr.ParserRuleContext {
    public _optionType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LIKE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public PROPERTIES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PROPERTIES_, 0);
    }
    public INCLUDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INCLUDING_, 0);
    }
    public EXCLUDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXCLUDING_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_likeClause;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLikeClause) {
            return visitor.visitLikeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_properties;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitProperties) {
            return visitor.visitProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyAssignmentsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public property(): PropertyContext[];
    public property(i: number): PropertyContext | null;
    public property(i?: number): PropertyContext[] | PropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyContext);
        }

        return this.getRuleContext(i, PropertyContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_propertyAssignments;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyAssignments) {
            return visitor.visitPropertyAssignments(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EQ_, 0)!;
    }
    public propertyValue(): PropertyValueContext {
        return this.getRuleContext(0, PropertyValueContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_property;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitProperty) {
            return visitor.visitProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_propertyValue;
    }
    public override copyFrom(ctx: PropertyValueContext): void {
        super.copyFrom(ctx);
    }
}
export class DefaultPropertyValueContext extends PropertyValueContext {
    public constructor(ctx: PropertyValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEFAULT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DEFAULT_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDefaultPropertyValue) {
            return visitor.visitDefaultPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NonDefaultPropertyValueContext extends PropertyValueContext {
    public constructor(ctx: PropertyValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNonDefaultPropertyValue) {
            return visitor.visitNonDefaultPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryNoWithContext extends antlr.ParserRuleContext {
    public _offset?: RowCountContext;
    public _limit?: LimitRowCountContext;
    public _fetchFirst?: RowCountContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryTerm(): QueryTermContext {
        return this.getRuleContext(0, QueryTermContext)!;
    }
    public ORDER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDER_, 0);
    }
    public BY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BY_, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public OFFSET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OFFSET_, 0);
    }
    public LIMIT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIMIT_, 0);
    }
    public FETCH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FETCH_, 0);
    }
    public rowCount(): RowCountContext[];
    public rowCount(i: number): RowCountContext | null;
    public rowCount(i?: number): RowCountContext[] | RowCountContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowCountContext);
        }

        return this.getRuleContext(i, RowCountContext);
    }
    public limitRowCount(): LimitRowCountContext | null {
        return this.getRuleContext(0, LimitRowCountContext);
    }
    public FIRST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FIRST_, 0);
    }
    public NEXT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NEXT_, 0);
    }
    public ROW_(): antlr.TerminalNode[];
    public ROW_(i: number): antlr.TerminalNode | null;
    public ROW_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.ROW_);
    	} else {
    		return this.getToken(TrinoParser.ROW_, i);
    	}
    }
    public ROWS_(): antlr.TerminalNode[];
    public ROWS_(i: number): antlr.TerminalNode | null;
    public ROWS_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.ROWS_);
    	} else {
    		return this.getToken(TrinoParser.ROWS_, i);
    	}
    }
    public ONLY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ONLY_, 0);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public TIES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TIES_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_queryNoWith;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQueryNoWith) {
            return visitor.visitQueryNoWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitRowCountContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public rowCount(): RowCountContext | null {
        return this.getRuleContext(0, RowCountContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_limitRowCount;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLimitRowCount) {
            return visitor.visitLimitRowCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowCountContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INTEGER_VALUE_, 0);
    }
    public QUESTION_MARK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.QUESTION_MARK_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_rowCount;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRowCount) {
            return visitor.visitRowCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryTermContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_queryTerm;
    }
    public override copyFrom(ctx: QueryTermContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryTermDefaultContext extends QueryTermContext {
    public constructor(ctx: QueryTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryPrimary(): QueryPrimaryContext {
        return this.getRuleContext(0, QueryPrimaryContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQueryTermDefault) {
            return visitor.visitQueryTermDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetOperationContext extends QueryTermContext {
    public _left?: QueryTermContext;
    public _operator?: Token | null;
    public _right?: QueryTermContext;
    public constructor(ctx: QueryTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryTerm(): QueryTermContext[];
    public queryTerm(i: number): QueryTermContext | null;
    public queryTerm(i?: number): QueryTermContext[] | QueryTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryTermContext);
        }

        return this.getRuleContext(i, QueryTermContext);
    }
    public INTERSECT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INTERSECT_, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public UNION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNION_, 0);
    }
    public EXCEPT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXCEPT_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetOperation) {
            return visitor.visitSetOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_queryPrimary;
    }
    public override copyFrom(ctx: QueryPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class SubqueryContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public queryNoWith(): QueryNoWithContext {
        return this.getRuleContext(0, QueryNoWithContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSubquery) {
            return visitor.visitSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QueryPrimaryDefaultContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public querySpecification(): QuerySpecificationContext {
        return this.getRuleContext(0, QuerySpecificationContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQueryPrimaryDefault) {
            return visitor.visitQueryPrimaryDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTable) {
            return visitor.visitTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InlineTableContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public VALUES_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VALUES_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitInlineTable) {
            return visitor.visitInlineTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortItemContext extends antlr.ParserRuleContext {
    public _ordering?: Token | null;
    public _nullOrdering?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public NULLS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULLS_, 0);
    }
    public ASC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ASC_, 0);
    }
    public DESC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DESC_, 0);
    }
    public FIRST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FIRST_, 0);
    }
    public LAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LAST_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_sortItem;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSortItem) {
            return visitor.visitSortItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends antlr.ParserRuleContext {
    public _where?: BooleanExpressionContext;
    public _having?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SELECT_, 0)!;
    }
    public selectItem(): SelectItemContext[];
    public selectItem(i: number): SelectItemContext | null;
    public selectItem(i?: number): SelectItemContext[] | SelectItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectItemContext);
        }

        return this.getRuleContext(i, SelectItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public WHERE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WHERE_, 0);
    }
    public GROUP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GROUP_, 0);
    }
    public BY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BY_, 0);
    }
    public groupBy(): GroupByContext | null {
        return this.getRuleContext(0, GroupByContext);
    }
    public HAVING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.HAVING_, 0);
    }
    public WINDOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WINDOW_, 0);
    }
    public windowDefinition(): WindowDefinitionContext[];
    public windowDefinition(i: number): WindowDefinitionContext | null;
    public windowDefinition(i?: number): WindowDefinitionContext[] | WindowDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowDefinitionContext);
        }

        return this.getRuleContext(i, WindowDefinitionContext);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_querySpecification;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQuerySpecification) {
            return visitor.visitQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_fromClause;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingElement(): GroupingElementContext[];
    public groupingElement(i: number): GroupingElementContext | null;
    public groupingElement(i?: number): GroupingElementContext[] | GroupingElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingElementContext);
        }

        return this.getRuleContext(i, GroupingElementContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_groupBy;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGroupBy) {
            return visitor.visitGroupBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_groupingElement;
    }
    public override copyFrom(ctx: GroupingElementContext): void {
        super.copyFrom(ctx);
    }
}
export class MultipleGroupingSetsContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GROUPING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GROUPING_, 0)!;
    }
    public SETS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SETS_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMultipleGroupingSets) {
            return visitor.visitMultipleGroupingSets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SingleGroupingSetContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public groupingSet(): GroupingSetContext {
        return this.getRuleContext(0, GroupingSetContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSingleGroupingSet) {
            return visitor.visitSingleGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CubeContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CUBE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CUBE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCube) {
            return visitor.visitCube(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RollupContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLLUP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLLUP_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRollup) {
            return visitor.visitRollup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_groupingSet;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingSet) {
            return visitor.visitGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowDefinitionContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public windowSpecification(): WindowSpecificationContext {
        return this.getRuleContext(0, WindowSpecificationContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_windowDefinition;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWindowDefinition) {
            return visitor.visitWindowDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecificationContext extends antlr.ParserRuleContext {
    public _existingWindowName?: IdentifierContext;
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PARTITION_, 0);
    }
    public BY_(): antlr.TerminalNode[];
    public BY_(i: number): antlr.TerminalNode | null;
    public BY_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.BY_);
    	} else {
    		return this.getToken(TrinoParser.BY_, i);
    	}
    }
    public ORDER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDER_, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public windowFrame(): WindowFrameContext | null {
        return this.getRuleContext(0, WindowFrameContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_windowSpecification;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWindowSpecification) {
            return visitor.visitWindowSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_namedQuery;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISTINCT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DISTINCT_, 0);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_setQuantifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASTERISK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ASTERISK_, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public aliasIdentifier(): AliasIdentifierContext | null {
        return this.getRuleContext(0, AliasIdentifierContext);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public DOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DOT_, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_selectItem;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSelectItem) {
            return visitor.visitSelectItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_relation;
    }
    public override copyFrom(ctx: RelationContext): void {
        super.copyFrom(ctx);
    }
}
export class RelationDefaultContext extends RelationContext {
    public constructor(ctx: RelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public sampledRelation(): SampledRelationContext {
        return this.getRuleContext(0, SampledRelationContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRelationDefault) {
            return visitor.visitRelationDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinRelationContext extends RelationContext {
    public _left?: RelationContext;
    public _right?: SampledRelationContext;
    public _rightRelation?: RelationContext;
    public constructor(ctx: RelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public CROSS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CROSS_, 0);
    }
    public JOIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.JOIN_, 0);
    }
    public joinType(): JoinTypeContext | null {
        return this.getRuleContext(0, JoinTypeContext);
    }
    public joinCriteria(): JoinCriteriaContext | null {
        return this.getRuleContext(0, JoinCriteriaContext);
    }
    public NATURAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NATURAL_, 0);
    }
    public sampledRelation(): SampledRelationContext | null {
        return this.getRuleContext(0, SampledRelationContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJoinRelation) {
            return visitor.visitJoinRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INNER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INNER_, 0);
    }
    public LEFT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LEFT_, 0);
    }
    public RIGHT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RIGHT_, 0);
    }
    public FULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FULL_, 0);
    }
    public OUTER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OUTER_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_joinType;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJoinType) {
            return visitor.visitJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinCriteriaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ON_, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public USING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.USING_, 0);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public tableIdentifier(): TableIdentifierContext[];
    public tableIdentifier(i: number): TableIdentifierContext | null;
    public tableIdentifier(i?: number): TableIdentifierContext[] | TableIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableIdentifierContext);
        }

        return this.getRuleContext(i, TableIdentifierContext);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_joinCriteria;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJoinCriteria) {
            return visitor.visitJoinCriteria(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampledRelationContext extends antlr.ParserRuleContext {
    public _percentage?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableReference(): TableReferenceContext | null {
        return this.getRuleContext(0, TableReferenceContext);
    }
    public patternRecognition(): PatternRecognitionContext | null {
        return this.getRuleContext(0, PatternRecognitionContext);
    }
    public TABLESAMPLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLESAMPLE_, 0);
    }
    public sampleType(): SampleTypeContext | null {
        return this.getRuleContext(0, SampleTypeContext);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_sampledRelation;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSampledRelation) {
            return visitor.visitSampledRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BERNOULLI_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BERNOULLI_, 0);
    }
    public SYSTEM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SYSTEM_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_sampleType;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSampleType) {
            return visitor.visitSampleType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimsSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEADING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LEADING_, 0);
    }
    public TRAILING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRAILING_, 0);
    }
    public BOTH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BOTH_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_trimsSpecification;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTrimsSpecification) {
            return visitor.visitTrimsSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListAggOverflowBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public TRUNCATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRUNCATE_, 0);
    }
    public listaggCountIndication(): ListaggCountIndicationContext | null {
        return this.getRuleContext(0, ListaggCountIndicationContext);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_listAggOverflowBehavior;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitListAggOverflowBehavior) {
            return visitor.visitListAggOverflowBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListaggCountIndicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COUNT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COUNT_, 0)!;
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public WITHOUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHOUT_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_listaggCountIndication;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitListaggCountIndication) {
            return visitor.visitListaggCountIndication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternRecognitionContext extends antlr.ParserRuleContext {
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aliasedRelation(): AliasedRelationContext {
        return this.getRuleContext(0, AliasedRelationContext)!;
    }
    public MATCH_RECOGNIZE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCH_RECOGNIZE_, 0);
    }
    public LPAREN_(): antlr.TerminalNode[];
    public LPAREN_(i: number): antlr.TerminalNode | null;
    public LPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.LPAREN_);
    	} else {
    		return this.getToken(TrinoParser.LPAREN_, i);
    	}
    }
    public PATTERN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PATTERN_, 0);
    }
    public rowPattern(): RowPatternContext | null {
        return this.getRuleContext(0, RowPatternContext);
    }
    public RPAREN_(): antlr.TerminalNode[];
    public RPAREN_(i: number): antlr.TerminalNode | null;
    public RPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.RPAREN_);
    	} else {
    		return this.getToken(TrinoParser.RPAREN_, i);
    	}
    }
    public DEFINE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFINE_, 0);
    }
    public variableDefinition(): VariableDefinitionContext[];
    public variableDefinition(i: number): VariableDefinitionContext | null;
    public variableDefinition(i?: number): VariableDefinitionContext[] | VariableDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDefinitionContext);
        }

        return this.getRuleContext(i, VariableDefinitionContext);
    }
    public PARTITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PARTITION_, 0);
    }
    public BY_(): antlr.TerminalNode[];
    public BY_(i: number): antlr.TerminalNode | null;
    public BY_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.BY_);
    	} else {
    		return this.getToken(TrinoParser.BY_, i);
    	}
    }
    public ORDER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDER_, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public MEASURES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MEASURES_, 0);
    }
    public measureDefinition(): MeasureDefinitionContext[];
    public measureDefinition(i: number): MeasureDefinitionContext | null;
    public measureDefinition(i?: number): MeasureDefinitionContext[] | MeasureDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MeasureDefinitionContext);
        }

        return this.getRuleContext(i, MeasureDefinitionContext);
    }
    public rowsPerMatch(): RowsPerMatchContext | null {
        return this.getRuleContext(0, RowsPerMatchContext);
    }
    public AFTER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AFTER_, 0);
    }
    public MATCH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCH_, 0);
    }
    public skipTo(): SkipToContext | null {
        return this.getRuleContext(0, SkipToContext);
    }
    public SUBSET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SUBSET_, 0);
    }
    public subsetDefinition(): SubsetDefinitionContext[];
    public subsetDefinition(i: number): SubsetDefinitionContext | null;
    public subsetDefinition(i?: number): SubsetDefinitionContext[] | SubsetDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubsetDefinitionContext);
        }

        return this.getRuleContext(i, SubsetDefinitionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public aliasIdentifier(): AliasIdentifierContext | null {
        return this.getRuleContext(0, AliasIdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public INITIAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INITIAL_, 0);
    }
    public SEEK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SEEK_, 0);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_patternRecognition;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPatternRecognition) {
            return visitor.visitPatternRecognition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MeasureDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public aliasIdentifier(): AliasIdentifierContext {
        return this.getRuleContext(0, AliasIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_measureDefinition;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMeasureDefinition) {
            return visitor.visitMeasureDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowsPerMatchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ONE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ONE_, 0);
    }
    public ROW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROW_, 0);
    }
    public PER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PER_, 0)!;
    }
    public MATCH_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATCH_, 0)!;
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public ROWS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROWS_, 0);
    }
    public emptyMatchHandling(): EmptyMatchHandlingContext | null {
        return this.getRuleContext(0, EmptyMatchHandlingContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_rowsPerMatch;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRowsPerMatch) {
            return visitor.visitRowsPerMatch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EmptyMatchHandlingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SHOW_, 0);
    }
    public EMPTY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EMPTY_, 0);
    }
    public MATCHES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCHES_, 0);
    }
    public OMIT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OMIT_, 0);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public UNMATCHED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNMATCHED_, 0);
    }
    public ROWS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROWS_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_emptyMatchHandling;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitEmptyMatchHandling) {
            return visitor.visitEmptyMatchHandling(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkipToContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SKIP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SKIP_, 0)!;
    }
    public TO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TO_, 0);
    }
    public PAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PAST_, 0);
    }
    public LAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LAST_, 0);
    }
    public ROW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROW_, 0);
    }
    public NEXT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NEXT_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public FIRST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FIRST_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_skipTo;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSkipTo) {
            return visitor.visitSkipTo(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubsetDefinitionContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public _identifier?: IdentifierContext;
    public _union: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EQ_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_subsetDefinition;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSubsetDefinition) {
            return visitor.visitSubsetDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public aliasIdentifier(): AliasIdentifierContext {
        return this.getRuleContext(0, AliasIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_variableDefinition;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitVariableDefinition) {
            return visitor.visitVariableDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasedRelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relationPrimary(): RelationPrimaryContext {
        return this.getRuleContext(0, RelationPrimaryContext)!;
    }
    public aliasIdentifier(): AliasIdentifierContext | null {
        return this.getRuleContext(0, AliasIdentifierContext);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_aliasedRelation;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAliasedRelation) {
            return visitor.visitAliasedRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAliasesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext[];
    public columnIdentifier(i: number): ColumnIdentifierContext | null;
    public columnIdentifier(i?: number): ColumnIdentifierContext[] | ColumnIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnIdentifierContext);
        }

        return this.getRuleContext(i, ColumnIdentifierContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_columnAliases;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitColumnAliases) {
            return visitor.visitColumnAliases(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_relationPrimary;
    }
    public override copyFrom(ctx: RelationPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class SubqueryRelationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryRelation) {
            return visitor.visitSubqueryRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedRelationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public relation(): RelationContext {
        return this.getRuleContext(0, RelationContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedRelation) {
            return visitor.visitParenthesizedRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnnestContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNNEST_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UNNEST_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public ORDINALITY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDINALITY_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUnnest) {
            return visitor.visitUnnest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableFunctionInvocationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public tableFunctionCall(): TableFunctionCallContext {
        return this.getRuleContext(0, TableFunctionCallContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionInvocation) {
            return visitor.visitTableFunctionInvocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableIdentifierRelationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public queryPeriod(): QueryPeriodContext | null {
        return this.getRuleContext(0, QueryPeriodContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableIdentifierRelation) {
            return visitor.visitTableIdentifierRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LateralContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LATERAL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LATERAL_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLateral) {
            return visitor.visitLateral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public tableFunctionArgument(): TableFunctionArgumentContext[];
    public tableFunctionArgument(i: number): TableFunctionArgumentContext | null;
    public tableFunctionArgument(i?: number): TableFunctionArgumentContext[] | TableFunctionArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableFunctionArgumentContext);
        }

        return this.getRuleContext(i, TableFunctionArgumentContext);
    }
    public COPARTITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COPARTITION_, 0);
    }
    public copartitionTables(): CopartitionTablesContext[];
    public copartitionTables(i: number): CopartitionTablesContext | null;
    public copartitionTables(i?: number): CopartitionTablesContext[] | CopartitionTablesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CopartitionTablesContext);
        }

        return this.getRuleContext(i, CopartitionTablesContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableFunctionCall;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionCall) {
            return visitor.visitTableFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgument(): TableArgumentContext | null {
        return this.getRuleContext(0, TableArgumentContext);
    }
    public descriptorArgument(): DescriptorArgumentContext | null {
        return this.getRuleContext(0, DescriptorArgumentContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public RDOUBLEARROW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RDOUBLEARROW_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableFunctionArgument;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionArgument) {
            return visitor.visitTableFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgumentRelation(): TableArgumentRelationContext {
        return this.getRuleContext(0, TableArgumentRelationContext)!;
    }
    public PARTITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PARTITION_, 0);
    }
    public BY_(): antlr.TerminalNode[];
    public BY_(i: number): antlr.TerminalNode | null;
    public BY_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.BY_);
    	} else {
    		return this.getToken(TrinoParser.BY_, i);
    	}
    }
    public PRUNE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRUNE_, 0);
    }
    public WHEN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WHEN_, 0);
    }
    public EMPTY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EMPTY_, 0);
    }
    public KEEP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEEP_, 0);
    }
    public ORDER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDER_, 0);
    }
    public LPAREN_(): antlr.TerminalNode[];
    public LPAREN_(i: number): antlr.TerminalNode | null;
    public LPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.LPAREN_);
    	} else {
    		return this.getToken(TrinoParser.LPAREN_, i);
    	}
    }
    public RPAREN_(): antlr.TerminalNode[];
    public RPAREN_(i: number): antlr.TerminalNode | null;
    public RPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.RPAREN_);
    	} else {
    		return this.getToken(TrinoParser.RPAREN_, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableArgument;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgument) {
            return visitor.visitTableArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentRelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableArgumentRelation;
    }
    public override copyFrom(ctx: TableArgumentRelationContext): void {
        super.copyFrom(ctx);
    }
}
export class TableArgumentQueryContext extends TableArgumentRelationContext {
    public constructor(ctx: TableArgumentRelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public aliasIdentifier(): AliasIdentifierContext | null {
        return this.getRuleContext(0, AliasIdentifierContext);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentQuery) {
            return visitor.visitTableArgumentQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableArgumentTableContext extends TableArgumentRelationContext {
    public constructor(ctx: TableArgumentRelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public aliasIdentifier(): AliasIdentifierContext | null {
        return this.getRuleContext(0, AliasIdentifierContext);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentTable) {
            return visitor.visitTableArgumentTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescriptorArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DESCRIPTOR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DESCRIPTOR_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public descriptorField(): DescriptorFieldContext[];
    public descriptorField(i: number): DescriptorFieldContext | null;
    public descriptorField(i?: number): DescriptorFieldContext[] | DescriptorFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DescriptorFieldContext);
        }

        return this.getRuleContext(i, DescriptorFieldContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public CAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CAST_, 0);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_descriptorArgument;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDescriptorArgument) {
            return visitor.visitDescriptorArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescriptorFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_descriptorField;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDescriptorField) {
            return visitor.visitDescriptorField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopartitionTablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_copartitionTables;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCopartitionTables) {
            return visitor.visitCopartitionTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_expression;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_booleanExpression;
    }
    public override copyFrom(ctx: BooleanExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class LogicalNotContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NOT_, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalNot) {
            return visitor.visitLogicalNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicatedContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public predicate_(): Predicate_Context | null {
        return this.getRuleContext(0, Predicate_Context);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPredicated) {
            return visitor.visitPredicated(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OrContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public OR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.OR_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitOr) {
            return visitor.visitOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AndContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public AND_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AND_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAnd) {
            return visitor.visitAnd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Predicate_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_predicate_;
    }
    public override copyFrom(ctx: Predicate_Context): void {
        super.copyFrom(ctx);
    }
}
export class ComparisonContext extends Predicate_Context {
    public _right?: ValueExpressionContext;
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitComparison) {
            return visitor.visitComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LikeContext extends Predicate_Context {
    public _pattern?: ValueExpressionContext;
    public _escape?: ValueExpressionContext;
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LIKE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LIKE_, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLike) {
            return visitor.visitLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InSubqueryContext extends Predicate_Context {
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IN_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitInSubquery) {
            return visitor.visitInSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DistinctFromContext extends Predicate_Context {
    public _right?: ValueExpressionContext;
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IS_, 0)!;
    }
    public DISTINCT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DISTINCT_, 0)!;
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDistinctFrom) {
            return visitor.visitDistinctFrom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InListContext extends Predicate_Context {
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IN_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitInList) {
            return visitor.visitInList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullPredicateContext extends Predicate_Context {
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IS_, 0)!;
    }
    public NULL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NULL_, 0)!;
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNullPredicate) {
            return visitor.visitNullPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BetweenContext extends Predicate_Context {
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BETWEEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.BETWEEN_, 0)!;
    }
    public AND_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AND_, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBetween) {
            return visitor.visitBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuantifiedComparisonContext extends Predicate_Context {
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public comparisonQuantifier(): ComparisonQuantifierContext {
        return this.getRuleContext(0, ComparisonQuantifierContext)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedComparison) {
            return visitor.visitQuantifiedComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_valueExpression;
    }
    public override copyFrom(ctx: ValueExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitValueExpressionDefault) {
            return visitor.visitValueExpressionDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConcatenationContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONCAT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CONCAT_, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitConcatenation) {
            return visitor.visitConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public ASTERISK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ASTERISK_, 0);
    }
    public SLASH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SLASH_, 0);
    }
    public PERCENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PERCENT_, 0);
    }
    public PLUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PLUS_, 0);
    }
    public MINUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticBinary) {
            return visitor.visitArithmeticBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticUnaryContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public MINUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUS_, 0);
    }
    public PLUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PLUS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticUnary) {
            return visitor.visitArithmeticUnary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AtTimeZoneContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public AT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AT_, 0)!;
    }
    public timeZoneSpecifier(): TimeZoneSpecifierContext {
        return this.getRuleContext(0, TimeZoneSpecifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAtTimeZone) {
            return visitor.visitAtTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_primaryExpression;
    }
    public override copyFrom(ctx: PrimaryExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class DereferenceContext extends PrimaryExpressionContext {
    public _base_?: PrimaryExpressionContext;
    public _fieldName?: IdentifierContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DOT_, 0)!;
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDereference) {
            return visitor.visitDereference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public DOUBLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DOUBLE_, 0);
    }
    public PRECISION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRECISION_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTypeConstructor) {
            return visitor.visitTypeConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonValueContext extends PrimaryExpressionContext {
    public _emptyBehavior?: JsonValueBehaviorContext;
    public _errorBehavior?: JsonValueBehaviorContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_VALUE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.JSON_VALUE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public RETURNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURNING_, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public ON_(): antlr.TerminalNode[];
    public ON_(i: number): antlr.TerminalNode | null;
    public ON_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.ON_);
    	} else {
    		return this.getToken(TrinoParser.ON_, i);
    	}
    }
    public EMPTY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EMPTY_, 0);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public jsonValueBehavior(): JsonValueBehaviorContext[];
    public jsonValueBehavior(i: number): JsonValueBehaviorContext | null;
    public jsonValueBehavior(i?: number): JsonValueBehaviorContext[] | JsonValueBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueBehaviorContext);
        }

        return this.getRuleContext(i, JsonValueBehaviorContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonValue) {
            return visitor.visitJsonValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SpecialDateTimeFunctionContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _precision?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_DATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CURRENT_DATE_, 0);
    }
    public CURRENT_TIME_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CURRENT_TIME_, 0);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public INTEGER_VALUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INTEGER_VALUE_, 0);
    }
    public CURRENT_TIMESTAMP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CURRENT_TIMESTAMP_, 0);
    }
    public LOCALTIME_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOCALTIME_, 0);
    }
    public LOCALTIMESTAMP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOCALTIMESTAMP_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSpecialDateTimeFunction) {
            return visitor.visitSpecialDateTimeFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubstringContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SUBSTRING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SUBSTRING_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public FOR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FOR_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSubstring) {
            return visitor.visitSubstring(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CastContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CAST_, 0);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public TRY_CAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRY_CAST_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCast) {
            return visitor.visitCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LambdaContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public RARROW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RARROW_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLambda) {
            return visitor.visitLambda(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedExpression) {
            return visitor.visitParenthesizedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TrimContext extends PrimaryExpressionContext {
    public _trimChar?: ValueExpressionContext;
    public _trimSource?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRIM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TRIM_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public trimsSpecification(): TrimsSpecificationContext | null {
        return this.getRuleContext(0, TrimsSpecificationContext);
    }
    public COMMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMA_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTrim) {
            return visitor.visitTrim(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParameterContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUESTION_MARK_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.QUESTION_MARK_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitParameter) {
            return visitor.visitParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NormalizeContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NORMALIZE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NORMALIZE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMA_, 0);
    }
    public normalForm(): NormalFormContext | null {
        return this.getRuleContext(0, NormalFormContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNormalize) {
            return visitor.visitNormalize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonObjectContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_OBJECT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.JSON_OBJECT_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public jsonObjectMember(): JsonObjectMemberContext[];
    public jsonObjectMember(i: number): JsonObjectMemberContext | null;
    public jsonObjectMember(i?: number): JsonObjectMemberContext[] | JsonObjectMemberContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonObjectMemberContext);
        }

        return this.getRuleContext(i, JsonObjectMemberContext);
    }
    public RETURNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURNING_, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public NULL_(): antlr.TerminalNode[];
    public NULL_(i: number): antlr.TerminalNode | null;
    public NULL_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.NULL_);
    	} else {
    		return this.getToken(TrinoParser.NULL_, i);
    	}
    }
    public ON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ON_, 0);
    }
    public ABSENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ABSENT_, 0);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public UNIQUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNIQUE_, 0);
    }
    public WITHOUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHOUT_, 0);
    }
    public FORMAT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FORMAT_, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public KEYS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEYS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonObject) {
            return visitor.visitJsonObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalLiteral) {
            return visitor.visitIntervalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NumericLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNumericLiteral) {
            return visitor.visitNumericLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BooleanLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanValue(): BooleanValueContext {
        return this.getRuleContext(0, BooleanValueContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanLiteral) {
            return visitor.visitBooleanLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonArrayContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_ARRAY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.JSON_ARRAY_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public jsonValueExpression(): JsonValueExpressionContext[];
    public jsonValueExpression(i: number): JsonValueExpressionContext | null;
    public jsonValueExpression(i?: number): JsonValueExpressionContext[] | JsonValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueExpressionContext);
        }

        return this.getRuleContext(i, JsonValueExpressionContext);
    }
    public RETURNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURNING_, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public NULL_(): antlr.TerminalNode[];
    public NULL_(i: number): antlr.TerminalNode | null;
    public NULL_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.NULL_);
    	} else {
    		return this.getToken(TrinoParser.NULL_, i);
    	}
    }
    public ON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ON_, 0);
    }
    public ABSENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ABSENT_, 0);
    }
    public FORMAT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FORMAT_, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonArray) {
            return visitor.visitJsonArray(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleCaseContext extends PrimaryExpressionContext {
    public _operand?: ExpressionContext;
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CASE_, 0)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public ELSE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ELSE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleCase) {
            return visitor.visitSimpleCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NULL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NULL_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNullLiteral) {
            return visitor.visitNullLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RowConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public ROW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROW_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRowConstructor) {
            return visitor.visitRowConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubscriptContext extends PrimaryExpressionContext {
    public _value?: PrimaryExpressionContext;
    public _index?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LSQUARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LSQUARE_, 0)!;
    }
    public RSQUARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RSQUARE_, 0)!;
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSubscript) {
            return visitor.visitSubscript(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonExistsContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_EXISTS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.JSON_EXISTS_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public jsonExistsErrorBehavior(): JsonExistsErrorBehaviorContext | null {
        return this.getRuleContext(0, JsonExistsErrorBehaviorContext);
    }
    public ON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ON_, 0);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonExists) {
            return visitor.visitJsonExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitColumn) {
            return visitor.visitColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentPathContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_PATH_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_PATH_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentPath) {
            return visitor.visitCurrentPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubqueryExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryExpression) {
            return visitor.visitSubqueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BinaryLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BINARY_LITERAL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.BINARY_LITERAL_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBinaryLiteral) {
            return visitor.visitBinaryLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentUserContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_USER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_USER_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentUser) {
            return visitor.visitCurrentUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonQueryContext extends PrimaryExpressionContext {
    public _emptyBehavior?: JsonQueryBehaviorContext;
    public _errorBehavior?: JsonQueryBehaviorContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_QUERY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.JSON_QUERY_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public RETURNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURNING_, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext | null {
        return this.getRuleContext(0, JsonQueryWrapperBehaviorContext);
    }
    public WRAPPER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WRAPPER_, 0);
    }
    public QUOTES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.QUOTES_, 0);
    }
    public ON_(): antlr.TerminalNode[];
    public ON_(i: number): antlr.TerminalNode | null;
    public ON_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.ON_);
    	} else {
    		return this.getToken(TrinoParser.ON_, i);
    	}
    }
    public EMPTY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EMPTY_, 0);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public KEEP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEEP_, 0);
    }
    public OMIT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OMIT_, 0);
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext[];
    public jsonQueryBehavior(i: number): JsonQueryBehaviorContext | null;
    public jsonQueryBehavior(i?: number): JsonQueryBehaviorContext[] | JsonQueryBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonQueryBehaviorContext);
        }

        return this.getRuleContext(i, JsonQueryBehaviorContext);
    }
    public FORMAT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FORMAT_, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public SCALAR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCALAR_, 0);
    }
    public TEXT_STRING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TEXT_STRING_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonQuery) {
            return visitor.visitJsonQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MeasureContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public over(): OverContext {
        return this.getRuleContext(0, OverContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMeasure) {
            return visitor.visitMeasure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExtractContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXTRACT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXTRACT_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExtract) {
            return visitor.visitExtract(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StringLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStringLiteral) {
            return visitor.visitStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ARRAY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ARRAY_, 0)!;
    }
    public LSQUARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LSQUARE_, 0)!;
    }
    public RSQUARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RSQUARE_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitArrayConstructor) {
            return visitor.visitArrayConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallContext extends PrimaryExpressionContext {
    public _label?: IdentifierContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public ASTERISK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ASTERISK_, 0);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public processingMode(): ProcessingModeContext | null {
        return this.getRuleContext(0, ProcessingModeContext);
    }
    public DOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DOT_, 0);
    }
    public filter(): FilterContext | null {
        return this.getRuleContext(0, FilterContext);
    }
    public over(): OverContext | null {
        return this.getRuleContext(0, OverContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public ORDER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDER_, 0);
    }
    public BY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BY_, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public nullTreatment(): NullTreatmentContext | null {
        return this.getRuleContext(0, NullTreatmentContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentSchemaContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_SCHEMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_SCHEMA_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentSchema) {
            return visitor.visitCurrentSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExistsContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXISTS_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExists) {
            return visitor.visitExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PositionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public POSITION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.POSITION_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public IN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPosition) {
            return visitor.visitPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ListaggContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode[];
    public LPAREN_(i: number): antlr.TerminalNode | null;
    public LPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.LPAREN_);
    	} else {
    		return this.getToken(TrinoParser.LPAREN_, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN_(): antlr.TerminalNode[];
    public RPAREN_(i: number): antlr.TerminalNode | null;
    public RPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.RPAREN_);
    	} else {
    		return this.getToken(TrinoParser.RPAREN_, i);
    	}
    }
    public LISTAGG_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LISTAGG_, 0)!;
    }
    public WITHIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHIN_, 0);
    }
    public GROUP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GROUP_, 0);
    }
    public ORDER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDER_, 0);
    }
    public BY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BY_, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public ON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ON_, 0);
    }
    public OVERFLOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OVERFLOW_, 0);
    }
    public listAggOverflowBehavior(): ListAggOverflowBehaviorContext | null {
        return this.getRuleContext(0, ListAggOverflowBehaviorContext);
    }
    public filter(): FilterContext | null {
        return this.getRuleContext(0, FilterContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitListagg) {
            return visitor.visitListagg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchedCaseContext extends PrimaryExpressionContext {
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CASE_, 0)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public ELSE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ELSE_, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSearchedCase) {
            return visitor.visitSearchedCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentCatalogContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_CATALOG_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_CATALOG_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentCatalog) {
            return visitor.visitCurrentCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GroupingOperationContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GROUPING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GROUPING_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingOperation) {
            return visitor.visitGroupingOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonPathInvocationContext extends antlr.ParserRuleContext {
    public _path?: String_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public PASSING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PASSING_, 0);
    }
    public jsonArgument(): JsonArgumentContext[];
    public jsonArgument(i: number): JsonArgumentContext | null;
    public jsonArgument(i?: number): JsonArgumentContext[] | JsonArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonArgumentContext);
        }

        return this.getRuleContext(i, JsonArgumentContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonPathInvocation;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonPathInvocation) {
            return visitor.visitJsonPathInvocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public FORMAT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FORMAT_, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonValueExpression;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonValueExpression) {
            return visitor.visitJsonValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonRepresentationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.JSON_, 0)!;
    }
    public ENCODING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ENCODING_, 0);
    }
    public UTF8_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UTF8_, 0);
    }
    public UTF16_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UTF16_, 0);
    }
    public UTF32_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UTF32_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonRepresentation;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonRepresentation) {
            return visitor.visitJsonRepresentation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public aliasIdentifier(): AliasIdentifierContext {
        return this.getRuleContext(0, AliasIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonArgument;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonArgument) {
            return visitor.visitJsonArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonExistsErrorBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRUE_, 0);
    }
    public FALSE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FALSE_, 0);
    }
    public UNKNOWN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNKNOWN_, 0);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonExistsErrorBehavior;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonExistsErrorBehavior) {
            return visitor.visitJsonExistsErrorBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonValueBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public DEFAULT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFAULT_, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonValueBehavior;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonValueBehavior) {
            return visitor.visitJsonValueBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonQueryWrapperBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITHOUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHOUT_, 0);
    }
    public ARRAY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ARRAY_, 0);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public CONDITIONAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CONDITIONAL_, 0);
    }
    public UNCONDITIONAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNCONDITIONAL_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonQueryWrapperBehavior;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonQueryWrapperBehavior) {
            return visitor.visitJsonQueryWrapperBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonQueryBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public EMPTY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EMPTY_, 0);
    }
    public ARRAY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ARRAY_, 0);
    }
    public OBJECT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OBJECT_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonQueryBehavior;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonQueryBehavior) {
            return visitor.visitJsonQueryBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonObjectMemberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public VALUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VALUE_, 0);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public KEY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEY_, 0);
    }
    public COLON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLON_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonObjectMember;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonObjectMember) {
            return visitor.visitJsonObjectMember(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcessingModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RUNNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RUNNING_, 0);
    }
    public FINAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FINAL_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_processingMode;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitProcessingMode) {
            return visitor.visitProcessingMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullTreatmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IGNORE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IGNORE_, 0);
    }
    public NULLS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NULLS_, 0)!;
    }
    public RESPECT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RESPECT_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_nullTreatment;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNullTreatment) {
            return visitor.visitNullTreatment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class String_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_string_;
    }
    public override copyFrom(ctx: String_Context): void {
        super.copyFrom(ctx);
    }
}
export class UnicodeStringLiteralContext extends String_Context {
    public constructor(ctx: String_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNICODE_STRING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UNICODE_STRING_, 0)!;
    }
    public UESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UESCAPE_, 0);
    }
    public STRING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.STRING_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUnicodeStringLiteral) {
            return visitor.visitUnicodeStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BasicStringLiteralContext extends String_Context {
    public constructor(ctx: String_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STRING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.STRING_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBasicStringLiteral) {
            return visitor.visitBasicStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeZoneSpecifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_timeZoneSpecifier;
    }
    public override copyFrom(ctx: TimeZoneSpecifierContext): void {
        super.copyFrom(ctx);
    }
}
export class TimeZoneIntervalContext extends TimeZoneSpecifierContext {
    public constructor(ctx: TimeZoneSpecifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TIME_, 0)!;
    }
    public ZONE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ZONE_, 0)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTimeZoneInterval) {
            return visitor.visitTimeZoneInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TimeZoneStringContext extends TimeZoneSpecifierContext {
    public constructor(ctx: TimeZoneSpecifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TIME_, 0)!;
    }
    public ZONE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ZONE_, 0)!;
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTimeZoneString) {
            return visitor.visitTimeZoneString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EQ_, 0);
    }
    public NEQ_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NEQ_, 0);
    }
    public LT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LT_, 0);
    }
    public LTE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LTE_, 0);
    }
    public GT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GT_, 0);
    }
    public GTE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GTE_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_comparisonOperator;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public SOME_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SOME_, 0);
    }
    public ANY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ANY_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_comparisonQuantifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonQuantifier) {
            return visitor.visitComparisonQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRUE_, 0);
    }
    public FALSE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FALSE_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_booleanValue;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanValue) {
            return visitor.visitBooleanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public _sign?: Token | null;
    public _from_?: IntervalFieldContext;
    public _to?: IntervalFieldContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTERVAL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INTERVAL_, 0)!;
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public intervalField(): IntervalFieldContext[];
    public intervalField(i: number): IntervalFieldContext | null;
    public intervalField(i?: number): IntervalFieldContext[] | IntervalFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalFieldContext);
        }

        return this.getRuleContext(i, IntervalFieldContext);
    }
    public TO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TO_, 0);
    }
    public PLUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PLUS_, 0);
    }
    public MINUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUS_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_interval;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public YEAR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.YEAR_, 0);
    }
    public MONTH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MONTH_, 0);
    }
    public DAY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DAY_, 0);
    }
    public HOUR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.HOUR_, 0);
    }
    public MINUTE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUTE_, 0);
    }
    public SECOND_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SECOND_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_intervalField;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalField) {
            return visitor.visitIntervalField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NormalFormContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NFD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFD_, 0);
    }
    public NFC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFC_, 0);
    }
    public NFKD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFKD_, 0);
    }
    public NFKC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFKC_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_normalForm;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNormalForm) {
            return visitor.visitNormalForm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_type;
    }
    public override copyFrom(ctx: TypeContext): void {
        super.copyFrom(ctx);
    }
}
export class RowTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROW_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public rowField(): RowFieldContext[];
    public rowField(i: number): RowFieldContext | null;
    public rowField(i?: number): RowFieldContext[] | RowFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFieldContext);
        }

        return this.getRuleContext(i, RowFieldContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRowType) {
            return visitor.visitRowType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalTypeContext extends TypeContext {
    public _from_?: IntervalFieldContext;
    public _to?: IntervalFieldContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INTERVAL_, 0)!;
    }
    public intervalField(): IntervalFieldContext[];
    public intervalField(i: number): IntervalFieldContext | null;
    public intervalField(i?: number): IntervalFieldContext[] | IntervalFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalFieldContext);
        }

        return this.getRuleContext(i, IntervalFieldContext);
    }
    public TO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TO_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalType) {
            return visitor.visitIntervalType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public ARRAY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ARRAY_, 0)!;
    }
    public LSQUARE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LSQUARE_, 0);
    }
    public INTEGER_VALUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INTEGER_VALUE_, 0);
    }
    public RSQUARE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RSQUARE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitArrayType) {
            return visitor.visitArrayType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoublePrecisionTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOUBLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DOUBLE_, 0)!;
    }
    public PRECISION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PRECISION_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDoublePrecisionType) {
            return visitor.visitDoublePrecisionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LegacyArrayTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ARRAY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ARRAY_, 0)!;
    }
    public LT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LT_, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public GT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GT_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLegacyArrayType) {
            return visitor.visitLegacyArrayType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GenericTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public typeParameter(): TypeParameterContext[];
    public typeParameter(i: number): TypeParameterContext | null;
    public typeParameter(i?: number): TypeParameterContext[] | TypeParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypeParameterContext);
        }

        return this.getRuleContext(i, TypeParameterContext);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGenericType) {
            return visitor.visitGenericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DateTimeTypeContext extends TypeContext {
    public _base_?: Token | null;
    public _precision?: TypeParameterContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIMESTAMP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TIMESTAMP_, 0);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public WITHOUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHOUT_, 0);
    }
    public TIME_(): antlr.TerminalNode[];
    public TIME_(i: number): antlr.TerminalNode | null;
    public TIME_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.TIME_);
    	} else {
    		return this.getToken(TrinoParser.TIME_, i);
    	}
    }
    public ZONE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ZONE_, 0);
    }
    public typeParameter(): TypeParameterContext | null {
        return this.getRuleContext(0, TypeParameterContext);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDateTimeType) {
            return visitor.visitDateTimeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LegacyMapTypeContext extends TypeContext {
    public _keyType?: TypeContext;
    public _valueType?: TypeContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MAP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MAP_, 0)!;
    }
    public LT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LT_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMA_, 0)!;
    }
    public GT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GT_, 0)!;
    }
    public type_(): TypeContext[];
    public type_(i: number): TypeContext | null;
    public type_(i?: number): TypeContext[] | TypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypeContext);
        }

        return this.getRuleContext(i, TypeContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLegacyMapType) {
            return visitor.visitLegacyMapType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_rowField;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRowField) {
            return visitor.visitRowField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeParameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INTEGER_VALUE_, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_typeParameter;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTypeParameter) {
            return visitor.visitTypeParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClauseContext extends antlr.ParserRuleContext {
    public _condition?: ExpressionContext;
    public _result?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WHEN_, 0)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_whenClause;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FILTER_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public WHERE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WHERE_, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_filter;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitFilter) {
            return visitor.visitFilter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergeCaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_mergeCase;
    }
    public override copyFrom(ctx: MergeCaseContext): void {
        super.copyFrom(ctx);
    }
}
export class MergeInsertContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public _identifier?: IdentifierContext;
    public _targets: IdentifierContext[] = [];
    public _expression?: ExpressionContext;
    public _values: ExpressionContext[] = [];
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WHEN_, 0)!;
    }
    public NOT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NOT_, 0)!;
    }
    public MATCHED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATCHED_, 0)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public INSERT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INSERT_, 0)!;
    }
    public VALUES_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VALUES_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode[];
    public LPAREN_(i: number): antlr.TerminalNode | null;
    public LPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.LPAREN_);
    	} else {
    		return this.getToken(TrinoParser.LPAREN_, i);
    	}
    }
    public RPAREN_(): antlr.TerminalNode[];
    public RPAREN_(i: number): antlr.TerminalNode | null;
    public RPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.RPAREN_);
    	} else {
    		return this.getToken(TrinoParser.RPAREN_, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public AND_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AND_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMergeInsert) {
            return visitor.visitMergeInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeUpdateContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public _identifier?: IdentifierContext;
    public _targets: IdentifierContext[] = [];
    public _expression?: ExpressionContext;
    public _values: ExpressionContext[] = [];
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WHEN_, 0)!;
    }
    public MATCHED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATCHED_, 0)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public UPDATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UPDATE_, 0)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public EQ_(): antlr.TerminalNode[];
    public EQ_(i: number): antlr.TerminalNode | null;
    public EQ_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.EQ_);
    	} else {
    		return this.getToken(TrinoParser.EQ_, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public AND_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AND_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMergeUpdate) {
            return visitor.visitMergeUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeDeleteContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WHEN_, 0)!;
    }
    public MATCHED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATCHED_, 0)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public DELETE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DELETE_, 0)!;
    }
    public AND_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AND_, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMergeDelete) {
            return visitor.visitMergeDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OverContext extends antlr.ParserRuleContext {
    public _windowName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OVER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.OVER_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public windowSpecification(): WindowSpecificationContext | null {
        return this.getRuleContext(0, WindowSpecificationContext);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_over;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitOver) {
            return visitor.visitOver(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public frameExtent(): FrameExtentContext {
        return this.getRuleContext(0, FrameExtentContext)!;
    }
    public MEASURES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MEASURES_, 0);
    }
    public measureDefinition(): MeasureDefinitionContext[];
    public measureDefinition(i: number): MeasureDefinitionContext | null;
    public measureDefinition(i?: number): MeasureDefinitionContext[] | MeasureDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MeasureDefinitionContext);
        }

        return this.getRuleContext(i, MeasureDefinitionContext);
    }
    public AFTER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AFTER_, 0);
    }
    public MATCH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCH_, 0);
    }
    public skipTo(): SkipToContext | null {
        return this.getRuleContext(0, SkipToContext);
    }
    public PATTERN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PATTERN_, 0);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public rowPattern(): RowPatternContext | null {
        return this.getRuleContext(0, RowPatternContext);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public SUBSET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SUBSET_, 0);
    }
    public subsetDefinition(): SubsetDefinitionContext[];
    public subsetDefinition(i: number): SubsetDefinitionContext | null;
    public subsetDefinition(i?: number): SubsetDefinitionContext[] | SubsetDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubsetDefinitionContext);
        }

        return this.getRuleContext(i, SubsetDefinitionContext);
    }
    public DEFINE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFINE_, 0);
    }
    public variableDefinition(): VariableDefinitionContext[];
    public variableDefinition(i: number): VariableDefinitionContext | null;
    public variableDefinition(i?: number): VariableDefinitionContext[] | VariableDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDefinitionContext);
        }

        return this.getRuleContext(i, VariableDefinitionContext);
    }
    public INITIAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INITIAL_, 0);
    }
    public SEEK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SEEK_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_windowFrame;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrame) {
            return visitor.visitWindowFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameExtentContext extends antlr.ParserRuleContext {
    public _frameType?: Token | null;
    public _start_?: FrameBoundContext;
    public _end_?: FrameBoundContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANGE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RANGE_, 0);
    }
    public frameBound(): FrameBoundContext[];
    public frameBound(i: number): FrameBoundContext | null;
    public frameBound(i?: number): FrameBoundContext[] | FrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameBoundContext);
        }

        return this.getRuleContext(i, FrameBoundContext);
    }
    public ROWS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROWS_, 0);
    }
    public GROUPS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GROUPS_, 0);
    }
    public BETWEEN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BETWEEN_, 0);
    }
    public AND_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AND_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_frameExtent;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitFrameExtent) {
            return visitor.visitFrameExtent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_frameBound;
    }
    public override copyFrom(ctx: FrameBoundContext): void {
        super.copyFrom(ctx);
    }
}
export class BoundedFrameContext extends FrameBoundContext {
    public _boundType?: Token | null;
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public PRECEDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRECEDING_, 0);
    }
    public FOLLOWING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FOLLOWING_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBoundedFrame) {
            return visitor.visitBoundedFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnboundedFrameContext extends FrameBoundContext {
    public _boundType?: Token | null;
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNBOUNDED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UNBOUNDED_, 0)!;
    }
    public PRECEDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRECEDING_, 0);
    }
    public FOLLOWING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FOLLOWING_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUnboundedFrame) {
            return visitor.visitUnboundedFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentRowBoundContext extends FrameBoundContext {
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_, 0)!;
    }
    public ROW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROW_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentRowBound) {
            return visitor.visitCurrentRowBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_rowPattern;
    }
    public override copyFrom(ctx: RowPatternContext): void {
        super.copyFrom(ctx);
    }
}
export class QuantifiedPrimaryContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public patternPrimary(): PatternPrimaryContext {
        return this.getRuleContext(0, PatternPrimaryContext)!;
    }
    public patternQuantifier(): PatternQuantifierContext | null {
        return this.getRuleContext(0, PatternQuantifierContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedPrimary) {
            return visitor.visitQuantifiedPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternConcatenationContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPatternConcatenation) {
            return visitor.visitPatternConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternAlternationContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public VBAR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VBAR_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPatternAlternation) {
            return visitor.visitPatternAlternation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_patternPrimary;
    }
    public override copyFrom(ctx: PatternPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class PatternPermutationContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PERMUTE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PERMUTE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPatternPermutation) {
            return visitor.visitPatternPermutation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionEndAnchorContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOLLAR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DOLLAR_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionEndAnchor) {
            return visitor.visitPartitionEndAnchor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternVariableContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPatternVariable) {
            return visitor.visitPatternVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExcludedPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LCURLYHYPHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LCURLYHYPHEN_, 0)!;
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public RCURLYHYPHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RCURLYHYPHEN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExcludedPattern) {
            return visitor.visitExcludedPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionStartAnchorContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CARET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CARET_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionStartAnchor) {
            return visitor.visitPartitionStartAnchor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class EmptyPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitEmptyPattern) {
            return visitor.visitEmptyPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GroupedPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGroupedPattern) {
            return visitor.visitGroupedPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_patternQuantifier;
    }
    public override copyFrom(ctx: PatternQuantifierContext): void {
        super.copyFrom(ctx);
    }
}
export class ZeroOrMoreQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ASTERISK_, 0)!;
    }
    public QUESTION_MARK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.QUESTION_MARK_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitZeroOrMoreQuantifier) {
            return visitor.visitZeroOrMoreQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OneOrMoreQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PLUS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PLUS_, 0)!;
    }
    public QUESTION_MARK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.QUESTION_MARK_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitOneOrMoreQuantifier) {
            return visitor.visitOneOrMoreQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ZeroOrOneQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUESTION_MARK_(): antlr.TerminalNode[];
    public QUESTION_MARK_(i: number): antlr.TerminalNode | null;
    public QUESTION_MARK_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.QUESTION_MARK_);
    	} else {
    		return this.getToken(TrinoParser.QUESTION_MARK_, i);
    	}
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitZeroOrOneQuantifier) {
            return visitor.visitZeroOrOneQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RangeQuantifierContext extends PatternQuantifierContext {
    public _exactly?: Token | null;
    public _reluctant?: Token | null;
    public _atLeast?: Token | null;
    public _atMost?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LCURLY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LCURLY_, 0)!;
    }
    public RCURLY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RCURLY_, 0)!;
    }
    public INTEGER_VALUE_(): antlr.TerminalNode[];
    public INTEGER_VALUE_(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.INTEGER_VALUE_);
    	} else {
    		return this.getToken(TrinoParser.INTEGER_VALUE_, i);
    	}
    }
    public QUESTION_MARK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.QUESTION_MARK_, 0);
    }
    public COMMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMA_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRangeQuantifier) {
            return visitor.visitRangeQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateAssignmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public EQ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EQ_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_updateAssignment;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateAssignment) {
            return visitor.visitUpdateAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_explainOption;
    }
    public override copyFrom(ctx: ExplainOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainFormatContext extends ExplainOptionContext {
    public _value?: Token | null;
    public constructor(ctx: ExplainOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FORMAT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FORMAT_, 0)!;
    }
    public TEXT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TEXT_, 0);
    }
    public GRAPHVIZ_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRAPHVIZ_, 0);
    }
    public JSON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.JSON_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExplainFormat) {
            return visitor.visitExplainFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainTypeContext extends ExplainOptionContext {
    public _value?: Token | null;
    public constructor(ctx: ExplainOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TYPE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TYPE_, 0)!;
    }
    public LOGICAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOGICAL_, 0);
    }
    public DISTRIBUTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DISTRIBUTED_, 0);
    }
    public VALIDATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VALIDATE_, 0);
    }
    public IO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IO_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExplainType) {
            return visitor.visitExplainType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_transactionMode;
    }
    public override copyFrom(ctx: TransactionModeContext): void {
        super.copyFrom(ctx);
    }
}
export class TransactionAccessModeContext extends TransactionModeContext {
    public _accessMode?: Token | null;
    public constructor(ctx: TransactionModeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public READ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.READ_, 0)!;
    }
    public ONLY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ONLY_, 0);
    }
    public WRITE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WRITE_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionAccessMode) {
            return visitor.visitTransactionAccessMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IsolationLevelContext extends TransactionModeContext {
    public constructor(ctx: TransactionModeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ISOLATION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ISOLATION_, 0)!;
    }
    public LEVEL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LEVEL_, 0)!;
    }
    public levelOfIsolation(): LevelOfIsolationContext {
        return this.getRuleContext(0, LevelOfIsolationContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIsolationLevel) {
            return visitor.visitIsolationLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LevelOfIsolationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_levelOfIsolation;
    }
    public override copyFrom(ctx: LevelOfIsolationContext): void {
        super.copyFrom(ctx);
    }
}
export class ReadUncommittedContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public READ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.READ_, 0)!;
    }
    public UNCOMMITTED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UNCOMMITTED_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitReadUncommitted) {
            return visitor.visitReadUncommitted(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SerializableContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SERIALIZABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SERIALIZABLE_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSerializable) {
            return visitor.visitSerializable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReadCommittedContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public READ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.READ_, 0)!;
    }
    public COMMITTED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMITTED_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitReadCommitted) {
            return visitor.visitReadCommitted(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RepeatableReadContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPEATABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.REPEATABLE_, 0)!;
    }
    public READ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.READ_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRepeatableRead) {
            return visitor.visitRepeatableRead(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_callArgument;
    }
    public override copyFrom(ctx: CallArgumentContext): void {
        super.copyFrom(ctx);
    }
}
export class PositionalArgumentContext extends CallArgumentContext {
    public constructor(ctx: CallArgumentContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPositionalArgument) {
            return visitor.visitPositionalArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NamedArgumentContext extends CallArgumentContext {
    public constructor(ctx: CallArgumentContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public RDOUBLEARROW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RDOUBLEARROW_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNamedArgument) {
            return visitor.visitNamedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_pathElement;
    }
    public override copyFrom(ctx: PathElementContext): void {
        super.copyFrom(ctx);
    }
}
export class QualifiedArgumentContext extends PathElementContext {
    public constructor(ctx: PathElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DOT_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedArgument) {
            return visitor.visitQualifiedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnqualifiedArgumentContext extends PathElementContext {
    public constructor(ctx: PathElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUnqualifiedArgument) {
            return visitor.visitUnqualifiedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathElement(): PathElementContext[];
    public pathElement(i: number): PathElementContext | null;
    public pathElement(i?: number): PathElementContext[] | PathElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PathElementContext);
        }

        return this.getRuleContext(i, PathElementContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_pathSpecification;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPathSpecification) {
            return visitor.visitPathSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FUNCTION_, 0)!;
    }
    public functionDeclaration(): FunctionDeclarationContext {
        return this.getRuleContext(0, FunctionDeclarationContext)!;
    }
    public returnsClause(): ReturnsClauseContext {
        return this.getRuleContext(0, ReturnsClauseContext)!;
    }
    public controlStatement(): ControlStatementContext {
        return this.getRuleContext(0, ControlStatementContext)!;
    }
    public routineCharacteristic(): RoutineCharacteristicContext[];
    public routineCharacteristic(i: number): RoutineCharacteristicContext | null;
    public routineCharacteristic(i?: number): RoutineCharacteristicContext[] | RoutineCharacteristicContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineCharacteristicContext);
        }

        return this.getRuleContext(i, RoutineCharacteristicContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_functionSpecification;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionSpecification) {
            return visitor.visitFunctionSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public parameterDeclaration(): ParameterDeclarationContext[];
    public parameterDeclaration(i: number): ParameterDeclarationContext | null;
    public parameterDeclaration(i?: number): ParameterDeclarationContext[] | ParameterDeclarationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ParameterDeclarationContext);
        }

        return this.getRuleContext(i, ParameterDeclarationContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_functionDeclaration;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionDeclaration) {
            return visitor.visitFunctionDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParameterDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_parameterDeclaration;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitParameterDeclaration) {
            return visitor.visitParameterDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURNS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RETURNS_, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_returnsClause;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitReturnsClause) {
            return visitor.visitReturnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineCharacteristicContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_routineCharacteristic;
    }
    public override copyFrom(ctx: RoutineCharacteristicContext): void {
        super.copyFrom(ctx);
    }
}
export class ReturnsNullOnNullInputCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RETURNS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RETURNS_, 0)!;
    }
    public NULL_(): antlr.TerminalNode[];
    public NULL_(i: number): antlr.TerminalNode | null;
    public NULL_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.NULL_);
    	} else {
    		return this.getToken(TrinoParser.NULL_, i);
    	}
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public INPUT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INPUT_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitReturnsNullOnNullInputCharacteristic) {
            return visitor.visitReturnsNullOnNullInputCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SecurityCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SECURITY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SECURITY_, 0)!;
    }
    public DEFINER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFINER_, 0);
    }
    public INVOKER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INVOKER_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSecurityCharacteristic) {
            return visitor.visitSecurityCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CalledOnNullInputCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CALLED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CALLED_, 0)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public NULL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NULL_, 0)!;
    }
    public INPUT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INPUT_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCalledOnNullInputCharacteristic) {
            return visitor.visitCalledOnNullInputCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMENT_, 0)!;
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCommentCharacteristic) {
            return visitor.visitCommentCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LanguageCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LANGUAGE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LANGUAGE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLanguageCharacteristic) {
            return visitor.visitLanguageCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeterministicCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DETERMINISTIC_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DETERMINISTIC_, 0)!;
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDeterministicCharacteristic) {
            return visitor.visitDeterministicCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ControlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_controlStatement;
    }
    public override copyFrom(ctx: ControlStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class WhileStatementContext extends ControlStatementContext {
    public _label?: IdentifierContext;
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHILE_(): antlr.TerminalNode[];
    public WHILE_(i: number): antlr.TerminalNode | null;
    public WHILE_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.WHILE_);
    	} else {
    		return this.getToken(TrinoParser.WHILE_, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public DO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DO_, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public COLON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLON_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWhileStatement) {
            return visitor.visitWhileStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleCaseStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE_(): antlr.TerminalNode[];
    public CASE_(i: number): antlr.TerminalNode | null;
    public CASE_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.CASE_);
    	} else {
    		return this.getToken(TrinoParser.CASE_, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public caseStatementWhenClause(): CaseStatementWhenClauseContext[];
    public caseStatementWhenClause(i: number): CaseStatementWhenClauseContext | null;
    public caseStatementWhenClause(i?: number): CaseStatementWhenClauseContext[] | CaseStatementWhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CaseStatementWhenClauseContext);
        }

        return this.getRuleContext(i, CaseStatementWhenClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleCaseStatement) {
            return visitor.visitSimpleCaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RepeatStatementContext extends ControlStatementContext {
    public _label?: IdentifierContext;
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPEAT_(): antlr.TerminalNode[];
    public REPEAT_(i: number): antlr.TerminalNode | null;
    public REPEAT_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.REPEAT_);
    	} else {
    		return this.getToken(TrinoParser.REPEAT_, i);
    	}
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public UNTIL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UNTIL_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public COLON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLON_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRepeatStatement) {
            return visitor.visitRepeatStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AssignmentStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EQ_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentStatement) {
            return visitor.visitAssignmentStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LeaveStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEAVE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LEAVE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLeaveStatement) {
            return visitor.visitLeaveStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CompoundStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BEGIN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.BEGIN_, 0)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public variableDeclaration(): VariableDeclarationContext[];
    public variableDeclaration(i: number): VariableDeclarationContext | null;
    public variableDeclaration(i?: number): VariableDeclarationContext[] | VariableDeclarationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDeclarationContext);
        }

        return this.getRuleContext(i, VariableDeclarationContext);
    }
    public SEMICOLON_(): antlr.TerminalNode[];
    public SEMICOLON_(i: number): antlr.TerminalNode | null;
    public SEMICOLON_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.SEMICOLON_);
    	} else {
    		return this.getToken(TrinoParser.SEMICOLON_, i);
    	}
    }
    public sqlStatementList(): SqlStatementListContext | null {
        return this.getRuleContext(0, SqlStatementListContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCompoundStatement) {
            return visitor.visitCompoundStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IterateStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ITERATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ITERATE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIterateStatement) {
            return visitor.visitIterateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LoopStatementContext extends ControlStatementContext {
    public _label?: IdentifierContext;
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOOP_(): antlr.TerminalNode[];
    public LOOP_(i: number): antlr.TerminalNode | null;
    public LOOP_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.LOOP_);
    	} else {
    		return this.getToken(TrinoParser.LOOP_, i);
    	}
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public COLON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLON_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLoopStatement) {
            return visitor.visitLoopStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReturnStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RETURN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RETURN_, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitReturnStatement) {
            return visitor.visitReturnStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IfStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IF_(): antlr.TerminalNode[];
    public IF_(i: number): antlr.TerminalNode | null;
    public IF_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.IF_);
    	} else {
    		return this.getToken(TrinoParser.IF_, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public elseIfClause(): ElseIfClauseContext[];
    public elseIfClause(i: number): ElseIfClauseContext | null;
    public elseIfClause(i?: number): ElseIfClauseContext[] | ElseIfClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ElseIfClauseContext);
        }

        return this.getRuleContext(i, ElseIfClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIfStatement) {
            return visitor.visitIfStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchedCaseStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE_(): antlr.TerminalNode[];
    public CASE_(i: number): antlr.TerminalNode | null;
    public CASE_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.CASE_);
    	} else {
    		return this.getToken(TrinoParser.CASE_, i);
    	}
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public caseStatementWhenClause(): CaseStatementWhenClauseContext[];
    public caseStatementWhenClause(i: number): CaseStatementWhenClauseContext | null;
    public caseStatementWhenClause(i?: number): CaseStatementWhenClauseContext[] | CaseStatementWhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CaseStatementWhenClauseContext);
        }

        return this.getRuleContext(i, CaseStatementWhenClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSearchedCaseStatement) {
            return visitor.visitSearchedCaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseStatementWhenClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WHEN_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_caseStatementWhenClause;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCaseStatementWhenClause) {
            return visitor.visitCaseStatementWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseIfClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSEIF_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ELSEIF_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_elseIfClause;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitElseIfClause) {
            return visitor.visitElseIfClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ELSE_, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_elseClause;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitElseClause) {
            return visitor.visitElseClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DECLARE_, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public DEFAULT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFAULT_, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_variableDeclaration;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitVariableDeclaration) {
            return visitor.visitVariableDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlStatementListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public controlStatement(): ControlStatementContext[];
    public controlStatement(i: number): ControlStatementContext | null;
    public controlStatement(i?: number): ControlStatementContext[] | ControlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ControlStatementContext);
        }

        return this.getRuleContext(i, ControlStatementContext);
    }
    public SEMICOLON_(): antlr.TerminalNode[];
    public SEMICOLON_(i: number): antlr.TerminalNode | null;
    public SEMICOLON_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.SEMICOLON_);
    	} else {
    		return this.getToken(TrinoParser.SEMICOLON_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_sqlStatementList;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSqlStatementList) {
            return visitor.visitSqlStatementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CREATE_, 0);
    }
    public SELECT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SELECT_, 0);
    }
    public DELETE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DELETE_, 0);
    }
    public INSERT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INSERT_, 0);
    }
    public UPDATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UPDATE_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_privilege;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT_(): antlr.TerminalNode[];
    public DOT_(i: number): antlr.TerminalNode | null;
    public DOT_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.DOT_);
    	} else {
    		return this.getToken(TrinoParser.DOT_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_qualifiedName;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPeriodContext extends antlr.ParserRuleContext {
    public _end?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FOR_, 0)!;
    }
    public rangeType(): RangeTypeContext {
        return this.getRuleContext(0, RangeTypeContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public OF_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.OF_, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_queryPeriod;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQueryPeriod) {
            return visitor.visitQueryPeriod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RangeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TIMESTAMP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TIMESTAMP_, 0);
    }
    public VERSION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VERSION_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_rangeType;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRangeType) {
            return visitor.visitRangeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_grantor;
    }
    public override copyFrom(ctx: GrantorContext): void {
        super.copyFrom(ctx);
    }
}
export class CurrentUserGrantorContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_USER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_USER_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentUserGrantor) {
            return visitor.visitCurrentUserGrantor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SpecifiedPrincipalContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSpecifiedPrincipal) {
            return visitor.visitSpecifiedPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentRoleGrantorContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_ROLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_ROLE_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentRoleGrantor) {
            return visitor.visitCurrentRoleGrantor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_principal;
    }
    public override copyFrom(ctx: PrincipalContext): void {
        super.copyFrom(ctx);
    }
}
export class UnspecifiedPrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUnspecifiedPrincipal) {
            return visitor.visitUnspecifiedPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UserPrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public USER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.USER_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUserPrincipal) {
            return visitor.visitUserPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RolePrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRolePrincipal) {
            return visitor.visitRolePrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleIdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifier(): RoleIdentifierContext[];
    public roleIdentifier(i: number): RoleIdentifierContext | null;
    public roleIdentifier(i?: number): RoleIdentifierContext[] | RoleIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleIdentifierContext);
        }

        return this.getRuleContext(i, RoleIdentifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_roleIdentifierList;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRoleIdentifierList) {
            return visitor.visitRoleIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_identifier;
    }
    public override copyFrom(ctx: IdentifierContext): void {
        super.copyFrom(ctx);
    }
}
export class BackQuotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BACKQUOTED_IDENTIFIER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.BACKQUOTED_IDENTIFIER_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBackQuotedIdentifier) {
            return visitor.visitBackQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUOTED_IDENTIFIER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.QUOTED_IDENTIFIER_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQuotedIdentifier) {
            return visitor.visitQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DigitIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DIGIT_IDENTIFIER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DIGIT_IDENTIFIER_, 0)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDigitIdentifier) {
            return visitor.visitDigitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnquotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IDENTIFIER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IDENTIFIER_, 0);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUnquotedIdentifier) {
            return visitor.visitUnquotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CatalogNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_catalogName;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCatalogName) {
            return visitor.visitCatalogName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CatalogIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public catalogName(): CatalogNameContext {
        return this.getRuleContext(0, CatalogNameContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_catalogIdentifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCatalogIdentifier) {
            return visitor.visitCatalogIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_schemaName;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaName) {
            return visitor.visitSchemaName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public catalogIdentifier(): CatalogIdentifierContext {
        return this.getRuleContext(0, CatalogIdentifierContext)!;
    }
    public DOT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DOT_, 0)!;
    }
    public schemaName(): SchemaNameContext {
        return this.getRuleContext(0, SchemaNameContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_schemaIdentifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaIdentifier) {
            return visitor.visitSchemaIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public aliasIdentifier(): AliasIdentifierContext | null {
        return this.getRuleContext(0, AliasIdentifierContext);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableReference;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableReference) {
            return visitor.visitTableReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableName;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public schemaIdentifier(): SchemaIdentifierContext | null {
        return this.getRuleContext(0, SchemaIdentifierContext);
    }
    public DOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DOT_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableIdentifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableIdentifier) {
            return visitor.visitTableIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_viewIdentifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitViewIdentifier) {
            return visitor.visitViewIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_columnIdentifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitColumnIdentifier) {
            return visitor.visitColumnIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_aliasIdentifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAliasIdentifier) {
            return visitor.visitAliasIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NewSchemaIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schemaIdentifier(): SchemaIdentifierContext {
        return this.getRuleContext(0, SchemaIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_newSchemaIdentifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNewSchemaIdentifier) {
            return visitor.visitNewSchemaIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NewTableIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public newSchemaIdentifier(): NewSchemaIdentifierContext | null {
        return this.getRuleContext(0, NewSchemaIdentifierContext);
    }
    public DOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DOT_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_newTableIdentifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNewTableIdentifier) {
            return visitor.visitNewTableIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NewViewIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public newTableIdentifier(): NewTableIdentifierContext {
        return this.getRuleContext(0, NewTableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_newViewIdentifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNewViewIdentifier) {
            return visitor.visitNewViewIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_roleIdentifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRoleIdentifier) {
            return visitor.visitRoleIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConnectorIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_connectorIdentifier;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitConnectorIdentifier) {
            return visitor.visitConnectorIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_number;
    }
    public override copyFrom(ctx: NumberContext): void {
        super.copyFrom(ctx);
    }
}
export class DecimalLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DECIMAL_VALUE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DECIMAL_VALUE_, 0)!;
    }
    public MINUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDecimalLiteral) {
            return visitor.visitDecimalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoubleLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOUBLE_VALUE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DOUBLE_VALUE_, 0)!;
    }
    public MINUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDoubleLiteral) {
            return visitor.visitDoubleLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntegerLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTEGER_VALUE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INTEGER_VALUE_, 0)!;
    }
    public MINUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUS_, 0);
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIntegerLiteral) {
            return visitor.visitIntegerLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AuthorizationUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_authorizationUser;
    }
    public override copyFrom(ctx: AuthorizationUserContext): void {
        super.copyFrom(ctx);
    }
}
export class StringUserContext extends AuthorizationUserContext {
    public constructor(ctx: AuthorizationUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStringUser) {
            return visitor.visitStringUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IdentifierUserContext extends AuthorizationUserContext {
    public constructor(ctx: AuthorizationUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierUser) {
            return visitor.visitIdentifierUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABSENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ABSENT_, 0);
    }
    public ADD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ADD_, 0);
    }
    public ADMIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ADMIN_, 0);
    }
    public AFTER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AFTER_, 0);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public ANALYZE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ANALYZE_, 0);
    }
    public ANY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ANY_, 0);
    }
    public ARRAY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ARRAY_, 0);
    }
    public ASC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ASC_, 0);
    }
    public AT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AT_, 0);
    }
    public AUTHORIZATION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0);
    }
    public BEGIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BEGIN_, 0);
    }
    public BERNOULLI_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BERNOULLI_, 0);
    }
    public BOTH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BOTH_, 0);
    }
    public CALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CALL_, 0);
    }
    public CALLED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CALLED_, 0);
    }
    public CASCADE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CASCADE_, 0);
    }
    public CATALOG_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CATALOG_, 0);
    }
    public CATALOGS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CATALOGS_, 0);
    }
    public COLUMN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLUMN_, 0);
    }
    public COLUMNS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLUMNS_, 0);
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public COMMIT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMIT_, 0);
    }
    public COMMITTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMITTED_, 0);
    }
    public CONDITIONAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CONDITIONAL_, 0);
    }
    public COPARTITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COPARTITION_, 0);
    }
    public COUNT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COUNT_, 0);
    }
    public CURRENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CURRENT_, 0);
    }
    public DATA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DATA_, 0);
    }
    public DATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DATE_, 0);
    }
    public DAY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DAY_, 0);
    }
    public DECLARE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DECLARE_, 0);
    }
    public DEFAULT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFAULT_, 0);
    }
    public DEFINE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFINE_, 0);
    }
    public DEFINER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFINER_, 0);
    }
    public DENY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DENY_, 0);
    }
    public DESC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DESC_, 0);
    }
    public DESCRIPTOR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DESCRIPTOR_, 0);
    }
    public DETERMINISTIC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DETERMINISTIC_, 0);
    }
    public DISTRIBUTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DISTRIBUTED_, 0);
    }
    public DO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DO_, 0);
    }
    public DOUBLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DOUBLE_, 0);
    }
    public ELSEIF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ELSEIF_, 0);
    }
    public EMPTY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EMPTY_, 0);
    }
    public ENCODING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ENCODING_, 0);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public EXCLUDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXCLUDING_, 0);
    }
    public EXPLAIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXPLAIN_, 0);
    }
    public FETCH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FETCH_, 0);
    }
    public FILTER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FILTER_, 0);
    }
    public FINAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FINAL_, 0);
    }
    public FIRST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FIRST_, 0);
    }
    public FOLLOWING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FOLLOWING_, 0);
    }
    public FORMAT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FORMAT_, 0);
    }
    public FUNCTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FUNCTION_, 0);
    }
    public FUNCTIONS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FUNCTIONS_, 0);
    }
    public GRACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRACE_, 0);
    }
    public GRANT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRANT_, 0);
    }
    public GRANTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRANTED_, 0);
    }
    public GRANTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRANTS_, 0);
    }
    public GRAPHVIZ_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRAPHVIZ_, 0);
    }
    public GROUPS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GROUPS_, 0);
    }
    public HOUR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.HOUR_, 0);
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public IGNORE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IGNORE_, 0);
    }
    public IMMEDIATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IMMEDIATE_, 0);
    }
    public INCLUDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INCLUDING_, 0);
    }
    public INITIAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INITIAL_, 0);
    }
    public INPUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INPUT_, 0);
    }
    public INTERVAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INTERVAL_, 0);
    }
    public INVOKER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INVOKER_, 0);
    }
    public IO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IO_, 0);
    }
    public ITERATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ITERATE_, 0);
    }
    public ISOLATION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ISOLATION_, 0);
    }
    public JSON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.JSON_, 0);
    }
    public KEEP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEEP_, 0);
    }
    public KEY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEY_, 0);
    }
    public KEYS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEYS_, 0);
    }
    public LANGUAGE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LANGUAGE_, 0);
    }
    public LAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LAST_, 0);
    }
    public LATERAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LATERAL_, 0);
    }
    public LEADING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LEADING_, 0);
    }
    public LEAVE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LEAVE_, 0);
    }
    public LEVEL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LEVEL_, 0);
    }
    public LIMIT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIMIT_, 0);
    }
    public LOCAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOCAL_, 0);
    }
    public LOGICAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOGICAL_, 0);
    }
    public LOOP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOOP_, 0);
    }
    public MAP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MAP_, 0);
    }
    public MATCH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCH_, 0);
    }
    public MATCHED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCHED_, 0);
    }
    public MATCHES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCHES_, 0);
    }
    public MATCH_RECOGNIZE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCH_RECOGNIZE_, 0);
    }
    public MATERIALIZED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATERIALIZED_, 0);
    }
    public MEASURES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MEASURES_, 0);
    }
    public MERGE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MERGE_, 0);
    }
    public MINUTE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUTE_, 0);
    }
    public MONTH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MONTH_, 0);
    }
    public NESTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NESTED_, 0);
    }
    public NEXT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NEXT_, 0);
    }
    public NFC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFC_, 0);
    }
    public NFD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFD_, 0);
    }
    public NFKC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFKC_, 0);
    }
    public NFKD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFKD_, 0);
    }
    public NO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NO_, 0);
    }
    public NONE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NONE_, 0);
    }
    public NULLIF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULLIF_, 0);
    }
    public NULLS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULLS_, 0);
    }
    public OBJECT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OBJECT_, 0);
    }
    public OF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OF_, 0);
    }
    public OFFSET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OFFSET_, 0);
    }
    public OMIT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OMIT_, 0);
    }
    public ONE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ONE_, 0);
    }
    public ONLY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ONLY_, 0);
    }
    public OPTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OPTION_, 0);
    }
    public ORDINALITY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDINALITY_, 0);
    }
    public OUTPUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OUTPUT_, 0);
    }
    public OVER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OVER_, 0);
    }
    public OVERFLOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OVERFLOW_, 0);
    }
    public PARTITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PARTITION_, 0);
    }
    public PARTITIONS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PARTITIONS_, 0);
    }
    public PASSING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PASSING_, 0);
    }
    public PAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PAST_, 0);
    }
    public PATH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PATH_, 0);
    }
    public PATTERN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PATTERN_, 0);
    }
    public PER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PER_, 0);
    }
    public PERIOD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PERIOD_, 0);
    }
    public PERMUTE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PERMUTE_, 0);
    }
    public PLAN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PLAN_, 0);
    }
    public POSITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.POSITION_, 0);
    }
    public PRECEDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRECEDING_, 0);
    }
    public PRECISION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRECISION_, 0);
    }
    public PRIVILEGES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRIVILEGES_, 0);
    }
    public PROPERTIES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PROPERTIES_, 0);
    }
    public PRUNE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRUNE_, 0);
    }
    public QUOTES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.QUOTES_, 0);
    }
    public RANGE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RANGE_, 0);
    }
    public READ_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.READ_, 0);
    }
    public REFRESH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REFRESH_, 0);
    }
    public RENAME_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RENAME_, 0);
    }
    public REPEAT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPEAT_, 0);
    }
    public REPEATABLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPEATABLE_, 0);
    }
    public REPLACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPLACE_, 0);
    }
    public RESET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RESET_, 0);
    }
    public RESPECT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RESPECT_, 0);
    }
    public RESTRICT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RESTRICT_, 0);
    }
    public RETURN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURN_, 0);
    }
    public RETURNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURNING_, 0);
    }
    public RETURNS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURNS_, 0);
    }
    public REVOKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REVOKE_, 0);
    }
    public ROLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROLE_, 0);
    }
    public ROLES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROLES_, 0);
    }
    public ROLLBACK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROLLBACK_, 0);
    }
    public ROW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROW_, 0);
    }
    public ROWS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROWS_, 0);
    }
    public RUNNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RUNNING_, 0);
    }
    public SCALAR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCALAR_, 0);
    }
    public SCHEMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCHEMA_, 0);
    }
    public SCHEMAS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCHEMAS_, 0);
    }
    public SECOND_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SECOND_, 0);
    }
    public SECURITY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SECURITY_, 0);
    }
    public SEEK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SEEK_, 0);
    }
    public SERIALIZABLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SERIALIZABLE_, 0);
    }
    public SESSION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SESSION_, 0);
    }
    public SET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SET_, 0);
    }
    public SETS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SETS_, 0);
    }
    public SHOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SHOW_, 0);
    }
    public SOME_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SOME_, 0);
    }
    public START_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.START_, 0);
    }
    public STATS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.STATS_, 0);
    }
    public SUBSET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SUBSET_, 0);
    }
    public SUBSTRING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SUBSTRING_, 0);
    }
    public SYSTEM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SYSTEM_, 0);
    }
    public TABLES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLES_, 0);
    }
    public TABLESAMPLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLESAMPLE_, 0);
    }
    public TEXT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TEXT_, 0);
    }
    public TEXT_STRING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TEXT_STRING_, 0);
    }
    public TIES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TIES_, 0);
    }
    public TIME_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TIME_, 0);
    }
    public TIMESTAMP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TIMESTAMP_, 0);
    }
    public TO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TO_, 0);
    }
    public TRAILING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRAILING_, 0);
    }
    public TRANSACTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRANSACTION_, 0);
    }
    public TRUNCATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRUNCATE_, 0);
    }
    public TRY_CAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRY_CAST_, 0);
    }
    public TYPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TYPE_, 0);
    }
    public UNBOUNDED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNBOUNDED_, 0);
    }
    public UNCOMMITTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNCOMMITTED_, 0);
    }
    public UNCONDITIONAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNCONDITIONAL_, 0);
    }
    public UNIQUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNIQUE_, 0);
    }
    public UNKNOWN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNKNOWN_, 0);
    }
    public UNMATCHED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNMATCHED_, 0);
    }
    public UNTIL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNTIL_, 0);
    }
    public UPDATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UPDATE_, 0);
    }
    public USE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.USE_, 0);
    }
    public USER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.USER_, 0);
    }
    public UTF16_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UTF16_, 0);
    }
    public UTF32_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UTF32_, 0);
    }
    public UTF8_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UTF8_, 0);
    }
    public VALIDATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VALIDATE_, 0);
    }
    public VALUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VALUE_, 0);
    }
    public VERBOSE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VERBOSE_, 0);
    }
    public VERSION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VERSION_, 0);
    }
    public VIEW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VIEW_, 0);
    }
    public WHILE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WHILE_, 0);
    }
    public WINDOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WINDOW_, 0);
    }
    public WITHIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHIN_, 0);
    }
    public WITHOUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHOUT_, 0);
    }
    public WORK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WORK_, 0);
    }
    public WRAPPER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WRAPPER_, 0);
    }
    public WRITE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WRITE_, 0);
    }
    public YEAR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.YEAR_, 0);
    }
    public ZONE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ZONE_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_nonReserved;
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
