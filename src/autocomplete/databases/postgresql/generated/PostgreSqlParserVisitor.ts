////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/postgresql/grammar/PostgreSqlParser.g4 by ANTLR 4.13.1

import { AbstractParseTreeVisitor } from "antlr4ng";




import { RootContext } from "./PostgreSqlParser.js";
import { PlsqlRootContext } from "./PostgreSqlParser.js";
import { StatementsContext } from "./PostgreSqlParser.js";
import { StatementContext } from "./PostgreSqlParser.js";
import { PlsqlConsoleCommandContext } from "./PostgreSqlParser.js";
import { CallStatementContext } from "./PostgreSqlParser.js";
import { OptionalWithContext } from "./PostgreSqlParser.js";
import { OptionalRoleListContext } from "./PostgreSqlParser.js";
import { AlterOptionalRoleListContext } from "./PostgreSqlParser.js";
import { AlterRoleElemementContext } from "./PostgreSqlParser.js";
import { CreateRoleElementContext } from "./PostgreSqlParser.js";
import { CreateRoleStatementContext } from "./PostgreSqlParser.js";
import { AlterRoleStatementContext } from "./PostgreSqlParser.js";
import { OptionalInDatabaseContext } from "./PostgreSqlParser.js";
import { AlterRoleSetStatementContext } from "./PostgreSqlParser.js";
import { DropRoleStatementContext } from "./PostgreSqlParser.js";
import { AddOrDropContext } from "./PostgreSqlParser.js";
import { CreateSchemaStatementContext } from "./PostgreSqlParser.js";
import { OptionalSchemaNameContext } from "./PostgreSqlParser.js";
import { OptionalSchemaListContext } from "./PostgreSqlParser.js";
import { SchemaStatementContext } from "./PostgreSqlParser.js";
import { VariableSetStatementContext } from "./PostgreSqlParser.js";
import { SetStatementEndingContext } from "./PostgreSqlParser.js";
import { GenericSetClauseContext } from "./PostgreSqlParser.js";
import { SetStatementMoreContext } from "./PostgreSqlParser.js";
import { VariableNameContext } from "./PostgreSqlParser.js";
import { VariableListContext } from "./PostgreSqlParser.js";
import { VariableValueContext } from "./PostgreSqlParser.js";
import { IsoLevelContext } from "./PostgreSqlParser.js";
import { BooleanOrStringContext } from "./PostgreSqlParser.js";
import { ZoneValueContext } from "./PostgreSqlParser.js";
import { OptionalEncodingContext } from "./PostgreSqlParser.js";
import { NonReservedWordOrSconstContext } from "./PostgreSqlParser.js";
import { VariableResetStatementContext } from "./PostgreSqlParser.js";
import { ResetClauseRestContext } from "./PostgreSqlParser.js";
import { GenericResetClauseContext } from "./PostgreSqlParser.js";
import { SetResetClauseContext } from "./PostgreSqlParser.js";
import { FunctionSetResetClauseContext } from "./PostgreSqlParser.js";
import { VariableShowStatementContext } from "./PostgreSqlParser.js";
import { SetConstraintsStatementContext } from "./PostgreSqlParser.js";
import { ConstraintsSetListContext } from "./PostgreSqlParser.js";
import { ConstraintsSetModeContext } from "./PostgreSqlParser.js";
import { CheckpointStatementContext } from "./PostgreSqlParser.js";
import { DiscardStatementContext } from "./PostgreSqlParser.js";
import { AlterTableStatementContext } from "./PostgreSqlParser.js";
import { AlterTableCommandsContext } from "./PostgreSqlParser.js";
import { PartitionCommandContext } from "./PostgreSqlParser.js";
import { IndexPartitionCommandContext } from "./PostgreSqlParser.js";
import { AlterTableCommandContext } from "./PostgreSqlParser.js";
import { AlterColumnDefaultContext } from "./PostgreSqlParser.js";
import { OptionalDropBehaviorContext } from "./PostgreSqlParser.js";
import { OptionalCollateClauseContext } from "./PostgreSqlParser.js";
import { AlterUsingContext } from "./PostgreSqlParser.js";
import { ReplicaIdentityContext } from "./PostgreSqlParser.js";
import { RelOptionsContext } from "./PostgreSqlParser.js";
import { OptionalRelOptionsContext } from "./PostgreSqlParser.js";
import { RelOptionListContext } from "./PostgreSqlParser.js";
import { RelOptionElemContext } from "./PostgreSqlParser.js";
import { AlterIdentityColumnOptionListContext } from "./PostgreSqlParser.js";
import { AlterIdentityColumnOptionContext } from "./PostgreSqlParser.js";
import { PartitionBoundSpecificationContext } from "./PostgreSqlParser.js";
import { HashPartitionBoundElementContext } from "./PostgreSqlParser.js";
import { HashPartitionBoundContext } from "./PostgreSqlParser.js";
import { AlterCompositeTypeStatementContext } from "./PostgreSqlParser.js";
import { AlterTypeCommandsContext } from "./PostgreSqlParser.js";
import { AlterTypeCommandContext } from "./PostgreSqlParser.js";
import { ClosePortalStatementContext } from "./PostgreSqlParser.js";
import { CopyStatementContext } from "./PostgreSqlParser.js";
import { FromOrToContext } from "./PostgreSqlParser.js";
import { CopyFileNameContext } from "./PostgreSqlParser.js";
import { CopyOptionsContext } from "./PostgreSqlParser.js";
import { CopyOptionsItemContext } from "./PostgreSqlParser.js";
import { CopyDelimiterContext } from "./PostgreSqlParser.js";
import { CopyGenericOptionListContext } from "./PostgreSqlParser.js";
import { CopyGenericOptionElemContext } from "./PostgreSqlParser.js";
import { CopyGenericOptionArgumentContext } from "./PostgreSqlParser.js";
import { CreateStatementContext } from "./PostgreSqlParser.js";
import { TemporaryOptionContext } from "./PostgreSqlParser.js";
import { OptionalTableElementListContext } from "./PostgreSqlParser.js";
import { OptionalTypedTableElementListContext } from "./PostgreSqlParser.js";
import { TableElementListContext } from "./PostgreSqlParser.js";
import { TypedTableElementListContext } from "./PostgreSqlParser.js";
import { TableElementContext } from "./PostgreSqlParser.js";
import { TypedTableElementContext } from "./PostgreSqlParser.js";
import { ColumnDefinitionContext } from "./PostgreSqlParser.js";
import { ColumnOptionsContext } from "./PostgreSqlParser.js";
import { ColumnQualifierListContext } from "./PostgreSqlParser.js";
import { ColumnConstraintContext } from "./PostgreSqlParser.js";
import { ColumnConstraintElementContext } from "./PostgreSqlParser.js";
import { GeneratedWhenContext } from "./PostgreSqlParser.js";
import { ConstraintAttributeContext } from "./PostgreSqlParser.js";
import { TableLikeClauseContext } from "./PostgreSqlParser.js";
import { TableLikeOptionListContext } from "./PostgreSqlParser.js";
import { TableLikeOptionContext } from "./PostgreSqlParser.js";
import { TableConstraintContext } from "./PostgreSqlParser.js";
import { ConstraintElementContext } from "./PostgreSqlParser.js";
import { ColumnListWithParenthesesContext } from "./PostgreSqlParser.js";
import { ColumnListContext } from "./PostgreSqlParser.js";
import { ColumnElementContext } from "./PostgreSqlParser.js";
import { OptionalColumnListIncludeContext } from "./PostgreSqlParser.js";
import { MatchClauseContext } from "./PostgreSqlParser.js";
import { ExclusionConstraintListContext } from "./PostgreSqlParser.js";
import { ExclusionConstraintElementContext } from "./PostgreSqlParser.js";
import { ExclusionWhereClauseContext } from "./PostgreSqlParser.js";
import { KeyActionsContext } from "./PostgreSqlParser.js";
import { OnKeyUpdateClauseContext } from "./PostgreSqlParser.js";
import { OnKeyDeleteClauseContext } from "./PostgreSqlParser.js";
import { KeyActionContext } from "./PostgreSqlParser.js";
import { InheritClauseContext } from "./PostgreSqlParser.js";
import { OptionalPartitionSpecificationContext } from "./PostgreSqlParser.js";
import { PartitionSpecificationContext } from "./PostgreSqlParser.js";
import { PartitionElementsContext } from "./PostgreSqlParser.js";
import { PartitionElementContext } from "./PostgreSqlParser.js";
import { OptionalTableAccessMethodClauseContext } from "./PostgreSqlParser.js";
import { WithContext } from "./PostgreSqlParser.js";
import { OnCommitOptionContext } from "./PostgreSqlParser.js";
import { OptionalTablespaceContext } from "./PostgreSqlParser.js";
import { UsingIndexTablespaceContext } from "./PostgreSqlParser.js";
import { ExistingIndexContext } from "./PostgreSqlParser.js";
import { CreateStatsStatementContext } from "./PostgreSqlParser.js";
import { AlterStatsStatementContext } from "./PostgreSqlParser.js";
import { CreateAsStatementContext } from "./PostgreSqlParser.js";
import { CreateAsTargetContext } from "./PostgreSqlParser.js";
import { WithDataContext } from "./PostgreSqlParser.js";
import { CreateMaterializedViewStatementContext } from "./PostgreSqlParser.js";
import { CreateMaterializedViewTargetContext } from "./PostgreSqlParser.js";
import { RefreshMaterializedViewStatementContext } from "./PostgreSqlParser.js";
import { CreateSequenceStatementContext } from "./PostgreSqlParser.js";
import { AlterSequenceStatementContext } from "./PostgreSqlParser.js";
import { OptionalParenthesizedSeqOptionsListContext } from "./PostgreSqlParser.js";
import { SequenceOptionListContext } from "./PostgreSqlParser.js";
import { SequenceOptionItemContext } from "./PostgreSqlParser.js";
import { NumericOnlyContext } from "./PostgreSqlParser.js";
import { NumericOnlyListContext } from "./PostgreSqlParser.js";
import { CreateProcedureLangStatementContext } from "./PostgreSqlParser.js";
import { HandlerNameContext } from "./PostgreSqlParser.js";
import { OptionalInlineHandlerContext } from "./PostgreSqlParser.js";
import { ValidatorClauseContext } from "./PostgreSqlParser.js";
import { OptionalProceduralContext } from "./PostgreSqlParser.js";
import { CreateTablespaceStatementContext } from "./PostgreSqlParser.js";
import { OptionalTablespaceOwnerContext } from "./PostgreSqlParser.js";
import { DropTablespaceStatementContext } from "./PostgreSqlParser.js";
import { CreateExtensionStatementContext } from "./PostgreSqlParser.js";
import { CreateExtensionOptionItemContext } from "./PostgreSqlParser.js";
import { AlterExtensionStatementContext } from "./PostgreSqlParser.js";
import { AlterExtensionOptionItemContext } from "./PostgreSqlParser.js";
import { AlterExtensionContentsStatementContext } from "./PostgreSqlParser.js";
import { CreateForeignDataWrapperStatementContext } from "./PostgreSqlParser.js";
import { ForwardOptionContext } from "./PostgreSqlParser.js";
import { ForwardOptionsContext } from "./PostgreSqlParser.js";
import { AlterForeignDataWrapperStatementContext } from "./PostgreSqlParser.js";
import { CreateGenericOptionsContext } from "./PostgreSqlParser.js";
import { GenericOptionListContext } from "./PostgreSqlParser.js";
import { AlterGenericOptionsContext } from "./PostgreSqlParser.js";
import { AlterGenericOptionListContext } from "./PostgreSqlParser.js";
import { AlterGenericOptionElemContext } from "./PostgreSqlParser.js";
import { GenericOptionElementContext } from "./PostgreSqlParser.js";
import { GenericOptionNameContext } from "./PostgreSqlParser.js";
import { GenericOptionArgumentContext } from "./PostgreSqlParser.js";
import { CreateForeignServerStatementContext } from "./PostgreSqlParser.js";
import { OptionalTypeContext } from "./PostgreSqlParser.js";
import { ForeignServerVersionContext } from "./PostgreSqlParser.js";
import { AlterForeignServerStatementContext } from "./PostgreSqlParser.js";
import { CreateForeignTableStatementContext } from "./PostgreSqlParser.js";
import { ImportForeignSchemaStatementContext } from "./PostgreSqlParser.js";
import { ImportQualificationTypeContext } from "./PostgreSqlParser.js";
import { ImportQualificationContext } from "./PostgreSqlParser.js";
import { CreateUserMappingStatementContext } from "./PostgreSqlParser.js";
import { AuthIdentifierContext } from "./PostgreSqlParser.js";
import { DropUserMappingStatementContext } from "./PostgreSqlParser.js";
import { AlterUserMappingStatementContext } from "./PostgreSqlParser.js";
import { CreatePolicyStatementContext } from "./PostgreSqlParser.js";
import { AlterPolicyStatementContext } from "./PostgreSqlParser.js";
import { RowSecurityOptionalExpressionContext } from "./PostgreSqlParser.js";
import { RowSecurityOptionalWithCheckContext } from "./PostgreSqlParser.js";
import { RowSecurityOptionalToUserContext } from "./PostgreSqlParser.js";
import { RowSecurityDefaultPermissiveContext } from "./PostgreSqlParser.js";
import { RowSecurityDefaultForCmdContext } from "./PostgreSqlParser.js";
import { RowSecurityCommandContext } from "./PostgreSqlParser.js";
import { CreateAccessMethodStatementContext } from "./PostgreSqlParser.js";
import { AccessMethodTypeContext } from "./PostgreSqlParser.js";
import { CreateTriggerStatementContext } from "./PostgreSqlParser.js";
import { TriggerActionTimeContext } from "./PostgreSqlParser.js";
import { TriggerEventsContext } from "./PostgreSqlParser.js";
import { TriggerOneEventContext } from "./PostgreSqlParser.js";
import { TriggerReferencingContext } from "./PostgreSqlParser.js";
import { TriggerTransitionsContext } from "./PostgreSqlParser.js";
import { TriggerTransitionContext } from "./PostgreSqlParser.js";
import { TransitionOldOrNewContext } from "./PostgreSqlParser.js";
import { TransitionRowOrTableContext } from "./PostgreSqlParser.js";
import { TransitionRelNameContext } from "./PostgreSqlParser.js";
import { TriggerForSpecContext } from "./PostgreSqlParser.js";
import { TriggerForTypeContext } from "./PostgreSqlParser.js";
import { TriggerWhenContext } from "./PostgreSqlParser.js";
import { FunctionOrProcedureContext } from "./PostgreSqlParser.js";
import { TriggerFunctionArgumentsContext } from "./PostgreSqlParser.js";
import { TriggerFunctionArgumentContext } from "./PostgreSqlParser.js";
import { OptionalConstraintFromTableContext } from "./PostgreSqlParser.js";
import { ConstraintAttributeSpecificationContext } from "./PostgreSqlParser.js";
import { ConstraintAttributeElementContext } from "./PostgreSqlParser.js";
import { CreateEventTriggerStatementContext } from "./PostgreSqlParser.js";
import { EventTriggerWhenListContext } from "./PostgreSqlParser.js";
import { EventTriggerWhenItemContext } from "./PostgreSqlParser.js";
import { EventTriggerValueListContext } from "./PostgreSqlParser.js";
import { AlterEventTriggerStatementContext } from "./PostgreSqlParser.js";
import { EnableTriggerContext } from "./PostgreSqlParser.js";
import { CreateAssertionStatementContext } from "./PostgreSqlParser.js";
import { DefineStatementContext } from "./PostgreSqlParser.js";
import { DefinitionContext } from "./PostgreSqlParser.js";
import { DefinitionElementContext } from "./PostgreSqlParser.js";
import { DefinitionArgumentContext } from "./PostgreSqlParser.js";
import { OldAggregateDefinitionContext } from "./PostgreSqlParser.js";
import { OldAggregateElementContext } from "./PostgreSqlParser.js";
import { EnumValueListContext } from "./PostgreSqlParser.js";
import { AlterEnumStatementContext } from "./PostgreSqlParser.js";
import { OptionalIfNotExistsContext } from "./PostgreSqlParser.js";
import { CreateOperatorClassStatementContext } from "./PostgreSqlParser.js";
import { OperatorClassItemListContext } from "./PostgreSqlParser.js";
import { OperatorClassItemContext } from "./PostgreSqlParser.js";
import { OptionalOperatorFamilyContext } from "./PostgreSqlParser.js";
import { OperatorClassPurposeContext } from "./PostgreSqlParser.js";
import { CreateOperatorFamilyStatementContext } from "./PostgreSqlParser.js";
import { AlterOperatorFamilyStatementContext } from "./PostgreSqlParser.js";
import { OperatorClassDropListContext } from "./PostgreSqlParser.js";
import { OperatorClassDropContext } from "./PostgreSqlParser.js";
import { DropOperatorClassStatementContext } from "./PostgreSqlParser.js";
import { DropOperatorFamilyStatementContext } from "./PostgreSqlParser.js";
import { DropOwnedStatementContext } from "./PostgreSqlParser.js";
import { ReassignOwnedStatementContext } from "./PostgreSqlParser.js";
import { DropStatementContext } from "./PostgreSqlParser.js";
import { ObjectTypeAnyNameContext } from "./PostgreSqlParser.js";
import { ObjectTypeNameContext } from "./PostgreSqlParser.js";
import { DropTypeNameContext } from "./PostgreSqlParser.js";
import { ObjectTypeNameOnAnyNameContext } from "./PostgreSqlParser.js";
import { AnyNameListContext } from "./PostgreSqlParser.js";
import { AnyNameContext } from "./PostgreSqlParser.js";
import { AttributesContext } from "./PostgreSqlParser.js";
import { TypeNameListContext } from "./PostgreSqlParser.js";
import { TruncateStatementContext } from "./PostgreSqlParser.js";
import { OptionalRestartSequencesContext } from "./PostgreSqlParser.js";
import { CommentStatementContext } from "./PostgreSqlParser.js";
import { CommentTextContext } from "./PostgreSqlParser.js";
import { SecurityLabelStatementContext } from "./PostgreSqlParser.js";
import { OptionalProviderContext } from "./PostgreSqlParser.js";
import { SecurityLabelContext } from "./PostgreSqlParser.js";
import { FetchStatementContext } from "./PostgreSqlParser.js";
import { FetchArgumentsContext } from "./PostgreSqlParser.js";
import { FromOrInContext } from "./PostgreSqlParser.js";
import { OptionalFromOrInContext } from "./PostgreSqlParser.js";
import { GrantStatementContext } from "./PostgreSqlParser.js";
import { RevokeStatementContext } from "./PostgreSqlParser.js";
import { PrivilegesContext } from "./PostgreSqlParser.js";
import { PrivilegeListContext } from "./PostgreSqlParser.js";
import { PrivilegeContext } from "./PostgreSqlParser.js";
import { PrivilegeTargetContext } from "./PostgreSqlParser.js";
import { GranteeListContext } from "./PostgreSqlParser.js";
import { GranteeContext } from "./PostgreSqlParser.js";
import { OptionalWithGrantOptionContext } from "./PostgreSqlParser.js";
import { GrantPrivilegeStatementContext } from "./PostgreSqlParser.js";
import { RevokePrivilegeStatementContext } from "./PostgreSqlParser.js";
import { OptionalGrantAdminOptionContext } from "./PostgreSqlParser.js";
import { OptionalGrantedByContext } from "./PostgreSqlParser.js";
import { AlterDefaultPrivilegesStatementContext } from "./PostgreSqlParser.js";
import { DefultPrivilegeOptionContext } from "./PostgreSqlParser.js";
import { DefaultPrivelegeActionContext } from "./PostgreSqlParser.js";
import { DefultPrivilegeTargetContext } from "./PostgreSqlParser.js";
import { IndexStatementContext } from "./PostgreSqlParser.js";
import { OptionalAccessMethodClauseContext } from "./PostgreSqlParser.js";
import { IndexParametersContext } from "./PostgreSqlParser.js";
import { IndexElemOptionsContext } from "./PostgreSqlParser.js";
import { IndexElementContext } from "./PostgreSqlParser.js";
import { OptionalIncludeContext } from "./PostgreSqlParser.js";
import { OptionalCollateContext } from "./PostgreSqlParser.js";
import { OptionalClassContext } from "./PostgreSqlParser.js";
import { OptionalAscOrDescContext } from "./PostgreSqlParser.js";
import { OptionalNullsOrderContext } from "./PostgreSqlParser.js";
import { CreateFunctionStatementContext } from "./PostgreSqlParser.js";
import { OptionalOrReplaceContext } from "./PostgreSqlParser.js";
import { FunctionArgumentsListContext } from "./PostgreSqlParser.js";
import { FunctionWithArgumentTypesListContext } from "./PostgreSqlParser.js";
import { FunctionWithArgumentTypesContext } from "./PostgreSqlParser.js";
import { FunctionArgumentsWithDefaultsListContext } from "./PostgreSqlParser.js";
import { FunctionArgumentWithDefaultContext } from "./PostgreSqlParser.js";
import { FunctionArgumentContext } from "./PostgreSqlParser.js";
import { ArgumentClassContext } from "./PostgreSqlParser.js";
import { ParameterNameContext } from "./PostgreSqlParser.js";
import { FunctionReturnContext } from "./PostgreSqlParser.js";
import { FunctionTypeContext } from "./PostgreSqlParser.js";
import { AggregateArgumentsContext } from "./PostgreSqlParser.js";
import { AggregateArgumentsListContext } from "./PostgreSqlParser.js";
import { AggregateWithArgumentTypesContext } from "./PostgreSqlParser.js";
import { AggregateWithArgumentTypesListContext } from "./PostgreSqlParser.js";
import { CreateFunctionOptionListContext } from "./PostgreSqlParser.js";
import { CommonFunctionOptionItemContext } from "./PostgreSqlParser.js";
import { CreateFunctionOptionItemContext } from "./PostgreSqlParser.js";
import { FunctionAsContext } from "./PostgreSqlParser.js";
import { TransformTypeListContext } from "./PostgreSqlParser.js";
import { OptionalDefinitionContext } from "./PostgreSqlParser.js";
import { TableFunctionColumnContext } from "./PostgreSqlParser.js";
import { TableFunctionColumnListContext } from "./PostgreSqlParser.js";
import { AlterFunctionStatementContext } from "./PostgreSqlParser.js";
import { RemoveFunctionStatementContext } from "./PostgreSqlParser.js";
import { RemoveAggregateStatementContext } from "./PostgreSqlParser.js";
import { RemoveOperatorStatementContext } from "./PostgreSqlParser.js";
import { OperatorArgumentTypesContext } from "./PostgreSqlParser.js";
import { AnyOperatorContext } from "./PostgreSqlParser.js";
import { OperatorWithArgumentTypesListContext } from "./PostgreSqlParser.js";
import { OperatorWithArgumentTypesContext } from "./PostgreSqlParser.js";
import { DoStatementContext } from "./PostgreSqlParser.js";
import { DoStatementOptionsListContext } from "./PostgreSqlParser.js";
import { DoStatementOptionItemContext } from "./PostgreSqlParser.js";
import { CreateCastStatementContext } from "./PostgreSqlParser.js";
import { CastContextContext } from "./PostgreSqlParser.js";
import { DropCastStatementContext } from "./PostgreSqlParser.js";
import { OptionalIfExistsContext } from "./PostgreSqlParser.js";
import { CreateTransformStatementContext } from "./PostgreSqlParser.js";
import { TransformElementListContext } from "./PostgreSqlParser.js";
import { DropTransformStatementContext } from "./PostgreSqlParser.js";
import { ReindexStatementContext } from "./PostgreSqlParser.js";
import { ReindexTargetTypeContext } from "./PostgreSqlParser.js";
import { ReindexOptionListContext } from "./PostgreSqlParser.js";
import { ReindexOptionElementContext } from "./PostgreSqlParser.js";
import { AlterTablespaceStatementContext } from "./PostgreSqlParser.js";
import { RenameStatementContext } from "./PostgreSqlParser.js";
import { OptionalColumnContext } from "./PostgreSqlParser.js";
import { OptionalSetDataContext } from "./PostgreSqlParser.js";
import { AlterObjectDependsStatementContext } from "./PostgreSqlParser.js";
import { AlterObjectSchemaStatementContext } from "./PostgreSqlParser.js";
import { AlterOperatorStatementContext } from "./PostgreSqlParser.js";
import { OperatorDefinitionListContext } from "./PostgreSqlParser.js";
import { OperatorDefinitionElementContext } from "./PostgreSqlParser.js";
import { OperatorDefinitionArgumentContext } from "./PostgreSqlParser.js";
import { AlterTypeStatementContext } from "./PostgreSqlParser.js";
import { AlterOwnerStatementContext } from "./PostgreSqlParser.js";
import { CreatePublicationStatementContext } from "./PostgreSqlParser.js";
import { OptionalPublicationForTablesContext } from "./PostgreSqlParser.js";
import { PublicationForTablesContext } from "./PostgreSqlParser.js";
import { AlterPublicationStatementContext } from "./PostgreSqlParser.js";
import { CreateSubscriptionStatementContext } from "./PostgreSqlParser.js";
import { PublicationNameListContext } from "./PostgreSqlParser.js";
import { PublicationNameItemContext } from "./PostgreSqlParser.js";
import { AlterSubscriptionStatementContext } from "./PostgreSqlParser.js";
import { DropSubscriptionStatementContext } from "./PostgreSqlParser.js";
import { RuleStatementContext } from "./PostgreSqlParser.js";
import { RuleActionListContext } from "./PostgreSqlParser.js";
import { RuleActionMultiContext } from "./PostgreSqlParser.js";
import { RuleActionStatementContext } from "./PostgreSqlParser.js";
import { RuleActionStatementOrEmptyContext } from "./PostgreSqlParser.js";
import { EventContext } from "./PostgreSqlParser.js";
import { OptionalInsteadContext } from "./PostgreSqlParser.js";
import { NotifyStatementContext } from "./PostgreSqlParser.js";
import { NotifyPayloadContext } from "./PostgreSqlParser.js";
import { ListenStatementContext } from "./PostgreSqlParser.js";
import { UnlistenStatementContext } from "./PostgreSqlParser.js";
import { TransactionStatementContext } from "./PostgreSqlParser.js";
import { OptionalTransactionContext } from "./PostgreSqlParser.js";
import { TransactionModeItemContext } from "./PostgreSqlParser.js";
import { TransactionModeListContext } from "./PostgreSqlParser.js";
import { OptionalTransactionChainContext } from "./PostgreSqlParser.js";
import { ViewStatementContext } from "./PostgreSqlParser.js";
import { OptionalCheckOptionContext } from "./PostgreSqlParser.js";
import { LoadStatementContext } from "./PostgreSqlParser.js";
import { CreateDatabaseStatementContext } from "./PostgreSqlParser.js";
import { CreateDatabaseOptionListContext } from "./PostgreSqlParser.js";
import { CreateDatabaseOptionItemContext } from "./PostgreSqlParser.js";
import { CreateDatabaseOptionNameContext } from "./PostgreSqlParser.js";
import { AlterDatabaseStatementContext } from "./PostgreSqlParser.js";
import { AlterDatabaseSetStatementContext } from "./PostgreSqlParser.js";
import { DropDatabaseStatementContext } from "./PostgreSqlParser.js";
import { AlterCollationStatementContext } from "./PostgreSqlParser.js";
import { AlterSystemStatementContext } from "./PostgreSqlParser.js";
import { CreateDomainStatementContext } from "./PostgreSqlParser.js";
import { AlterDomainStatementContext } from "./PostgreSqlParser.js";
import { AlterDomainCommandContext } from "./PostgreSqlParser.js";
import { OptionalAsContext } from "./PostgreSqlParser.js";
import { AltertsDictionaryStatementContext } from "./PostgreSqlParser.js";
import { AltertsConfigurationStatementContext } from "./PostgreSqlParser.js";
import { CreateConversionStatementContext } from "./PostgreSqlParser.js";
import { ClusterStatementContext } from "./PostgreSqlParser.js";
import { ClusterIndexSpecificationContext } from "./PostgreSqlParser.js";
import { VacuumStatementContext } from "./PostgreSqlParser.js";
import { AnalyzeStatementContext } from "./PostgreSqlParser.js";
import { VacuumAnalyzeOptionListContext } from "./PostgreSqlParser.js";
import { AnalyzeKeywordContext } from "./PostgreSqlParser.js";
import { VacuumAnalyzeOptionElementContext } from "./PostgreSqlParser.js";
import { VacuumAnalyzeOptionNameContext } from "./PostgreSqlParser.js";
import { VacuumAnalyzeOptionArgumentContext } from "./PostgreSqlParser.js";
import { OptionalVerboseContext } from "./PostgreSqlParser.js";
import { OptionalNameListContext } from "./PostgreSqlParser.js";
import { VacuumRelationContext } from "./PostgreSqlParser.js";
import { OptionalVacuumRelationListContext } from "./PostgreSqlParser.js";
import { ExplainStatementContext } from "./PostgreSqlParser.js";
import { ExplainableStatementContext } from "./PostgreSqlParser.js";
import { ExplainOptionElementContext } from "./PostgreSqlParser.js";
import { ExplainOptionNameContext } from "./PostgreSqlParser.js";
import { ExplainOptionArgumentContext } from "./PostgreSqlParser.js";
import { PrepareStatementContext } from "./PostgreSqlParser.js";
import { PrepareTypeClauseContext } from "./PostgreSqlParser.js";
import { PreparableStatementContext } from "./PostgreSqlParser.js";
import { ExecuteStatementContext } from "./PostgreSqlParser.js";
import { ExecuteParameterClauseContext } from "./PostgreSqlParser.js";
import { DeallocateStatementContext } from "./PostgreSqlParser.js";
import { InsertStatementContext } from "./PostgreSqlParser.js";
import { InsertTargetContext } from "./PostgreSqlParser.js";
import { InsertRestContext } from "./PostgreSqlParser.js";
import { OverrideKindContext } from "./PostgreSqlParser.js";
import { InsertColumnListContext } from "./PostgreSqlParser.js";
import { InsertColumnItemContext } from "./PostgreSqlParser.js";
import { OptionalOnConflictContext } from "./PostgreSqlParser.js";
import { OptionalConflictExprContext } from "./PostgreSqlParser.js";
import { ReturningClauseContext } from "./PostgreSqlParser.js";
import { MergeStatementContext } from "./PostgreSqlParser.js";
import { MergeInsertClauseContext } from "./PostgreSqlParser.js";
import { MergeUpdateClauseContext } from "./PostgreSqlParser.js";
import { MergeDeleteClauseContext } from "./PostgreSqlParser.js";
import { DeleteStatementContext } from "./PostgreSqlParser.js";
import { UsingClauseContext } from "./PostgreSqlParser.js";
import { LockStatementContext } from "./PostgreSqlParser.js";
import { OptionalLockContext } from "./PostgreSqlParser.js";
import { LockTypeContext } from "./PostgreSqlParser.js";
import { OptionalNowaitContext } from "./PostgreSqlParser.js";
import { OptionalNowaitOrSkipContext } from "./PostgreSqlParser.js";
import { UpdateStatementContext } from "./PostgreSqlParser.js";
import { SetClauseListContext } from "./PostgreSqlParser.js";
import { SetClauseContext } from "./PostgreSqlParser.js";
import { SetTargetContext } from "./PostgreSqlParser.js";
import { DeclareCursorStatementContext } from "./PostgreSqlParser.js";
import { CursorNameContext } from "./PostgreSqlParser.js";
import { OptionalHoldContext } from "./PostgreSqlParser.js";
import { SelectStatementContext } from "./PostgreSqlParser.js";
import { SelectWithParenthesisContext } from "./PostgreSqlParser.js";
import { SelectWithoutParenthesisContext } from "./PostgreSqlParser.js";
import { SelectClauseContext } from "./PostgreSqlParser.js";
import { SimpleSelectIntersectContext } from "./PostgreSqlParser.js";
import { SimpleSelectStartContext } from "./PostgreSqlParser.js";
import { SimpleSelectPramaryContext } from "./PostgreSqlParser.js";
import { WithClauseContext } from "./PostgreSqlParser.js";
import { CommonTableExpressionContext } from "./PostgreSqlParser.js";
import { OptionalMaterializedContext } from "./PostgreSqlParser.js";
import { IntoClauseContext } from "./PostgreSqlParser.js";
import { OptionalTemporaryTableNameContext } from "./PostgreSqlParser.js";
import { OptionalTableContext } from "./PostgreSqlParser.js";
import { AllOrDistinctContext } from "./PostgreSqlParser.js";
import { DistinctClauseContext } from "./PostgreSqlParser.js";
import { AllClauseContext } from "./PostgreSqlParser.js";
import { OptionalSortClauseContext } from "./PostgreSqlParser.js";
import { SortClauseContext } from "./PostgreSqlParser.js";
import { SortByListContext } from "./PostgreSqlParser.js";
import { SortByContext } from "./PostgreSqlParser.js";
import { SelectLimitContext } from "./PostgreSqlParser.js";
import { OptionalSelectLimitContext } from "./PostgreSqlParser.js";
import { LimitClauseContext } from "./PostgreSqlParser.js";
import { OffsetClauseContext } from "./PostgreSqlParser.js";
import { SelectLimitValueContext } from "./PostgreSqlParser.js";
import { SelectOffsetValueContext } from "./PostgreSqlParser.js";
import { SelectFetchFirstValueContext } from "./PostgreSqlParser.js";
import { AnyConstContext } from "./PostgreSqlParser.js";
import { RowOrRowsContext } from "./PostgreSqlParser.js";
import { FirstOrNextContext } from "./PostgreSqlParser.js";
import { GroupClauseContext } from "./PostgreSqlParser.js";
import { GroupByListContext } from "./PostgreSqlParser.js";
import { GroupByItemContext } from "./PostgreSqlParser.js";
import { HavingClauseContext } from "./PostgreSqlParser.js";
import { ForLockingClauseContext } from "./PostgreSqlParser.js";
import { ForLockingItemContext } from "./PostgreSqlParser.js";
import { ForLockingStrengthContext } from "./PostgreSqlParser.js";
import { LockedRelationsListContext } from "./PostgreSqlParser.js";
import { ValuesClauseContext } from "./PostgreSqlParser.js";
import { FromClauseContext } from "./PostgreSqlParser.js";
import { FromListContext } from "./PostgreSqlParser.js";
import { NonAnsiJoinContext } from "./PostgreSqlParser.js";
import { TableReferenceContext } from "./PostgreSqlParser.js";
import { AliasClauseContext } from "./PostgreSqlParser.js";
import { OptionalAliasClauseContext } from "./PostgreSqlParser.js";
import { TableAliasClauseContext } from "./PostgreSqlParser.js";
import { FunctionAliasClauseContext } from "./PostgreSqlParser.js";
import { JoinTypeContext } from "./PostgreSqlParser.js";
import { JoinQualifierContext } from "./PostgreSqlParser.js";
import { ViewNameContext } from "./PostgreSqlParser.js";
import { RelationExpressionContext } from "./PostgreSqlParser.js";
import { RelationExpressionListContext } from "./PostgreSqlParser.js";
import { RelationExpressionOptionalAliasContext } from "./PostgreSqlParser.js";
import { TableSampleClauseContext } from "./PostgreSqlParser.js";
import { FunctionTableContext } from "./PostgreSqlParser.js";
import { RowsFromItemContext } from "./PostgreSqlParser.js";
import { OptionalColumnDefinitionListContext } from "./PostgreSqlParser.js";
import { OptionalOrdinalityContext } from "./PostgreSqlParser.js";
import { WhereClauseContext } from "./PostgreSqlParser.js";
import { WhereOrCurrentClauseContext } from "./PostgreSqlParser.js";
import { OptionalTableFunctionElementListContext } from "./PostgreSqlParser.js";
import { TableFunctionElementListContext } from "./PostgreSqlParser.js";
import { TableFunctionElementContext } from "./PostgreSqlParser.js";
import { XmlTableContext } from "./PostgreSqlParser.js";
import { XmlTableColumnElementContext } from "./PostgreSqlParser.js";
import { XmlTableColumnOptionListContext } from "./PostgreSqlParser.js";
import { XmlTableColumnOptionElementContext } from "./PostgreSqlParser.js";
import { XmlNamespaceListContext } from "./PostgreSqlParser.js";
import { XmlNamespaceElementContext } from "./PostgreSqlParser.js";
import { TypeNameContext } from "./PostgreSqlParser.js";
import { SimpleTypeNameContext } from "./PostgreSqlParser.js";
import { ConstTypeNameContext } from "./PostgreSqlParser.js";
import { GenericTypeContext } from "./PostgreSqlParser.js";
import { OptionalTypeModifiersContext } from "./PostgreSqlParser.js";
import { NumericContext } from "./PostgreSqlParser.js";
import { OptionalFloatContext } from "./PostgreSqlParser.js";
import { BitContext } from "./PostgreSqlParser.js";
import { ConstBitContext } from "./PostgreSqlParser.js";
import { BitWithLengthContext } from "./PostgreSqlParser.js";
import { BitWithoutLengthContext } from "./PostgreSqlParser.js";
import { CharacterContext } from "./PostgreSqlParser.js";
import { ConstCharacterContext } from "./PostgreSqlParser.js";
import { CharacterCharContext } from "./PostgreSqlParser.js";
import { OptionalVaryingContext } from "./PostgreSqlParser.js";
import { ConstDateTimeContext } from "./PostgreSqlParser.js";
import { ConstIntervalContext } from "./PostgreSqlParser.js";
import { OptionalTimezoneContext } from "./PostgreSqlParser.js";
import { OptionalIntervalContext } from "./PostgreSqlParser.js";
import { IntervalSecondContext } from "./PostgreSqlParser.js";
import { OptionalEscapeContext } from "./PostgreSqlParser.js";
import { Expression1Context } from "./PostgreSqlParser.js";
import { Expression1QualifierContext } from "./PostgreSqlParser.js";
import { Expression1LessLessContext } from "./PostgreSqlParser.js";
import { Expression1OrContext } from "./PostgreSqlParser.js";
import { Expression1AndContext } from "./PostgreSqlParser.js";
import { Expression1BetweenContext } from "./PostgreSqlParser.js";
import { Expression1InContext } from "./PostgreSqlParser.js";
import { Expression1UnaryNotContext } from "./PostgreSqlParser.js";
import { Expression1IsNullContext } from "./PostgreSqlParser.js";
import { Expression1IsNotContext } from "./PostgreSqlParser.js";
import { Expression1CompareContext } from "./PostgreSqlParser.js";
import { Expression1LikeContext } from "./PostgreSqlParser.js";
import { Expression1qualifierOperatorContext } from "./PostgreSqlParser.js";
import { Expression1UnaryQualifierOperatorContext } from "./PostgreSqlParser.js";
import { Expression1AddContext } from "./PostgreSqlParser.js";
import { ExpressionMultiplyContext } from "./PostgreSqlParser.js";
import { Expression1CaretContext } from "./PostgreSqlParser.js";
import { Expression1UnarySignContext } from "./PostgreSqlParser.js";
import { Expression1AtTimeZoneContext } from "./PostgreSqlParser.js";
import { Expression1CollateContext } from "./PostgreSqlParser.js";
import { Expression1TypecastContext } from "./PostgreSqlParser.js";
import { Expression2Context } from "./PostgreSqlParser.js";
import { C_expr_existsContext } from "./PostgreSqlParser.js";
import { C_expr_exprContext } from "./PostgreSqlParser.js";
import { C_expr_caseContext } from "./PostgreSqlParser.js";
import { PlsqlVariableNameContext } from "./PostgreSqlParser.js";
import { FunctionApplicationContext } from "./PostgreSqlParser.js";
import { FunctionExpressionContext } from "./PostgreSqlParser.js";
import { FunctionExpressionWindowlessContext } from "./PostgreSqlParser.js";
import { FunctionExpressionCommonSubexprContext } from "./PostgreSqlParser.js";
import { XmlRootVersionContext } from "./PostgreSqlParser.js";
import { OptionalXmlRootStandaloneContext } from "./PostgreSqlParser.js";
import { XmlAttributesContext } from "./PostgreSqlParser.js";
import { XmlAttributeListContext } from "./PostgreSqlParser.js";
import { XmlAttributeElementContext } from "./PostgreSqlParser.js";
import { DocumentOrContentContext } from "./PostgreSqlParser.js";
import { XmlWhitespaceOptionContext } from "./PostgreSqlParser.js";
import { XmlExistsArgumentContext } from "./PostgreSqlParser.js";
import { XmlPassingMechContext } from "./PostgreSqlParser.js";
import { WithinGroupClauseContext } from "./PostgreSqlParser.js";
import { FilterClauseContext } from "./PostgreSqlParser.js";
import { WindowClauseContext } from "./PostgreSqlParser.js";
import { WindowDefinitionListContext } from "./PostgreSqlParser.js";
import { WindowDefinitionContext } from "./PostgreSqlParser.js";
import { OverClauseContext } from "./PostgreSqlParser.js";
import { WindowSpecificationContext } from "./PostgreSqlParser.js";
import { OptionalExistingWindowNameContext } from "./PostgreSqlParser.js";
import { OptionalPartitionClauseContext } from "./PostgreSqlParser.js";
import { OptionalFrameClauseContext } from "./PostgreSqlParser.js";
import { FrameExtentContext } from "./PostgreSqlParser.js";
import { FrameBoundContext } from "./PostgreSqlParser.js";
import { OptionalWindowExclusionClauseContext } from "./PostgreSqlParser.js";
import { RowContext } from "./PostgreSqlParser.js";
import { ExplicitRowContext } from "./PostgreSqlParser.js";
import { ImplicitRowContext } from "./PostgreSqlParser.js";
import { SubTypeContext } from "./PostgreSqlParser.js";
import { AllOperatorContext } from "./PostgreSqlParser.js";
import { MathOperatorContext } from "./PostgreSqlParser.js";
import { OperatorQualifierContext } from "./PostgreSqlParser.js";
import { AllOperatorQualifierContext } from "./PostgreSqlParser.js";
import { SubqueryOperatorContext } from "./PostgreSqlParser.js";
import { ExpressionListContext } from "./PostgreSqlParser.js";
import { FunctionArgumentListContext } from "./PostgreSqlParser.js";
import { FunctionArgumentExpressionContext } from "./PostgreSqlParser.js";
import { TypeListContext } from "./PostgreSqlParser.js";
import { ArrayExpressionContext } from "./PostgreSqlParser.js";
import { ArrayExpressionListContext } from "./PostgreSqlParser.js";
import { ExtractListContext } from "./PostgreSqlParser.js";
import { ExtractArgumentContext } from "./PostgreSqlParser.js";
import { UnicodeNormalFormContext } from "./PostgreSqlParser.js";
import { OverlayListContext } from "./PostgreSqlParser.js";
import { PositionListContext } from "./PostgreSqlParser.js";
import { SubstrListContext } from "./PostgreSqlParser.js";
import { TrimListContext } from "./PostgreSqlParser.js";
import { In_expr_selectContext } from "./PostgreSqlParser.js";
import { In_expr_listContext } from "./PostgreSqlParser.js";
import { CaseExpressionContext } from "./PostgreSqlParser.js";
import { WhenClauseListContext } from "./PostgreSqlParser.js";
import { WhenClauseContext } from "./PostgreSqlParser.js";
import { CaseDefaultContext } from "./PostgreSqlParser.js";
import { CaseArgContext } from "./PostgreSqlParser.js";
import { ColumnReferenceContext } from "./PostgreSqlParser.js";
import { IndirectionElementContext } from "./PostgreSqlParser.js";
import { IndirectionContext } from "./PostgreSqlParser.js";
import { OptionalIndirectionContext } from "./PostgreSqlParser.js";
import { OptionalTargetListContext } from "./PostgreSqlParser.js";
import { TargetListContext } from "./PostgreSqlParser.js";
import { Target_starContext } from "./PostgreSqlParser.js";
import { Target_labelContext } from "./PostgreSqlParser.js";
import { QualifiedNameListContext } from "./PostgreSqlParser.js";
import { DatabaseNameContext } from "./PostgreSqlParser.js";
import { DatabaseNameListContext } from "./PostgreSqlParser.js";
import { SchemaNameContext } from "./PostgreSqlParser.js";
import { SchemaNameListContext } from "./PostgreSqlParser.js";
import { IndexNameContext } from "./PostgreSqlParser.js";
import { IndexNameListContext } from "./PostgreSqlParser.js";
import { TriggerNameContext } from "./PostgreSqlParser.js";
import { ConstraintNameContext } from "./PostgreSqlParser.js";
import { TableNameContext } from "./PostgreSqlParser.js";
import { TableNameListContext } from "./PostgreSqlParser.js";
import { SequenceNameContext } from "./PostgreSqlParser.js";
import { SequenceNameListContext } from "./PostgreSqlParser.js";
import { QualifiedNameContext } from "./PostgreSqlParser.js";
import { NameListContext } from "./PostgreSqlParser.js";
import { NameContext } from "./PostgreSqlParser.js";
import { AttributeNameContext } from "./PostgreSqlParser.js";
import { FileNameContext } from "./PostgreSqlParser.js";
import { FunctionNameContext } from "./PostgreSqlParser.js";
import { AExpressionConstContext } from "./PostgreSqlParser.js";
import { XconstContext } from "./PostgreSqlParser.js";
import { BconstContext } from "./PostgreSqlParser.js";
import { FconstContext } from "./PostgreSqlParser.js";
import { IconstContext } from "./PostgreSqlParser.js";
import { SconstContext } from "./PostgreSqlParser.js";
import { AnySconstContext } from "./PostgreSqlParser.js";
import { OptionalUescapeContext } from "./PostgreSqlParser.js";
import { SignedIconstContext } from "./PostgreSqlParser.js";
import { RoleNameContext } from "./PostgreSqlParser.js";
import { RoleNameListContext } from "./PostgreSqlParser.js";
import { ColumnIdContext } from "./PostgreSqlParser.js";
import { TableAliasContext } from "./PostgreSqlParser.js";
import { TypeFunctionNameContext } from "./PostgreSqlParser.js";
import { NonReservedWordContext } from "./PostgreSqlParser.js";
import { ColumnLabelContext } from "./PostgreSqlParser.js";
import { IdentifierContext } from "./PostgreSqlParser.js";
import { PlsqlIdentifierContext } from "./PostgreSqlParser.js";
import { UnreservedKeywordContext } from "./PostgreSqlParser.js";
import { ColumnNameKeywordContext } from "./PostgreSqlParser.js";
import { TypeFunctionNameKeywordContext } from "./PostgreSqlParser.js";
import { ReservedKeywordContext } from "./PostgreSqlParser.js";
import { BuiltinFunctionNameContext } from "./PostgreSqlParser.js";
import { PlsqlFunctionContext } from "./PostgreSqlParser.js";
import { ComputeOptionsContext } from "./PostgreSqlParser.js";
import { ComputeOptionContext } from "./PostgreSqlParser.js";
import { SharpContext } from "./PostgreSqlParser.js";
import { OptionValueContext } from "./PostgreSqlParser.js";
import { OptionalSemiContext } from "./PostgreSqlParser.js";
import { PlsqlBlockContext } from "./PostgreSqlParser.js";
import { DeclareSectionContext } from "./PostgreSqlParser.js";
import { DeclareStartContext } from "./PostgreSqlParser.js";
import { DeclareStatementsContext } from "./PostgreSqlParser.js";
import { LabelDeclarationContext } from "./PostgreSqlParser.js";
import { DeclareStatementContext } from "./PostgreSqlParser.js";
import { DeclareStatement2Context } from "./PostgreSqlParser.js";
import { OptionalScrollableContext } from "./PostgreSqlParser.js";
import { DeclareCursorQueryContext } from "./PostgreSqlParser.js";
import { DeclareCursorArgsContext } from "./PostgreSqlParser.js";
import { DeclareCursorArglistContext } from "./PostgreSqlParser.js";
import { DeclareCursorArgContext } from "./PostgreSqlParser.js";
import { DeclareIsOrForContext } from "./PostgreSqlParser.js";
import { DeclareAliasItemContext } from "./PostgreSqlParser.js";
import { DeclareVarnameContext } from "./PostgreSqlParser.js";
import { DeclareConstContext } from "./PostgreSqlParser.js";
import { DeclareDatatypeContext } from "./PostgreSqlParser.js";
import { DeclareCollateContext } from "./PostgreSqlParser.js";
import { DeclareNotNullContext } from "./PostgreSqlParser.js";
import { DeclareDefaultValueContext } from "./PostgreSqlParser.js";
import { DeclareDefaultKeyContext } from "./PostgreSqlParser.js";
import { AssignOperatorContext } from "./PostgreSqlParser.js";
import { ProcedureSectionContext } from "./PostgreSqlParser.js";
import { ProceduralStatementContext } from "./PostgreSqlParser.js";
import { StatementPerformContext } from "./PostgreSqlParser.js";
import { StatementCallContext } from "./PostgreSqlParser.js";
import { OptionalExpressionListContext } from "./PostgreSqlParser.js";
import { StatementAssignContext } from "./PostgreSqlParser.js";
import { StatementGetDiagramContext } from "./PostgreSqlParser.js";
import { OptionalGetDiagramAreaContext } from "./PostgreSqlParser.js";
import { GetDiagramListContext } from "./PostgreSqlParser.js";
import { GetDiagramListItemContext } from "./PostgreSqlParser.js";
import { GetDiagramItemContext } from "./PostgreSqlParser.js";
import { GetDiagramTargetContext } from "./PostgreSqlParser.js";
import { AssignVariableContext } from "./PostgreSqlParser.js";
import { StatementIfContext } from "./PostgreSqlParser.js";
import { StatementElsifsContext } from "./PostgreSqlParser.js";
import { StatementElseContext } from "./PostgreSqlParser.js";
import { StatementCaseContext } from "./PostgreSqlParser.js";
import { OptionalExpressionUntilWhenContext } from "./PostgreSqlParser.js";
import { CaseWhenListContext } from "./PostgreSqlParser.js";
import { CaseWhenContext } from "./PostgreSqlParser.js";
import { OptionalCaseElseContext } from "./PostgreSqlParser.js";
import { StatementLoopContext } from "./PostgreSqlParser.js";
import { StatementWhileContext } from "./PostgreSqlParser.js";
import { StatementForContext } from "./PostgreSqlParser.js";
import { ForControlContext } from "./PostgreSqlParser.js";
import { OptionalForUsingExpressionContext } from "./PostgreSqlParser.js";
import { OptionalCursorParametersContext } from "./PostgreSqlParser.js";
import { OptionalReverseContext } from "./PostgreSqlParser.js";
import { OptionalByExpressionContext } from "./PostgreSqlParser.js";
import { ForVariableContext } from "./PostgreSqlParser.js";
import { StatementForeachAContext } from "./PostgreSqlParser.js";
import { ForeachSliceContext } from "./PostgreSqlParser.js";
import { StatementExitContext } from "./PostgreSqlParser.js";
import { ExitTypeContext } from "./PostgreSqlParser.js";
import { StatementReturnContext } from "./PostgreSqlParser.js";
import { OptionalReturnResultContext } from "./PostgreSqlParser.js";
import { StatementRaiseContext } from "./PostgreSqlParser.js";
import { OptionalStatementRaiseLevelContext } from "./PostgreSqlParser.js";
import { OptionalRaiseListContext } from "./PostgreSqlParser.js";
import { OptionalRaiseUsingContext } from "./PostgreSqlParser.js";
import { OptionalRaiseUsingElementContext } from "./PostgreSqlParser.js";
import { StatementAssertContext } from "./PostgreSqlParser.js";
import { OptionalStatementAssertMessageContext } from "./PostgreSqlParser.js";
import { LoopBodyContext } from "./PostgreSqlParser.js";
import { StatementExecSqlContext } from "./PostgreSqlParser.js";
import { StatementDynExecuteContext } from "./PostgreSqlParser.js";
import { OptionalExecuteUsingContext } from "./PostgreSqlParser.js";
import { OptionalExecuteUsingListContext } from "./PostgreSqlParser.js";
import { OptionalExecuteIntoContext } from "./PostgreSqlParser.js";
import { StatementOpenContext } from "./PostgreSqlParser.js";
import { OptionalOpenBoundListItemContext } from "./PostgreSqlParser.js";
import { StatementFetchContext } from "./PostgreSqlParser.js";
import { IntoTargetContext } from "./PostgreSqlParser.js";
import { OptionalCursorFromContext } from "./PostgreSqlParser.js";
import { OptionalFetchDirectionContext } from "./PostgreSqlParser.js";
import { StatementMoveContext } from "./PostgreSqlParser.js";
import { StatementCloseContext } from "./PostgreSqlParser.js";
import { StatementNullContext } from "./PostgreSqlParser.js";
import { StatementCommitContext } from "./PostgreSqlParser.js";
import { StatementRollbackContext } from "./PostgreSqlParser.js";
import { PlsqlOptionalTransactionChainContext } from "./PostgreSqlParser.js";
import { StatementSetContext } from "./PostgreSqlParser.js";
import { CursorVariableContext } from "./PostgreSqlParser.js";
import { ExceptionSectionContext } from "./PostgreSqlParser.js";
import { ProcedureExceptionsContext } from "./PostgreSqlParser.js";
import { ProcedureExceptionContext } from "./PostgreSqlParser.js";
import { ProcedureConditionsContext } from "./PostgreSqlParser.js";
import { ProcedureConditionContext } from "./PostgreSqlParser.js";
import { OptionalBlockLabelContext } from "./PostgreSqlParser.js";
import { OptionalLoopLabelContext } from "./PostgreSqlParser.js";
import { OptionalLabelContext } from "./PostgreSqlParser.js";
import { OptionalExitConditionContext } from "./PostgreSqlParser.js";
import { AnyIdentifierContext } from "./PostgreSqlParser.js";
import { PlsqlUnreservedKeywordContext } from "./PostgreSqlParser.js";
import { SqlExpressionContext } from "./PostgreSqlParser.js";
import { ExpressionUntilThenContext } from "./PostgreSqlParser.js";
import { ExpressionUntilSemiContext } from "./PostgreSqlParser.js";
import { ExpressionUntilRightbracketContext } from "./PostgreSqlParser.js";
import { ExpressionUntilLoopContext } from "./PostgreSqlParser.js";
import { MakeExecuteSqlStatementContext } from "./PostgreSqlParser.js";
import { OptionalReturningClauseIntoContext } from "./PostgreSqlParser.js";
import { RoleOrAliasesContext } from "./PostgreSqlParser.js";


/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by `PostgreSqlParser`.
 *
 * @param <Result> The return type of the visit operation. Use `void` for
 * operations with no return type.
 */
export class PostgreSqlParserVisitor<Result> extends AbstractParseTreeVisitor<Result> {
    /**
     * Visit a parse tree produced by `PostgreSqlParser.root`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRoot?: (ctx: RootContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.plsqlRoot`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPlsqlRoot?: (ctx: PlsqlRootContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statements`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatements?: (ctx: StatementsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatement?: (ctx: StatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.plsqlConsoleCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPlsqlConsoleCommand?: (ctx: PlsqlConsoleCommandContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.callStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCallStatement?: (ctx: CallStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalWith`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalWith?: (ctx: OptionalWithContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalRoleList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalRoleList?: (ctx: OptionalRoleListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterOptionalRoleList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterOptionalRoleList?: (ctx: AlterOptionalRoleListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterRoleElemement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterRoleElemement?: (ctx: AlterRoleElemementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createRoleElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateRoleElement?: (ctx: CreateRoleElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createRoleStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateRoleStatement?: (ctx: CreateRoleStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterRoleStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterRoleStatement?: (ctx: AlterRoleStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalInDatabase`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalInDatabase?: (ctx: OptionalInDatabaseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterRoleSetStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterRoleSetStatement?: (ctx: AlterRoleSetStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.dropRoleStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDropRoleStatement?: (ctx: DropRoleStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.addOrDrop`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAddOrDrop?: (ctx: AddOrDropContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createSchemaStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateSchemaStatement?: (ctx: CreateSchemaStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalSchemaName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalSchemaName?: (ctx: OptionalSchemaNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalSchemaList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalSchemaList?: (ctx: OptionalSchemaListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.schemaStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSchemaStatement?: (ctx: SchemaStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.variableSetStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVariableSetStatement?: (ctx: VariableSetStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.setStatementEnding`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSetStatementEnding?: (ctx: SetStatementEndingContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.genericSetClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGenericSetClause?: (ctx: GenericSetClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.setStatementMore`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSetStatementMore?: (ctx: SetStatementMoreContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.variableName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVariableName?: (ctx: VariableNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.variableList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVariableList?: (ctx: VariableListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.variableValue`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVariableValue?: (ctx: VariableValueContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.isoLevel`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIsoLevel?: (ctx: IsoLevelContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.booleanOrString`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBooleanOrString?: (ctx: BooleanOrStringContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.zoneValue`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitZoneValue?: (ctx: ZoneValueContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalEncoding`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalEncoding?: (ctx: OptionalEncodingContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.nonReservedWordOrSconst`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNonReservedWordOrSconst?: (ctx: NonReservedWordOrSconstContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.variableResetStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVariableResetStatement?: (ctx: VariableResetStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.resetClauseRest`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitResetClauseRest?: (ctx: ResetClauseRestContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.genericResetClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGenericResetClause?: (ctx: GenericResetClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.setResetClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSetResetClause?: (ctx: SetResetClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionSetResetClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionSetResetClause?: (ctx: FunctionSetResetClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.variableShowStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVariableShowStatement?: (ctx: VariableShowStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.setConstraintsStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSetConstraintsStatement?: (ctx: SetConstraintsStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.constraintsSetList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConstraintsSetList?: (ctx: ConstraintsSetListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.constraintsSetMode`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConstraintsSetMode?: (ctx: ConstraintsSetModeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.checkpointStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCheckpointStatement?: (ctx: CheckpointStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.discardStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDiscardStatement?: (ctx: DiscardStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterTableStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterTableStatement?: (ctx: AlterTableStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterTableCommands`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterTableCommands?: (ctx: AlterTableCommandsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.partitionCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPartitionCommand?: (ctx: PartitionCommandContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.indexPartitionCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIndexPartitionCommand?: (ctx: IndexPartitionCommandContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterTableCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterTableCommand?: (ctx: AlterTableCommandContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterColumnDefault`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterColumnDefault?: (ctx: AlterColumnDefaultContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalDropBehavior`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalDropBehavior?: (ctx: OptionalDropBehaviorContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalCollateClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalCollateClause?: (ctx: OptionalCollateClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterUsing`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterUsing?: (ctx: AlterUsingContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.replicaIdentity`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReplicaIdentity?: (ctx: ReplicaIdentityContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.relOptions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRelOptions?: (ctx: RelOptionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalRelOptions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalRelOptions?: (ctx: OptionalRelOptionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.relOptionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRelOptionList?: (ctx: RelOptionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.relOptionElem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRelOptionElem?: (ctx: RelOptionElemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterIdentityColumnOptionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterIdentityColumnOptionList?: (ctx: AlterIdentityColumnOptionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterIdentityColumnOption`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterIdentityColumnOption?: (ctx: AlterIdentityColumnOptionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.partitionBoundSpecification`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPartitionBoundSpecification?: (ctx: PartitionBoundSpecificationContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.hashPartitionBoundElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitHashPartitionBoundElement?: (ctx: HashPartitionBoundElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.hashPartitionBound`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitHashPartitionBound?: (ctx: HashPartitionBoundContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterCompositeTypeStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterCompositeTypeStatement?: (ctx: AlterCompositeTypeStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterTypeCommands`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterTypeCommands?: (ctx: AlterTypeCommandsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterTypeCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterTypeCommand?: (ctx: AlterTypeCommandContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.closePortalStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitClosePortalStatement?: (ctx: ClosePortalStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.copyStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCopyStatement?: (ctx: CopyStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.fromOrTo`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFromOrTo?: (ctx: FromOrToContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.copyFileName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCopyFileName?: (ctx: CopyFileNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.copyOptions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCopyOptions?: (ctx: CopyOptionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.copyOptionsItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCopyOptionsItem?: (ctx: CopyOptionsItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.copyDelimiter`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCopyDelimiter?: (ctx: CopyDelimiterContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.copyGenericOptionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCopyGenericOptionList?: (ctx: CopyGenericOptionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.copyGenericOptionElem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCopyGenericOptionElem?: (ctx: CopyGenericOptionElemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.copyGenericOptionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCopyGenericOptionArgument?: (ctx: CopyGenericOptionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateStatement?: (ctx: CreateStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.temporaryOption`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTemporaryOption?: (ctx: TemporaryOptionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTableElementList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTableElementList?: (ctx: OptionalTableElementListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTypedTableElementList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTypedTableElementList?: (ctx: OptionalTypedTableElementListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableElementList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableElementList?: (ctx: TableElementListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.typedTableElementList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypedTableElementList?: (ctx: TypedTableElementListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableElement?: (ctx: TableElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.typedTableElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypedTableElement?: (ctx: TypedTableElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.columnDefinition`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitColumnDefinition?: (ctx: ColumnDefinitionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.columnOptions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitColumnOptions?: (ctx: ColumnOptionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.columnQualifierList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitColumnQualifierList?: (ctx: ColumnQualifierListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.columnConstraint`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitColumnConstraint?: (ctx: ColumnConstraintContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.columnConstraintElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitColumnConstraintElement?: (ctx: ColumnConstraintElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.generatedWhen`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGeneratedWhen?: (ctx: GeneratedWhenContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.constraintAttribute`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConstraintAttribute?: (ctx: ConstraintAttributeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableLikeClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableLikeClause?: (ctx: TableLikeClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableLikeOptionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableLikeOptionList?: (ctx: TableLikeOptionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableLikeOption`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableLikeOption?: (ctx: TableLikeOptionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableConstraint`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableConstraint?: (ctx: TableConstraintContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.constraintElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConstraintElement?: (ctx: ConstraintElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.columnListWithParentheses`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitColumnListWithParentheses?: (ctx: ColumnListWithParenthesesContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.columnList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitColumnList?: (ctx: ColumnListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.columnElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitColumnElement?: (ctx: ColumnElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalColumnListInclude`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalColumnListInclude?: (ctx: OptionalColumnListIncludeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.matchClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMatchClause?: (ctx: MatchClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.exclusionConstraintList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExclusionConstraintList?: (ctx: ExclusionConstraintListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.exclusionConstraintElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExclusionConstraintElement?: (ctx: ExclusionConstraintElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.exclusionWhereClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExclusionWhereClause?: (ctx: ExclusionWhereClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.keyActions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitKeyActions?: (ctx: KeyActionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.onKeyUpdateClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOnKeyUpdateClause?: (ctx: OnKeyUpdateClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.onKeyDeleteClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOnKeyDeleteClause?: (ctx: OnKeyDeleteClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.keyAction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitKeyAction?: (ctx: KeyActionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.inheritClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInheritClause?: (ctx: InheritClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalPartitionSpecification`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalPartitionSpecification?: (ctx: OptionalPartitionSpecificationContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.partitionSpecification`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPartitionSpecification?: (ctx: PartitionSpecificationContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.partitionElements`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPartitionElements?: (ctx: PartitionElementsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.partitionElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPartitionElement?: (ctx: PartitionElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTableAccessMethodClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTableAccessMethodClause?: (ctx: OptionalTableAccessMethodClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.with`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWith?: (ctx: WithContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.onCommitOption`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOnCommitOption?: (ctx: OnCommitOptionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTablespace`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTablespace?: (ctx: OptionalTablespaceContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.usingIndexTablespace`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitUsingIndexTablespace?: (ctx: UsingIndexTablespaceContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.existingIndex`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExistingIndex?: (ctx: ExistingIndexContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createStatsStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateStatsStatement?: (ctx: CreateStatsStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterStatsStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterStatsStatement?: (ctx: AlterStatsStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createAsStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateAsStatement?: (ctx: CreateAsStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createAsTarget`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateAsTarget?: (ctx: CreateAsTargetContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.withData`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWithData?: (ctx: WithDataContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createMaterializedViewStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateMaterializedViewStatement?: (ctx: CreateMaterializedViewStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createMaterializedViewTarget`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateMaterializedViewTarget?: (ctx: CreateMaterializedViewTargetContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.refreshMaterializedViewStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRefreshMaterializedViewStatement?: (ctx: RefreshMaterializedViewStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createSequenceStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateSequenceStatement?: (ctx: CreateSequenceStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterSequenceStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterSequenceStatement?: (ctx: AlterSequenceStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalParenthesizedSeqOptionsList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalParenthesizedSeqOptionsList?: (ctx: OptionalParenthesizedSeqOptionsListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.sequenceOptionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSequenceOptionList?: (ctx: SequenceOptionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.sequenceOptionItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSequenceOptionItem?: (ctx: SequenceOptionItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.numericOnly`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumericOnly?: (ctx: NumericOnlyContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.numericOnlyList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumericOnlyList?: (ctx: NumericOnlyListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createProcedureLangStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateProcedureLangStatement?: (ctx: CreateProcedureLangStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.handlerName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitHandlerName?: (ctx: HandlerNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalInlineHandler`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalInlineHandler?: (ctx: OptionalInlineHandlerContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.validatorClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitValidatorClause?: (ctx: ValidatorClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalProcedural`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalProcedural?: (ctx: OptionalProceduralContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createTablespaceStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateTablespaceStatement?: (ctx: CreateTablespaceStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTablespaceOwner`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTablespaceOwner?: (ctx: OptionalTablespaceOwnerContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.dropTablespaceStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDropTablespaceStatement?: (ctx: DropTablespaceStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createExtensionStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateExtensionStatement?: (ctx: CreateExtensionStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createExtensionOptionItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateExtensionOptionItem?: (ctx: CreateExtensionOptionItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterExtensionStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterExtensionStatement?: (ctx: AlterExtensionStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterExtensionOptionItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterExtensionOptionItem?: (ctx: AlterExtensionOptionItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterExtensionContentsStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterExtensionContentsStatement?: (ctx: AlterExtensionContentsStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createForeignDataWrapperStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateForeignDataWrapperStatement?: (ctx: CreateForeignDataWrapperStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.forwardOption`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitForwardOption?: (ctx: ForwardOptionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.forwardOptions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitForwardOptions?: (ctx: ForwardOptionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterForeignDataWrapperStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterForeignDataWrapperStatement?: (ctx: AlterForeignDataWrapperStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createGenericOptions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateGenericOptions?: (ctx: CreateGenericOptionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.genericOptionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGenericOptionList?: (ctx: GenericOptionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterGenericOptions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterGenericOptions?: (ctx: AlterGenericOptionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterGenericOptionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterGenericOptionList?: (ctx: AlterGenericOptionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterGenericOptionElem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterGenericOptionElem?: (ctx: AlterGenericOptionElemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.genericOptionElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGenericOptionElement?: (ctx: GenericOptionElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.genericOptionName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGenericOptionName?: (ctx: GenericOptionNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.genericOptionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGenericOptionArgument?: (ctx: GenericOptionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createForeignServerStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateForeignServerStatement?: (ctx: CreateForeignServerStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalType`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalType?: (ctx: OptionalTypeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.foreignServerVersion`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitForeignServerVersion?: (ctx: ForeignServerVersionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterForeignServerStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterForeignServerStatement?: (ctx: AlterForeignServerStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createForeignTableStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateForeignTableStatement?: (ctx: CreateForeignTableStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.importForeignSchemaStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitImportForeignSchemaStatement?: (ctx: ImportForeignSchemaStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.importQualificationType`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitImportQualificationType?: (ctx: ImportQualificationTypeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.importQualification`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitImportQualification?: (ctx: ImportQualificationContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createUserMappingStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateUserMappingStatement?: (ctx: CreateUserMappingStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.authIdentifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAuthIdentifier?: (ctx: AuthIdentifierContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.dropUserMappingStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDropUserMappingStatement?: (ctx: DropUserMappingStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterUserMappingStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterUserMappingStatement?: (ctx: AlterUserMappingStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createPolicyStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreatePolicyStatement?: (ctx: CreatePolicyStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterPolicyStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterPolicyStatement?: (ctx: AlterPolicyStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.rowSecurityOptionalExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRowSecurityOptionalExpression?: (ctx: RowSecurityOptionalExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.rowSecurityOptionalWithCheck`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRowSecurityOptionalWithCheck?: (ctx: RowSecurityOptionalWithCheckContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.rowSecurityOptionalToUser`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRowSecurityOptionalToUser?: (ctx: RowSecurityOptionalToUserContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.rowSecurityDefaultPermissive`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRowSecurityDefaultPermissive?: (ctx: RowSecurityDefaultPermissiveContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.rowSecurityDefaultForCmd`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRowSecurityDefaultForCmd?: (ctx: RowSecurityDefaultForCmdContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.rowSecurityCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRowSecurityCommand?: (ctx: RowSecurityCommandContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createAccessMethodStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateAccessMethodStatement?: (ctx: CreateAccessMethodStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.accessMethodType`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAccessMethodType?: (ctx: AccessMethodTypeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createTriggerStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateTriggerStatement?: (ctx: CreateTriggerStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.triggerActionTime`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTriggerActionTime?: (ctx: TriggerActionTimeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.triggerEvents`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTriggerEvents?: (ctx: TriggerEventsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.triggerOneEvent`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTriggerOneEvent?: (ctx: TriggerOneEventContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.triggerReferencing`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTriggerReferencing?: (ctx: TriggerReferencingContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.triggerTransitions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTriggerTransitions?: (ctx: TriggerTransitionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.triggerTransition`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTriggerTransition?: (ctx: TriggerTransitionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.transitionOldOrNew`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTransitionOldOrNew?: (ctx: TransitionOldOrNewContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.transitionRowOrTable`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTransitionRowOrTable?: (ctx: TransitionRowOrTableContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.transitionRelName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTransitionRelName?: (ctx: TransitionRelNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.triggerForSpec`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTriggerForSpec?: (ctx: TriggerForSpecContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.triggerForType`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTriggerForType?: (ctx: TriggerForTypeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.triggerWhen`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTriggerWhen?: (ctx: TriggerWhenContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionOrProcedure`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionOrProcedure?: (ctx: FunctionOrProcedureContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.triggerFunctionArguments`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTriggerFunctionArguments?: (ctx: TriggerFunctionArgumentsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.triggerFunctionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTriggerFunctionArgument?: (ctx: TriggerFunctionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalConstraintFromTable`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalConstraintFromTable?: (ctx: OptionalConstraintFromTableContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.constraintAttributeSpecification`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConstraintAttributeSpecification?: (ctx: ConstraintAttributeSpecificationContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.constraintAttributeElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConstraintAttributeElement?: (ctx: ConstraintAttributeElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createEventTriggerStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateEventTriggerStatement?: (ctx: CreateEventTriggerStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.eventTriggerWhenList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitEventTriggerWhenList?: (ctx: EventTriggerWhenListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.eventTriggerWhenItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitEventTriggerWhenItem?: (ctx: EventTriggerWhenItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.eventTriggerValueList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitEventTriggerValueList?: (ctx: EventTriggerValueListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterEventTriggerStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterEventTriggerStatement?: (ctx: AlterEventTriggerStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.enableTrigger`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitEnableTrigger?: (ctx: EnableTriggerContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createAssertionStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateAssertionStatement?: (ctx: CreateAssertionStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.defineStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDefineStatement?: (ctx: DefineStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.definition`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDefinition?: (ctx: DefinitionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.definitionElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDefinitionElement?: (ctx: DefinitionElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.definitionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDefinitionArgument?: (ctx: DefinitionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.oldAggregateDefinition`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOldAggregateDefinition?: (ctx: OldAggregateDefinitionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.oldAggregateElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOldAggregateElement?: (ctx: OldAggregateElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.enumValueList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitEnumValueList?: (ctx: EnumValueListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterEnumStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterEnumStatement?: (ctx: AlterEnumStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalIfNotExists`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalIfNotExists?: (ctx: OptionalIfNotExistsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createOperatorClassStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateOperatorClassStatement?: (ctx: CreateOperatorClassStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.operatorClassItemList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOperatorClassItemList?: (ctx: OperatorClassItemListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.operatorClassItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOperatorClassItem?: (ctx: OperatorClassItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalOperatorFamily`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalOperatorFamily?: (ctx: OptionalOperatorFamilyContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.operatorClassPurpose`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOperatorClassPurpose?: (ctx: OperatorClassPurposeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createOperatorFamilyStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateOperatorFamilyStatement?: (ctx: CreateOperatorFamilyStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterOperatorFamilyStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterOperatorFamilyStatement?: (ctx: AlterOperatorFamilyStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.operatorClassDropList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOperatorClassDropList?: (ctx: OperatorClassDropListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.operatorClassDrop`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOperatorClassDrop?: (ctx: OperatorClassDropContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.dropOperatorClassStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDropOperatorClassStatement?: (ctx: DropOperatorClassStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.dropOperatorFamilyStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDropOperatorFamilyStatement?: (ctx: DropOperatorFamilyStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.dropOwnedStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDropOwnedStatement?: (ctx: DropOwnedStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.reassignOwnedStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReassignOwnedStatement?: (ctx: ReassignOwnedStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.dropStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDropStatement?: (ctx: DropStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.objectTypeAnyName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitObjectTypeAnyName?: (ctx: ObjectTypeAnyNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.objectTypeName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitObjectTypeName?: (ctx: ObjectTypeNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.dropTypeName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDropTypeName?: (ctx: DropTypeNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.objectTypeNameOnAnyName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitObjectTypeNameOnAnyName?: (ctx: ObjectTypeNameOnAnyNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.anyNameList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAnyNameList?: (ctx: AnyNameListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.anyName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAnyName?: (ctx: AnyNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.attributes`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAttributes?: (ctx: AttributesContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.typeNameList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeNameList?: (ctx: TypeNameListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.truncateStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTruncateStatement?: (ctx: TruncateStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalRestartSequences`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalRestartSequences?: (ctx: OptionalRestartSequencesContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.commentStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommentStatement?: (ctx: CommentStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.commentText`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommentText?: (ctx: CommentTextContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.securityLabelStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSecurityLabelStatement?: (ctx: SecurityLabelStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalProvider`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalProvider?: (ctx: OptionalProviderContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.securityLabel`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSecurityLabel?: (ctx: SecurityLabelContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.fetchStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFetchStatement?: (ctx: FetchStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.fetchArguments`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFetchArguments?: (ctx: FetchArgumentsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.fromOrIn`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFromOrIn?: (ctx: FromOrInContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalFromOrIn`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalFromOrIn?: (ctx: OptionalFromOrInContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.grantStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGrantStatement?: (ctx: GrantStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.revokeStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRevokeStatement?: (ctx: RevokeStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.privileges`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPrivileges?: (ctx: PrivilegesContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.privilegeList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPrivilegeList?: (ctx: PrivilegeListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.privilege`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPrivilege?: (ctx: PrivilegeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.privilegeTarget`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPrivilegeTarget?: (ctx: PrivilegeTargetContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.granteeList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGranteeList?: (ctx: GranteeListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.grantee`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGrantee?: (ctx: GranteeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalWithGrantOption`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalWithGrantOption?: (ctx: OptionalWithGrantOptionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.grantPrivilegeStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGrantPrivilegeStatement?: (ctx: GrantPrivilegeStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.revokePrivilegeStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRevokePrivilegeStatement?: (ctx: RevokePrivilegeStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalGrantAdminOption`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalGrantAdminOption?: (ctx: OptionalGrantAdminOptionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalGrantedBy`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalGrantedBy?: (ctx: OptionalGrantedByContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterDefaultPrivilegesStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterDefaultPrivilegesStatement?: (ctx: AlterDefaultPrivilegesStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.defultPrivilegeOption`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDefultPrivilegeOption?: (ctx: DefultPrivilegeOptionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.defaultPrivelegeAction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDefaultPrivelegeAction?: (ctx: DefaultPrivelegeActionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.defultPrivilegeTarget`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDefultPrivilegeTarget?: (ctx: DefultPrivilegeTargetContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.indexStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIndexStatement?: (ctx: IndexStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalAccessMethodClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalAccessMethodClause?: (ctx: OptionalAccessMethodClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.indexParameters`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIndexParameters?: (ctx: IndexParametersContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.indexElemOptions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIndexElemOptions?: (ctx: IndexElemOptionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.indexElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIndexElement?: (ctx: IndexElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalInclude`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalInclude?: (ctx: OptionalIncludeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalCollate`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalCollate?: (ctx: OptionalCollateContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalClass`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalClass?: (ctx: OptionalClassContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalAscOrDesc`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalAscOrDesc?: (ctx: OptionalAscOrDescContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalNullsOrder`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalNullsOrder?: (ctx: OptionalNullsOrderContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createFunctionStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateFunctionStatement?: (ctx: CreateFunctionStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalOrReplace`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalOrReplace?: (ctx: OptionalOrReplaceContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionArgumentsList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionArgumentsList?: (ctx: FunctionArgumentsListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionWithArgumentTypesList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionWithArgumentTypesList?: (ctx: FunctionWithArgumentTypesListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionWithArgumentTypes`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionWithArgumentTypes?: (ctx: FunctionWithArgumentTypesContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionArgumentsWithDefaultsList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionArgumentsWithDefaultsList?: (ctx: FunctionArgumentsWithDefaultsListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionArgumentWithDefault`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionArgumentWithDefault?: (ctx: FunctionArgumentWithDefaultContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionArgument?: (ctx: FunctionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.argumentClass`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitArgumentClass?: (ctx: ArgumentClassContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.parameterName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitParameterName?: (ctx: ParameterNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionReturn`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionReturn?: (ctx: FunctionReturnContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionType`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionType?: (ctx: FunctionTypeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.aggregateArguments`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAggregateArguments?: (ctx: AggregateArgumentsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.aggregateArgumentsList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAggregateArgumentsList?: (ctx: AggregateArgumentsListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.aggregateWithArgumentTypes`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAggregateWithArgumentTypes?: (ctx: AggregateWithArgumentTypesContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.aggregateWithArgumentTypesList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAggregateWithArgumentTypesList?: (ctx: AggregateWithArgumentTypesListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createFunctionOptionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateFunctionOptionList?: (ctx: CreateFunctionOptionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.commonFunctionOptionItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommonFunctionOptionItem?: (ctx: CommonFunctionOptionItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createFunctionOptionItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateFunctionOptionItem?: (ctx: CreateFunctionOptionItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionAs`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionAs?: (ctx: FunctionAsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.transformTypeList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTransformTypeList?: (ctx: TransformTypeListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalDefinition`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalDefinition?: (ctx: OptionalDefinitionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableFunctionColumn`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableFunctionColumn?: (ctx: TableFunctionColumnContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableFunctionColumnList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableFunctionColumnList?: (ctx: TableFunctionColumnListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterFunctionStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterFunctionStatement?: (ctx: AlterFunctionStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.removeFunctionStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRemoveFunctionStatement?: (ctx: RemoveFunctionStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.removeAggregateStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRemoveAggregateStatement?: (ctx: RemoveAggregateStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.removeOperatorStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRemoveOperatorStatement?: (ctx: RemoveOperatorStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.operatorArgumentTypes`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOperatorArgumentTypes?: (ctx: OperatorArgumentTypesContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.anyOperator`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAnyOperator?: (ctx: AnyOperatorContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.operatorWithArgumentTypesList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOperatorWithArgumentTypesList?: (ctx: OperatorWithArgumentTypesListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.operatorWithArgumentTypes`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOperatorWithArgumentTypes?: (ctx: OperatorWithArgumentTypesContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.doStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDoStatement?: (ctx: DoStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.doStatementOptionsList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDoStatementOptionsList?: (ctx: DoStatementOptionsListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.doStatementOptionItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDoStatementOptionItem?: (ctx: DoStatementOptionItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createCastStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateCastStatement?: (ctx: CreateCastStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.castContext`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCastContext?: (ctx: CastContextContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.dropCastStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDropCastStatement?: (ctx: DropCastStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalIfExists`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalIfExists?: (ctx: OptionalIfExistsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createTransformStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateTransformStatement?: (ctx: CreateTransformStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.transformElementList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTransformElementList?: (ctx: TransformElementListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.dropTransformStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDropTransformStatement?: (ctx: DropTransformStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.reindexStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReindexStatement?: (ctx: ReindexStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.reindexTargetType`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReindexTargetType?: (ctx: ReindexTargetTypeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.reindexOptionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReindexOptionList?: (ctx: ReindexOptionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.reindexOptionElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReindexOptionElement?: (ctx: ReindexOptionElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterTablespaceStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterTablespaceStatement?: (ctx: AlterTablespaceStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.renameStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRenameStatement?: (ctx: RenameStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalColumn`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalColumn?: (ctx: OptionalColumnContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalSetData`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalSetData?: (ctx: OptionalSetDataContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterObjectDependsStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterObjectDependsStatement?: (ctx: AlterObjectDependsStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterObjectSchemaStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterObjectSchemaStatement?: (ctx: AlterObjectSchemaStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterOperatorStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterOperatorStatement?: (ctx: AlterOperatorStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.operatorDefinitionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOperatorDefinitionList?: (ctx: OperatorDefinitionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.operatorDefinitionElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOperatorDefinitionElement?: (ctx: OperatorDefinitionElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.operatorDefinitionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOperatorDefinitionArgument?: (ctx: OperatorDefinitionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterTypeStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterTypeStatement?: (ctx: AlterTypeStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterOwnerStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterOwnerStatement?: (ctx: AlterOwnerStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createPublicationStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreatePublicationStatement?: (ctx: CreatePublicationStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalPublicationForTables`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalPublicationForTables?: (ctx: OptionalPublicationForTablesContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.publicationForTables`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPublicationForTables?: (ctx: PublicationForTablesContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterPublicationStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterPublicationStatement?: (ctx: AlterPublicationStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createSubscriptionStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateSubscriptionStatement?: (ctx: CreateSubscriptionStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.publicationNameList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPublicationNameList?: (ctx: PublicationNameListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.publicationNameItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPublicationNameItem?: (ctx: PublicationNameItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterSubscriptionStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterSubscriptionStatement?: (ctx: AlterSubscriptionStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.dropSubscriptionStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDropSubscriptionStatement?: (ctx: DropSubscriptionStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.ruleStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRuleStatement?: (ctx: RuleStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.ruleActionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRuleActionList?: (ctx: RuleActionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.ruleActionMulti`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRuleActionMulti?: (ctx: RuleActionMultiContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.ruleActionStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRuleActionStatement?: (ctx: RuleActionStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.ruleActionStatementOrEmpty`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRuleActionStatementOrEmpty?: (ctx: RuleActionStatementOrEmptyContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.event`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitEvent?: (ctx: EventContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalInstead`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalInstead?: (ctx: OptionalInsteadContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.notifyStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNotifyStatement?: (ctx: NotifyStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.notifyPayload`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNotifyPayload?: (ctx: NotifyPayloadContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.listenStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitListenStatement?: (ctx: ListenStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.unlistenStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitUnlistenStatement?: (ctx: UnlistenStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.transactionStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTransactionStatement?: (ctx: TransactionStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTransaction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTransaction?: (ctx: OptionalTransactionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.transactionModeItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTransactionModeItem?: (ctx: TransactionModeItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.transactionModeList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTransactionModeList?: (ctx: TransactionModeListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTransactionChain`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTransactionChain?: (ctx: OptionalTransactionChainContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.viewStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitViewStatement?: (ctx: ViewStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalCheckOption`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalCheckOption?: (ctx: OptionalCheckOptionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.loadStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLoadStatement?: (ctx: LoadStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createDatabaseStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateDatabaseStatement?: (ctx: CreateDatabaseStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createDatabaseOptionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateDatabaseOptionList?: (ctx: CreateDatabaseOptionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createDatabaseOptionItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateDatabaseOptionItem?: (ctx: CreateDatabaseOptionItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createDatabaseOptionName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateDatabaseOptionName?: (ctx: CreateDatabaseOptionNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterDatabaseStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterDatabaseStatement?: (ctx: AlterDatabaseStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterDatabaseSetStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterDatabaseSetStatement?: (ctx: AlterDatabaseSetStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.dropDatabaseStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDropDatabaseStatement?: (ctx: DropDatabaseStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterCollationStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterCollationStatement?: (ctx: AlterCollationStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterSystemStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterSystemStatement?: (ctx: AlterSystemStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createDomainStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateDomainStatement?: (ctx: CreateDomainStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterDomainStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterDomainStatement?: (ctx: AlterDomainStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.alterDomainCommand`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAlterDomainCommand?: (ctx: AlterDomainCommandContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalAs`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalAs?: (ctx: OptionalAsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.altertsDictionaryStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAltertsDictionaryStatement?: (ctx: AltertsDictionaryStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.altertsConfigurationStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAltertsConfigurationStatement?: (ctx: AltertsConfigurationStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.createConversionStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCreateConversionStatement?: (ctx: CreateConversionStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.clusterStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitClusterStatement?: (ctx: ClusterStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.clusterIndexSpecification`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitClusterIndexSpecification?: (ctx: ClusterIndexSpecificationContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.vacuumStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVacuumStatement?: (ctx: VacuumStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.analyzeStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAnalyzeStatement?: (ctx: AnalyzeStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.vacuumAnalyzeOptionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVacuumAnalyzeOptionList?: (ctx: VacuumAnalyzeOptionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.analyzeKeyword`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAnalyzeKeyword?: (ctx: AnalyzeKeywordContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.vacuumAnalyzeOptionElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVacuumAnalyzeOptionElement?: (ctx: VacuumAnalyzeOptionElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.vacuumAnalyzeOptionName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVacuumAnalyzeOptionName?: (ctx: VacuumAnalyzeOptionNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.vacuumAnalyzeOptionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVacuumAnalyzeOptionArgument?: (ctx: VacuumAnalyzeOptionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalVerbose`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalVerbose?: (ctx: OptionalVerboseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalNameList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalNameList?: (ctx: OptionalNameListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.vacuumRelation`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitVacuumRelation?: (ctx: VacuumRelationContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalVacuumRelationList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalVacuumRelationList?: (ctx: OptionalVacuumRelationListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.explainStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExplainStatement?: (ctx: ExplainStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.explainableStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExplainableStatement?: (ctx: ExplainableStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.explainOptionElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExplainOptionElement?: (ctx: ExplainOptionElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.explainOptionName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExplainOptionName?: (ctx: ExplainOptionNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.explainOptionArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExplainOptionArgument?: (ctx: ExplainOptionArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.prepareStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPrepareStatement?: (ctx: PrepareStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.prepareTypeClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPrepareTypeClause?: (ctx: PrepareTypeClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.preparableStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPreparableStatement?: (ctx: PreparableStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.executeStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExecuteStatement?: (ctx: ExecuteStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.executeParameterClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExecuteParameterClause?: (ctx: ExecuteParameterClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.deallocateStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeallocateStatement?: (ctx: DeallocateStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.insertStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInsertStatement?: (ctx: InsertStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.insertTarget`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInsertTarget?: (ctx: InsertTargetContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.insertRest`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInsertRest?: (ctx: InsertRestContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.overrideKind`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOverrideKind?: (ctx: OverrideKindContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.insertColumnList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInsertColumnList?: (ctx: InsertColumnListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.insertColumnItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitInsertColumnItem?: (ctx: InsertColumnItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalOnConflict`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalOnConflict?: (ctx: OptionalOnConflictContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalConflictExpr`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalConflictExpr?: (ctx: OptionalConflictExprContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.returningClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReturningClause?: (ctx: ReturningClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.mergeStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMergeStatement?: (ctx: MergeStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.mergeInsertClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMergeInsertClause?: (ctx: MergeInsertClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.mergeUpdateClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMergeUpdateClause?: (ctx: MergeUpdateClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.mergeDeleteClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMergeDeleteClause?: (ctx: MergeDeleteClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.deleteStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeleteStatement?: (ctx: DeleteStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.usingClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitUsingClause?: (ctx: UsingClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.lockStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLockStatement?: (ctx: LockStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalLock`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalLock?: (ctx: OptionalLockContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.lockType`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLockType?: (ctx: LockTypeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalNowait`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalNowait?: (ctx: OptionalNowaitContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalNowaitOrSkip`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalNowaitOrSkip?: (ctx: OptionalNowaitOrSkipContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.updateStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitUpdateStatement?: (ctx: UpdateStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.setClauseList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSetClauseList?: (ctx: SetClauseListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.setClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSetClause?: (ctx: SetClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.setTarget`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSetTarget?: (ctx: SetTargetContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareCursorStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareCursorStatement?: (ctx: DeclareCursorStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.cursorName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCursorName?: (ctx: CursorNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalHold`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalHold?: (ctx: OptionalHoldContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.selectStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSelectStatement?: (ctx: SelectStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.selectWithParenthesis`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSelectWithParenthesis?: (ctx: SelectWithParenthesisContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.selectWithoutParenthesis`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSelectWithoutParenthesis?: (ctx: SelectWithoutParenthesisContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.selectClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSelectClause?: (ctx: SelectClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.simpleSelectIntersect`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSimpleSelectIntersect?: (ctx: SimpleSelectIntersectContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.simpleSelectStart`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSimpleSelectStart?: (ctx: SimpleSelectStartContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.simpleSelectPramary`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSimpleSelectPramary?: (ctx: SimpleSelectPramaryContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.withClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWithClause?: (ctx: WithClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.commonTableExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCommonTableExpression?: (ctx: CommonTableExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalMaterialized`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalMaterialized?: (ctx: OptionalMaterializedContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.intoClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIntoClause?: (ctx: IntoClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTemporaryTableName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTemporaryTableName?: (ctx: OptionalTemporaryTableNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTable`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTable?: (ctx: OptionalTableContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.allOrDistinct`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAllOrDistinct?: (ctx: AllOrDistinctContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.distinctClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDistinctClause?: (ctx: DistinctClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.allClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAllClause?: (ctx: AllClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalSortClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalSortClause?: (ctx: OptionalSortClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.sortClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSortClause?: (ctx: SortClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.sortByList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSortByList?: (ctx: SortByListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.sortBy`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSortBy?: (ctx: SortByContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.selectLimit`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSelectLimit?: (ctx: SelectLimitContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalSelectLimit`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalSelectLimit?: (ctx: OptionalSelectLimitContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.limitClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLimitClause?: (ctx: LimitClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.offsetClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOffsetClause?: (ctx: OffsetClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.selectLimitValue`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSelectLimitValue?: (ctx: SelectLimitValueContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.selectOffsetValue`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSelectOffsetValue?: (ctx: SelectOffsetValueContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.selectFetchFirstValue`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSelectFetchFirstValue?: (ctx: SelectFetchFirstValueContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.anyConst`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAnyConst?: (ctx: AnyConstContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.rowOrRows`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRowOrRows?: (ctx: RowOrRowsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.firstOrNext`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFirstOrNext?: (ctx: FirstOrNextContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.groupClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGroupClause?: (ctx: GroupClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.groupByList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGroupByList?: (ctx: GroupByListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.groupByItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGroupByItem?: (ctx: GroupByItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.havingClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitHavingClause?: (ctx: HavingClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.forLockingClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitForLockingClause?: (ctx: ForLockingClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.forLockingItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitForLockingItem?: (ctx: ForLockingItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.forLockingStrength`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitForLockingStrength?: (ctx: ForLockingStrengthContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.lockedRelationsList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLockedRelationsList?: (ctx: LockedRelationsListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.valuesClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitValuesClause?: (ctx: ValuesClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.fromClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFromClause?: (ctx: FromClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.fromList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFromList?: (ctx: FromListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.nonAnsiJoin`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNonAnsiJoin?: (ctx: NonAnsiJoinContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableReference`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableReference?: (ctx: TableReferenceContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.aliasClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAliasClause?: (ctx: AliasClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalAliasClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalAliasClause?: (ctx: OptionalAliasClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableAliasClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableAliasClause?: (ctx: TableAliasClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionAliasClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionAliasClause?: (ctx: FunctionAliasClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.joinType`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitJoinType?: (ctx: JoinTypeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.joinQualifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitJoinQualifier?: (ctx: JoinQualifierContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.viewName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitViewName?: (ctx: ViewNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.relationExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRelationExpression?: (ctx: RelationExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.relationExpressionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRelationExpressionList?: (ctx: RelationExpressionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.relationExpressionOptionalAlias`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRelationExpressionOptionalAlias?: (ctx: RelationExpressionOptionalAliasContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableSampleClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableSampleClause?: (ctx: TableSampleClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionTable`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionTable?: (ctx: FunctionTableContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.rowsFromItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRowsFromItem?: (ctx: RowsFromItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalColumnDefinitionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalColumnDefinitionList?: (ctx: OptionalColumnDefinitionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalOrdinality`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalOrdinality?: (ctx: OptionalOrdinalityContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.whereClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWhereClause?: (ctx: WhereClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.whereOrCurrentClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWhereOrCurrentClause?: (ctx: WhereOrCurrentClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTableFunctionElementList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTableFunctionElementList?: (ctx: OptionalTableFunctionElementListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableFunctionElementList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableFunctionElementList?: (ctx: TableFunctionElementListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableFunctionElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableFunctionElement?: (ctx: TableFunctionElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlTable`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlTable?: (ctx: XmlTableContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlTableColumnElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlTableColumnElement?: (ctx: XmlTableColumnElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlTableColumnOptionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlTableColumnOptionList?: (ctx: XmlTableColumnOptionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlTableColumnOptionElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlTableColumnOptionElement?: (ctx: XmlTableColumnOptionElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlNamespaceList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlNamespaceList?: (ctx: XmlNamespaceListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlNamespaceElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlNamespaceElement?: (ctx: XmlNamespaceElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.typeName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeName?: (ctx: TypeNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.simpleTypeName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSimpleTypeName?: (ctx: SimpleTypeNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.constTypeName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConstTypeName?: (ctx: ConstTypeNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.genericType`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGenericType?: (ctx: GenericTypeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTypeModifiers`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTypeModifiers?: (ctx: OptionalTypeModifiersContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.numeric`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNumeric?: (ctx: NumericContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalFloat`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalFloat?: (ctx: OptionalFloatContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.bit`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBit?: (ctx: BitContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.constBit`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConstBit?: (ctx: ConstBitContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.bitWithLength`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBitWithLength?: (ctx: BitWithLengthContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.bitWithoutLength`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBitWithoutLength?: (ctx: BitWithoutLengthContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.character`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCharacter?: (ctx: CharacterContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.constCharacter`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConstCharacter?: (ctx: ConstCharacterContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.characterChar`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCharacterChar?: (ctx: CharacterCharContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalVarying`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalVarying?: (ctx: OptionalVaryingContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.constDateTime`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConstDateTime?: (ctx: ConstDateTimeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.constInterval`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConstInterval?: (ctx: ConstIntervalContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTimezone`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTimezone?: (ctx: OptionalTimezoneContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalInterval`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalInterval?: (ctx: OptionalIntervalContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.intervalSecond`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIntervalSecond?: (ctx: IntervalSecondContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalEscape`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalEscape?: (ctx: OptionalEscapeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1?: (ctx: Expression1Context) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1Qualifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1Qualifier?: (ctx: Expression1QualifierContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1LessLess`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1LessLess?: (ctx: Expression1LessLessContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1Or`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1Or?: (ctx: Expression1OrContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1And`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1And?: (ctx: Expression1AndContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1Between`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1Between?: (ctx: Expression1BetweenContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1In`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1In?: (ctx: Expression1InContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1UnaryNot`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1UnaryNot?: (ctx: Expression1UnaryNotContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1IsNull`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1IsNull?: (ctx: Expression1IsNullContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1IsNot`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1IsNot?: (ctx: Expression1IsNotContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1Compare`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1Compare?: (ctx: Expression1CompareContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1Like`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1Like?: (ctx: Expression1LikeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1qualifierOperator`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1qualifierOperator?: (ctx: Expression1qualifierOperatorContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1UnaryQualifierOperator`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1UnaryQualifierOperator?: (ctx: Expression1UnaryQualifierOperatorContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1Add`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1Add?: (ctx: Expression1AddContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expressionMultiply`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpressionMultiply?: (ctx: ExpressionMultiplyContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1Caret`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1Caret?: (ctx: Expression1CaretContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1UnarySign`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1UnarySign?: (ctx: Expression1UnarySignContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1AtTimeZone`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1AtTimeZone?: (ctx: Expression1AtTimeZoneContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1Collate`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1Collate?: (ctx: Expression1CollateContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression1Typecast`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression1Typecast?: (ctx: Expression1TypecastContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expression2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpression2?: (ctx: Expression2Context) => Result;
    /**
     * Visit a parse tree produced by the `c_expr_exists`
     * labeled alternative in `PostgreSqlParser.expression3`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitC_expr_exists?: (ctx: C_expr_existsContext) => Result;
    /**
     * Visit a parse tree produced by the `c_expr_expr`
     * labeled alternative in `PostgreSqlParser.expression3`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitC_expr_expr?: (ctx: C_expr_exprContext) => Result;
    /**
     * Visit a parse tree produced by the `c_expr_case`
     * labeled alternative in `PostgreSqlParser.expression3`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitC_expr_case?: (ctx: C_expr_caseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.plsqlVariableName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPlsqlVariableName?: (ctx: PlsqlVariableNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionApplication`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionApplication?: (ctx: FunctionApplicationContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionExpression?: (ctx: FunctionExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionExpressionWindowless`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionExpressionWindowless?: (ctx: FunctionExpressionWindowlessContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionExpressionCommonSubexpr`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionExpressionCommonSubexpr?: (ctx: FunctionExpressionCommonSubexprContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlRootVersion`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlRootVersion?: (ctx: XmlRootVersionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalXmlRootStandalone`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalXmlRootStandalone?: (ctx: OptionalXmlRootStandaloneContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlAttributes`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlAttributes?: (ctx: XmlAttributesContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlAttributeList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlAttributeList?: (ctx: XmlAttributeListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlAttributeElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlAttributeElement?: (ctx: XmlAttributeElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.documentOrContent`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDocumentOrContent?: (ctx: DocumentOrContentContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlWhitespaceOption`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlWhitespaceOption?: (ctx: XmlWhitespaceOptionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlExistsArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlExistsArgument?: (ctx: XmlExistsArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xmlPassingMech`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXmlPassingMech?: (ctx: XmlPassingMechContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.withinGroupClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWithinGroupClause?: (ctx: WithinGroupClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.filterClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFilterClause?: (ctx: FilterClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.windowClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWindowClause?: (ctx: WindowClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.windowDefinitionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWindowDefinitionList?: (ctx: WindowDefinitionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.windowDefinition`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWindowDefinition?: (ctx: WindowDefinitionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.overClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOverClause?: (ctx: OverClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.windowSpecification`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWindowSpecification?: (ctx: WindowSpecificationContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalExistingWindowName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalExistingWindowName?: (ctx: OptionalExistingWindowNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalPartitionClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalPartitionClause?: (ctx: OptionalPartitionClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalFrameClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalFrameClause?: (ctx: OptionalFrameClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.frameExtent`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFrameExtent?: (ctx: FrameExtentContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.frameBound`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFrameBound?: (ctx: FrameBoundContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalWindowExclusionClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalWindowExclusionClause?: (ctx: OptionalWindowExclusionClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.row`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRow?: (ctx: RowContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.explicitRow`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExplicitRow?: (ctx: ExplicitRowContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.implicitRow`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitImplicitRow?: (ctx: ImplicitRowContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.subType`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSubType?: (ctx: SubTypeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.allOperator`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAllOperator?: (ctx: AllOperatorContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.mathOperator`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMathOperator?: (ctx: MathOperatorContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.operatorQualifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOperatorQualifier?: (ctx: OperatorQualifierContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.allOperatorQualifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAllOperatorQualifier?: (ctx: AllOperatorQualifierContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.subqueryOperator`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSubqueryOperator?: (ctx: SubqueryOperatorContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expressionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpressionList?: (ctx: ExpressionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionArgumentList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionArgumentList?: (ctx: FunctionArgumentListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionArgumentExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionArgumentExpression?: (ctx: FunctionArgumentExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.typeList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeList?: (ctx: TypeListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.arrayExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitArrayExpression?: (ctx: ArrayExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.arrayExpressionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitArrayExpressionList?: (ctx: ArrayExpressionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.extractList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExtractList?: (ctx: ExtractListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.extractArgument`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExtractArgument?: (ctx: ExtractArgumentContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.unicodeNormalForm`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitUnicodeNormalForm?: (ctx: UnicodeNormalFormContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.overlayList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOverlayList?: (ctx: OverlayListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.positionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPositionList?: (ctx: PositionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.substrList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSubstrList?: (ctx: SubstrListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.trimList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTrimList?: (ctx: TrimListContext) => Result;
    /**
     * Visit a parse tree produced by the `in_expr_select`
     * labeled alternative in `PostgreSqlParser.inExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIn_expr_select?: (ctx: In_expr_selectContext) => Result;
    /**
     * Visit a parse tree produced by the `in_expr_list`
     * labeled alternative in `PostgreSqlParser.inExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIn_expr_list?: (ctx: In_expr_listContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.caseExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCaseExpression?: (ctx: CaseExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.whenClauseList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWhenClauseList?: (ctx: WhenClauseListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.whenClause`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitWhenClause?: (ctx: WhenClauseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.caseDefault`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCaseDefault?: (ctx: CaseDefaultContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.caseArg`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCaseArg?: (ctx: CaseArgContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.columnReference`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitColumnReference?: (ctx: ColumnReferenceContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.indirectionElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIndirectionElement?: (ctx: IndirectionElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.indirection`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIndirection?: (ctx: IndirectionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalIndirection`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalIndirection?: (ctx: OptionalIndirectionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalTargetList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalTargetList?: (ctx: OptionalTargetListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.targetList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTargetList?: (ctx: TargetListContext) => Result;
    /**
     * Visit a parse tree produced by the `target_star`
     * labeled alternative in `PostgreSqlParser.targetElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTarget_star?: (ctx: Target_starContext) => Result;
    /**
     * Visit a parse tree produced by the `target_label`
     * labeled alternative in `PostgreSqlParser.targetElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTarget_label?: (ctx: Target_labelContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.qualifiedNameList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitQualifiedNameList?: (ctx: QualifiedNameListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.databaseName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseName?: (ctx: DatabaseNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.databaseNameList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDatabaseNameList?: (ctx: DatabaseNameListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.schemaName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSchemaName?: (ctx: SchemaNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.schemaNameList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSchemaNameList?: (ctx: SchemaNameListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.indexName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIndexName?: (ctx: IndexNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.indexNameList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIndexNameList?: (ctx: IndexNameListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.triggerName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTriggerName?: (ctx: TriggerNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.constraintName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitConstraintName?: (ctx: ConstraintNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableName?: (ctx: TableNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableNameList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableNameList?: (ctx: TableNameListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.sequenceName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSequenceName?: (ctx: SequenceNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.sequenceNameList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSequenceNameList?: (ctx: SequenceNameListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.qualifiedName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitQualifiedName?: (ctx: QualifiedNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.nameList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNameList?: (ctx: NameListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.name`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitName?: (ctx: NameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.attributeName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAttributeName?: (ctx: AttributeNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.fileName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFileName?: (ctx: FileNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.functionName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFunctionName?: (ctx: FunctionNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.aExpressionConst`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAExpressionConst?: (ctx: AExpressionConstContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.xconst`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitXconst?: (ctx: XconstContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.bconst`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBconst?: (ctx: BconstContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.fconst`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitFconst?: (ctx: FconstContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.iconst`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIconst?: (ctx: IconstContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.sconst`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSconst?: (ctx: SconstContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.anySconst`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAnySconst?: (ctx: AnySconstContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalUescape`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalUescape?: (ctx: OptionalUescapeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.signedIconst`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSignedIconst?: (ctx: SignedIconstContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.roleName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRoleName?: (ctx: RoleNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.roleNameList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRoleNameList?: (ctx: RoleNameListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.columnId`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitColumnId?: (ctx: ColumnIdContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.tableAlias`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTableAlias?: (ctx: TableAliasContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.typeFunctionName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeFunctionName?: (ctx: TypeFunctionNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.nonReservedWord`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitNonReservedWord?: (ctx: NonReservedWordContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.columnLabel`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitColumnLabel?: (ctx: ColumnLabelContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.identifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIdentifier?: (ctx: IdentifierContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.plsqlIdentifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPlsqlIdentifier?: (ctx: PlsqlIdentifierContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.unreservedKeyword`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitUnreservedKeyword?: (ctx: UnreservedKeywordContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.columnNameKeyword`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitColumnNameKeyword?: (ctx: ColumnNameKeywordContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.typeFunctionNameKeyword`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitTypeFunctionNameKeyword?: (ctx: TypeFunctionNameKeywordContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.reservedKeyword`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitReservedKeyword?: (ctx: ReservedKeywordContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.builtinFunctionName`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitBuiltinFunctionName?: (ctx: BuiltinFunctionNameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.plsqlFunction`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPlsqlFunction?: (ctx: PlsqlFunctionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.computeOptions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitComputeOptions?: (ctx: ComputeOptionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.computeOption`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitComputeOption?: (ctx: ComputeOptionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.sharp`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSharp?: (ctx: SharpContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionValue`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionValue?: (ctx: OptionValueContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalSemi`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalSemi?: (ctx: OptionalSemiContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.plsqlBlock`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPlsqlBlock?: (ctx: PlsqlBlockContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareSection`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareSection?: (ctx: DeclareSectionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareStart`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareStart?: (ctx: DeclareStartContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareStatements`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareStatements?: (ctx: DeclareStatementsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.labelDeclaration`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLabelDeclaration?: (ctx: LabelDeclarationContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareStatement?: (ctx: DeclareStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareStatement2`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareStatement2?: (ctx: DeclareStatement2Context) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalScrollable`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalScrollable?: (ctx: OptionalScrollableContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareCursorQuery`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareCursorQuery?: (ctx: DeclareCursorQueryContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareCursorArgs`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareCursorArgs?: (ctx: DeclareCursorArgsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareCursorArglist`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareCursorArglist?: (ctx: DeclareCursorArglistContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareCursorArg`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareCursorArg?: (ctx: DeclareCursorArgContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareIsOrFor`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareIsOrFor?: (ctx: DeclareIsOrForContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareAliasItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareAliasItem?: (ctx: DeclareAliasItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareVarname`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareVarname?: (ctx: DeclareVarnameContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareConst`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareConst?: (ctx: DeclareConstContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareDatatype`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareDatatype?: (ctx: DeclareDatatypeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareCollate`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareCollate?: (ctx: DeclareCollateContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareNotNull`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareNotNull?: (ctx: DeclareNotNullContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareDefaultValue`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareDefaultValue?: (ctx: DeclareDefaultValueContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.declareDefaultKey`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitDeclareDefaultKey?: (ctx: DeclareDefaultKeyContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.assignOperator`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAssignOperator?: (ctx: AssignOperatorContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.procedureSection`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitProcedureSection?: (ctx: ProcedureSectionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.proceduralStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitProceduralStatement?: (ctx: ProceduralStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementPerform`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementPerform?: (ctx: StatementPerformContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementCall`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementCall?: (ctx: StatementCallContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalExpressionList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalExpressionList?: (ctx: OptionalExpressionListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementAssign`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementAssign?: (ctx: StatementAssignContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementGetDiagram`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementGetDiagram?: (ctx: StatementGetDiagramContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalGetDiagramArea`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalGetDiagramArea?: (ctx: OptionalGetDiagramAreaContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.getDiagramList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGetDiagramList?: (ctx: GetDiagramListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.getDiagramListItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGetDiagramListItem?: (ctx: GetDiagramListItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.getDiagramItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGetDiagramItem?: (ctx: GetDiagramItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.getDiagramTarget`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitGetDiagramTarget?: (ctx: GetDiagramTargetContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.assignVariable`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAssignVariable?: (ctx: AssignVariableContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementIf`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementIf?: (ctx: StatementIfContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementElsifs`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementElsifs?: (ctx: StatementElsifsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementElse`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementElse?: (ctx: StatementElseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementCase`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementCase?: (ctx: StatementCaseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalExpressionUntilWhen`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalExpressionUntilWhen?: (ctx: OptionalExpressionUntilWhenContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.caseWhenList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCaseWhenList?: (ctx: CaseWhenListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.caseWhen`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCaseWhen?: (ctx: CaseWhenContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalCaseElse`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalCaseElse?: (ctx: OptionalCaseElseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementLoop`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementLoop?: (ctx: StatementLoopContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementWhile`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementWhile?: (ctx: StatementWhileContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementFor`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementFor?: (ctx: StatementForContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.forControl`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitForControl?: (ctx: ForControlContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalForUsingExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalForUsingExpression?: (ctx: OptionalForUsingExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalCursorParameters`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalCursorParameters?: (ctx: OptionalCursorParametersContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalReverse`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalReverse?: (ctx: OptionalReverseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalByExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalByExpression?: (ctx: OptionalByExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.forVariable`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitForVariable?: (ctx: ForVariableContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementForeachA`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementForeachA?: (ctx: StatementForeachAContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.foreachSlice`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitForeachSlice?: (ctx: ForeachSliceContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementExit`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementExit?: (ctx: StatementExitContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.exitType`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExitType?: (ctx: ExitTypeContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementReturn`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementReturn?: (ctx: StatementReturnContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalReturnResult`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalReturnResult?: (ctx: OptionalReturnResultContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementRaise`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementRaise?: (ctx: StatementRaiseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalStatementRaiseLevel`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalStatementRaiseLevel?: (ctx: OptionalStatementRaiseLevelContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalRaiseList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalRaiseList?: (ctx: OptionalRaiseListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalRaiseUsing`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalRaiseUsing?: (ctx: OptionalRaiseUsingContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalRaiseUsingElement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalRaiseUsingElement?: (ctx: OptionalRaiseUsingElementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementAssert`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementAssert?: (ctx: StatementAssertContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalStatementAssertMessage`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalStatementAssertMessage?: (ctx: OptionalStatementAssertMessageContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.loopBody`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitLoopBody?: (ctx: LoopBodyContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementExecSql`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementExecSql?: (ctx: StatementExecSqlContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementDynExecute`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementDynExecute?: (ctx: StatementDynExecuteContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalExecuteUsing`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalExecuteUsing?: (ctx: OptionalExecuteUsingContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalExecuteUsingList`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalExecuteUsingList?: (ctx: OptionalExecuteUsingListContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalExecuteInto`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalExecuteInto?: (ctx: OptionalExecuteIntoContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementOpen`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementOpen?: (ctx: StatementOpenContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalOpenBoundListItem`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalOpenBoundListItem?: (ctx: OptionalOpenBoundListItemContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementFetch`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementFetch?: (ctx: StatementFetchContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.intoTarget`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitIntoTarget?: (ctx: IntoTargetContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalCursorFrom`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalCursorFrom?: (ctx: OptionalCursorFromContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalFetchDirection`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalFetchDirection?: (ctx: OptionalFetchDirectionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementMove`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementMove?: (ctx: StatementMoveContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementClose`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementClose?: (ctx: StatementCloseContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementNull`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementNull?: (ctx: StatementNullContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementCommit`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementCommit?: (ctx: StatementCommitContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementRollback`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementRollback?: (ctx: StatementRollbackContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.plsqlOptionalTransactionChain`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPlsqlOptionalTransactionChain?: (ctx: PlsqlOptionalTransactionChainContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.statementSet`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitStatementSet?: (ctx: StatementSetContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.cursorVariable`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitCursorVariable?: (ctx: CursorVariableContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.exceptionSection`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExceptionSection?: (ctx: ExceptionSectionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.procedureExceptions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitProcedureExceptions?: (ctx: ProcedureExceptionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.procedureException`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitProcedureException?: (ctx: ProcedureExceptionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.procedureConditions`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitProcedureConditions?: (ctx: ProcedureConditionsContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.procedureCondition`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitProcedureCondition?: (ctx: ProcedureConditionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalBlockLabel`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalBlockLabel?: (ctx: OptionalBlockLabelContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalLoopLabel`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalLoopLabel?: (ctx: OptionalLoopLabelContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalLabel`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalLabel?: (ctx: OptionalLabelContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalExitCondition`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalExitCondition?: (ctx: OptionalExitConditionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.anyIdentifier`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitAnyIdentifier?: (ctx: AnyIdentifierContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.plsqlUnreservedKeyword`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitPlsqlUnreservedKeyword?: (ctx: PlsqlUnreservedKeywordContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.sqlExpression`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitSqlExpression?: (ctx: SqlExpressionContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expressionUntilThen`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpressionUntilThen?: (ctx: ExpressionUntilThenContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expressionUntilSemi`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpressionUntilSemi?: (ctx: ExpressionUntilSemiContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expressionUntilRightbracket`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpressionUntilRightbracket?: (ctx: ExpressionUntilRightbracketContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.expressionUntilLoop`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitExpressionUntilLoop?: (ctx: ExpressionUntilLoopContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.makeExecuteSqlStatement`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitMakeExecuteSqlStatement?: (ctx: MakeExecuteSqlStatementContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.optionalReturningClauseInto`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitOptionalReturningClauseInto?: (ctx: OptionalReturningClauseIntoContext) => Result;
    /**
     * Visit a parse tree produced by `PostgreSqlParser.roleOrAliases`.
     * @param ctx the parse tree
     * @return the visitor result
     */
    visitRoleOrAliases?: (ctx: RoleOrAliasesContext) => Result;
}
