import {IStatementsVisitor, StatementPosition} from '../../shared';
import {getStatementEndIndex} from '../../shared/extract-statement-positions-from-query';
import {Sql_stmt_listContext} from './generated/YQLParser';
import {YQLVisitor} from './generated/YQLVisitor';

export class YqlStatementsVisitor extends YQLVisitor<unknown> implements IStatementsVisitor {
    statementPositions: StatementPosition[] = [];
    lastTokenIndex = 0;

    visitSql_stmt_list = (context: Sql_stmt_listContext): void => {
        if (!context.start || !context.stop) {
            return;
        }

        let currentIndex = 0;
        let statement = context.sql_stmt(currentIndex);
        // Linter doesn't like uppercase function names, but this name is generated by ANTLR
        // eslint-disable-next-line new-cap
        let semi = context.SEMICOLON(currentIndex);

        while (statement?.start && statement.stop) {
            this.statementPositions.push({
                startIndex: statement.start.start,
                endIndex: getStatementEndIndex(statement.stop, semi),
            });

            this.lastTokenIndex = semi ? semi.symbol.tokenIndex : statement.stop.tokenIndex;
            currentIndex++;
            statement = context.sql_stmt(currentIndex);
            // Linter doesn't like uppercase function names, but this name is generated by ANTLR
            // eslint-disable-next-line new-cap
            semi = context.SEMICOLON(currentIndex);
        }
    };
}
